<group name="sigma,">
    <!--
Sigma: https://github.com/SigmaHQ/sigma
Wazuh: https://wazuh.com
All Sigma rules licensed under DRL: https://github.com/SigmaHQ/sigma/blob/master/LICENSE.Detection.Rules.md
-->
    <rule id="113001" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_stream_hash/sysmon_regedit_export_to_ads.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Exports the target Registry key and hides it in the specified alternate data stream.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 0d7a9363-af70-4e7b-a3b7-1a176b7fbe84-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Exports Registry Key To an Alternate Data Stream</description>
        <options>no_full_log</options>
        <group>windows,create_stream_hash,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
    </rule>

    <rule id="113003" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_wuauclt_network_connection.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections. One could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: c649a6c7-cd8c-4a78-9c04-000fc76df954-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Wuauclt Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)wuauclt</field>
    </rule>
    <rule id="113004" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_prog_location_network_connection.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects programs with network connections running in suspicious files system locations-->
        <!--Date: 2017/03/19-->
        <!--Status: test-->
        <!--ID: 7b434893-c57d-4f41-908d-6a17bf1ae98f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Program Location with Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Users\\All\ Users\\|\\Users\\Default\\|\\Users\\Public\\|\\Users\\Contacts\\|\\Users\\Searches\\|\\config\\systemprofile\\|\\\\Windows\\\\Fonts\\|\\\\Windows\\\\IME\\|\\\\Windows\\\\addins\\</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\\$Recycle\.bin)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\Perflogs\\)</field>
    </rule>
    <rule id="113005" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_rdp.yml</info>
        <!--Sigma Rule Author: Markus Neis - Swisscom-->
        <!--Description: Detects Non-Standard Tools Connecting to TCP port 3389 indicating possible lateral movement-->
        <!--Date: 2019/05/15-->
        <!--Status: test-->
        <!--ID: ed74fe75-7594-4b4b-ae38-e38e3fd2eb23-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Suspicious Outbound RDP Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\mstsc\.exe|\\RTSApp\.exe|\\RTS2App\.exe|\\RDCMan\.exe|\\ws_TunnelService\.exe|\\RSSensor\.exe|\\RemoteDesktopManagerFree\.exe|\\RemoteDesktopManager\.exe|\\RemoteDesktopManager64\.exe|\\mRemoteNG\.exe|\\mRemote\.exe|\\Terminals\.exe|\\spiceworks\-finder\.exe|\\FSDiscovery\.exe|\\FSAssessment\.exe|\\MobaRTE\.exe|\\chrome\.exe|\\System32\\dns\.exe|\\thor\.exe|\\thor64\.exe|\\Passwordstate\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files\\SplunkUniversalForwarder\\bin\\)</field>
    </rule>
    <rule id="113006" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_excel_outbound_network_connection.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Florian Roth '@Neo23x0"-->
        <!--Description: Detects an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292. You will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.-->
        <!--Date: 2021/11/10-->
        <!--Status: experimental-->
        <!--ID: 75e33ce3-ae32-4dcc-9aa8-a2a3029d6f84-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
        </mitre>
        <description>Excel Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\excel\.exe)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)false</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:10\.|192\.168\.|172\.16\.|172\.17\.|172\.18\.|172\.19\.|172\.20\.|172\.21\.|172\.22\.|172\.23\.|172\.24\.|172\.25\.|172\.26\.|172\.27\.|172\.28\.|172\.29\.|172\.30\.|172\.31\.|127\.0\.0\.1)</field>
    </rule>
    <rule id="113007" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_binary_susp_com.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects an executable in the Windows folder accessing suspicious domains-->
        <!--Date: 2018/08/30-->
        <!--Status: test-->
        <!--ID: e0f8ab85-0ac9-423b-a73a-81b3c7b1aa97-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Microsoft Binary Suspicious Communication Endpoint</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:dl\.dropboxusercontent\.com|\.pastebin\.com|\.githubusercontent\.com)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\)</field>
    </rule>
    <rule id="113008" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_silenttrinity_stager_msbuild_activity.yml</info>
        <!--Sigma Rule Author: Kiran kumar s, oscd.community-->
        <!--Description: Detects a possible remote connections to Silenttrinity c2-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: 50e54b8d-ad73-43f8-96a1-5191685b17a4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1127.001</id>
        </mitre>
        <description>Silenttrinity Stager Msbuild Activity</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msbuild\.exe)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i)80|443</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
    </rule>
    <rule id="113009" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389-->
        <!--Date: 2019/02/16-->
        <!--Status: experimental-->
        <!--ID: 5f699bc5-5446-4a4a-a0b7-5ef2885a3eb4-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP Over Reverse SSH Tunnel</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:127\.)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)::1</field>
    </rule>
    <rule id="113010" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_python.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: bef0bc5a-b9ae-425d-85c6-7b2d705980c6-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Python Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)python</field>
    </rule>
    <rule id="113011" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_suspicious_outbound_kerberos_connection.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: e54979bd-c5f9-4d6c-967b-a04b19ac4c74-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>Suspicious Outbound Kerberos Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)88</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\lsass\.exe|\\opera\.exe|\\chrome\.exe|\\firefox\.exe|\\tomcat\\bin\\tomcat8\.exe)$</field>
    </rule>
    <rule id="113012" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_binary_github_com.yml</info>
        <!--Sigma Rule Author: Michael Haag (idea), Florian Roth (rule)-->
        <!--Description: Detects an executable in the Windows folder accessing github.com-->
        <!--Date: 2017/08/24-->
        <!--Status: test-->
        <!--ID: 635dbb88-67b3-4b41-9ea5-a3af2dd88153-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1105</id>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Microsoft Binary Github Communication</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.github\.com|\.githubusercontent\.com)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\)</field>
    </rule>
    <rule id="113013" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_msiexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: 8e5e38e4-5350-4c0b-895a-e872ce0dd54f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>Msiexec Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msiexec\.exe)$</field>
    </rule>
    <rule id="113014" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_powershell_network_connection.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range')-->
        <!--Date: 2017/03/13-->
        <!--Status: experimental-->
        <!--ID: 1f21ec3f-810d-4b0e-8045-322202e22b4b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)false</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:10\.|192\.168\.|172\.16\.|172\.17\.|172\.18\.|172\.19\.|172\.20\.|172\.21\.|172\.22\.|172\.23\.|172\.24\.|172\.25\.|172\.26\.|172\.27\.|172\.28\.|172\.29\.|172\.30\.|172\.31\.|127\.0\.0\.1)</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI|AUTORI</field>
    </rule>
    <rule id="113015" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_notepad_network_connection.yml</info>
        <!--Sigma Rule Author: EagleEye Team-->
        <!--Description: Detects suspicious network connection by Notepad-->
        <!--Date: 2020/05/14-->
        <!--Status: test-->
        <!--ID: e81528db-fc02-45e8-8e98-4e84aba1f10b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Notepad Making Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\notepad\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)9100</field>
    </rule>
    <rule id="113016" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_imewdbld.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use IMEWDBLD.exe (built-in to windows) to download a file-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 8d7e392e-9b28-49e1-831d-5949c6281228-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Download a File with IMEWDBLD.exe</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\IMEWDBLD\.exe)$</field>
    </rule>
    <rule id="113017" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_remote_powershell_session_network.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: c539afac-c12a-46ed-b1bd-5a5567c9f045-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)5985|5986</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI|AUTORI</field>
    </rule>
    <rule id="113018" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_mega_nz.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects an executable accessing mega.co.nz, which could be a sign of forbidden file sharing use of data exfiltration by malicious actors-->
        <!--Date: 2021/12/06-->
        <!--Status: experimental-->
        <!--ID: fdeebdf0-9f3f-4d08-84a6-4c4d13e39fe4-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Communication To Mega.nz</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)true</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:api\.mega\.co\.nz)</field>
    </rule>
    <rule id="113019" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_regsvr32_network_activity.yml</info>
        <!--Sigma Rule Author: Dmitriy Lifanov, oscd.community-->
        <!--Description: Detects network connections and DNS queries initiated by Regsvr32.exe-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: c7e91a02-d771-4a6d-a700-42587e0b1095-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Regsvr32 Network Activity</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon_event3</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regsvr32\.exe)$</field>
    </rule>
    <rule id="113020" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_crypto_mining.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects process connections to a Monero crypto mining pool-->
        <!--Date: 2021/10/26-->
        <!--Status: stable-->
        <!--ID: fa5b1358-b040-4403-9868-15f7d9ab6329-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1496</id>
        </mitre>
        <description>Windows Crypto Mining Pool Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)pool\.minexmr\.com|fr\.minexmr\.com|de\.minexmr\.com|sg\.minexmr\.com|ca\.minexmr\.com|us\-west\.minexmr\.com|pool\.supportxmr\.com|mine\.c3pool\.com|xmr\-eu1\.nanopool\.org|xmr\-eu2\.nanopool\.org|xmr\-us\-east1\.nanopool\.org|xmr\-us\-west1\.nanopool\.org|xmr\-asia1\.nanopool\.org|xmr\-jp1\.nanopool\.org|xmr\-au1\.nanopool\.org|xmr\.2miners\.com|xmr\.hashcity\.org|xmr\.f2pool\.com|xmrpool\.eu|pool\.hashvault\.pro|moneroocean\.stream|monerocean\.stream</field>
    </rule>
    <rule id="113021" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_delete/registry_delete_removal_amsi_registry_key.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Remove the AMSI Provider registry key in HKLM\Software\Microsoft\AMSI to disable AMSI inspection-->
        <!--Date: 2021/06/07-->
        <!--Status: experimental-->
        <!--ID: 41d1058a-aea7-4952-9293-29eaaf516465-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Removal Amsi Provider Reg Key</description>
        <options>no_full_log</options>
        <group>windows,registry_delete,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\{2781761E\-28E0\-4109\-99FE\-B9D127C57AFE\}|\{A7C452EF\-8E9F\-42EB\-9F2B\-245613CA0DC9\})$</field>
    </rule>
    <rule id="113022" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_delete/file_delete_win_delete_appli_log.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deletion of log files is a known anti-forensic technique-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: b1decb61-ed83-4339-8e95-53ea51901720-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Delete Log from Application</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.log)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\TeamViewer_</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\system32\\svchost\.exe</field>
    </rule>
    <rule id="113023" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_delete/file_delete_win_delete_backup_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.-->
        <!--Date: 2022/01/02-->
        <!--Status: experimental-->
        <!--ID: 06125661-3814-4e03-bfa2-1e4411c60ac3-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Deletes Backup Files</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:cmd\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.VHD|\.bac|\.bak|\.wbcat|\.bkf|\.set|\.win|\.dsk)$</field>
    </rule>
    <rule id="113024" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_delete/file_delete_win_cve_2021_1675_printspooler_del.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detect DLL deletions from Spooler Service driver folder-->
        <!--Date: 2021/07/01-->
        <!--Status: experimental-->
        <!--ID: 5b2bbc47-dead-4ef7-8908-0cf73fcbecbf-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>Windows Spooler Service Suspicious File Deletion</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:spoolsv\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\spool\\drivers\\x64\\3\\</field>
    </rule>
    <rule id="113025" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_delete/file_delete_win_sysinternals_sdelete_file_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection to trigger for the deletion of files by Sysinternals SDelete. It looks for the common name pattern used to rename files.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 6ddab845-b1b8-49c2-bbf7-1a11967f64bc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Sysinternals SDelete File Deletion</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.AAA|\.ZZZ)$</field>
    </rule>
    <rule id="113026" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_delete/file_delete_win_delete_prefetch.yml</info>
        <!--Sigma Rule Author: Cedric MAURUGEON-->
        <!--Description: Detects the deletion of a prefetch file (AntiForensic)-->
        <!--Date: 2021/09/29-->
        <!--Status: experimental-->
        <!--ID: 0a1f9d29-6465-4776-b091-7f43b26e4c89-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Prefetch File Deletion</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Prefetch\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.pf)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\system32\\\\svchost\.exe</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)^(?:NT\ AUTHORITY\\\\SYSTEM|AUTORITE\ NT\\\\Sys)</field>
    </rule>
    <rule id="113027" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_stickykey_like_backdoor.yml</info>
        <!--Sigma Rule Author: Florian Roth, @twjackomo, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen-->
        <!--Date: 2018/03/15-->
        <!--Status: experimental-->
        <!--ID: baca5663-583c-45f9-b5dc-ea96a22ce542-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.008</id>
            <id>car.2014-11-003</id>
            <id>car.2014-11-008</id>
        </mitre>
        <description>Sticky Key Like Backdoor Usage</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\sethc\.exe\\Debugger|\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\utilman\.exe\\Debugger|\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\osk\.exe\\Debugger|\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\Magnify\.exe\\Debugger|\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\Narrator\.exe\\Debugger|\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options\\DisplaySwitch\.exe\\Debugger)$</field>
    </rule>
    <rule id="113028" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_crashdump_disabled.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects disabling the CrashDump per registry (as used by HermeticWiper)-->
        <!--Date: 2022/02/24-->
        <!--Status: experimental-->
        <!--ID: 2ff692c2-4594-41ec-8fcb-46587de769e0-->
        <mitre>
            <id>attack.t1564</id>
            <id>attack.t1112</id>
        </mitre>
        <description>CrashControl CrashDump Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SYSTEM\\CurrentControlSet\\Control\\CrashControl</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113029" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_cve_2021_31979_cve_2021_33771_exploits.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum-->
        <!--Date: 2021/07/16-->
        <!--Status: experimental-->
        <!--ID: 32b5db62-cb5f-4266-9639-0fa48376ac00-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1566</id>
            <id>attack.t1203</id>
            <id>cve.2021.33771</id>
            <id>cve.2021.31979</id>
        </mitre>
        <description>CVE-2021-31979 CVE-2021-33771 Exploits by Sourgum</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Classes\\CLSID\\\{CF4CC405\-E2C5\-4DDD\-B3CE\-5E7582D8C9FA\}\\InprocServer32|\\SOFTWARE\\Classes\\CLSID\\\{7C857801\-7381\-11CF\-884D\-00AA004B2E24\}\\InProcServer32</field>
        <field name="full_log" negate="no" type="pcre2">(?i)IMJPUEXP\.DLL</field>
    </rule>
    <rule id="113030" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_mimikatz_printernightmare.yml</info>
        <!--Sigma Rule Author: Markus Neis, @markus_neis, Florian Roth-->
        <!--Description: Detects static QMS 810 and mimikatz driver name used by Mimikatz as exploited in CVE-2021-1675 and CVE-2021-34527-->
        <!--Date: 2021/07/04-->
        <!--Status: experimental-->
        <!--ID: ba6b9e43-1d45-4d3c-a504-1043a64c8469-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
            <id>cve.2021.1675</id>
            <id>cve.2021.34527</id>
        </mitre>
        <description>PrinterNightmare Mimimkatz Driver Name</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Control\\Print\\Environments\\Windows\ x64\\Drivers\\Version\-3\\QMS\ 810\\|\\Control\\Print\\Environments\\Windows\ x64\\Drivers\\Version\-3\\mimikatz</field>
    </rule>
    <rule id="113031" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_mimikatz_printernightmare.yml</info>
        <!--Sigma Rule Author: Markus Neis, @markus_neis, Florian Roth-->
        <!--Description: Detects static QMS 810 and mimikatz driver name used by Mimikatz as exploited in CVE-2021-1675 and CVE-2021-34527-->
        <!--Date: 2021/07/04-->
        <!--Status: experimental-->
        <!--ID: ba6b9e43-1d45-4d3c-a504-1043a64c8469-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
            <id>cve.2021.1675</id>
            <id>cve.2021.34527</id>
        </mitre>
        <description>PrinterNightmare Mimimkatz Driver Name</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)legitprinter</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Control\\Print\\Environments\\Windows</field>
    </rule>
    <rule id="113032" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_mimikatz_printernightmare.yml</info>
        <!--Sigma Rule Author: Markus Neis, @markus_neis, Florian Roth-->
        <!--Description: Detects static QMS 810 and mimikatz driver name used by Mimikatz as exploited in CVE-2021-1675 and CVE-2021-34527-->
        <!--Date: 2021/07/04-->
        <!--Status: experimental-->
        <!--ID: ba6b9e43-1d45-4d3c-a504-1043a64c8469-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
            <id>cve.2021.1675</id>
            <id>cve.2021.34527</id>
        </mitre>
        <description>PrinterNightmare Mimimkatz Driver Name</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Control\\Print\\Environments|\\CurrentVersion\\Print\\Printers</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Gentil\ Kiwi|mimikatz\ printer|Kiwi\ Legit\ Printer</field>
    </rule>
    <rule id="113033" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_modify_screensaver_binary_path.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz @bczyz1, oscd.community-->
        <!--Description: Detects value modification of registry key containing path to binary used as screensaver.-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: 67a6c006-3fbe-46a7-9074-2ba3b82c3000-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Path To Screensaver Binary Modified</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Control\ Panel\\Desktop\\SCRNSAVE\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\rundll32\.exe|\\explorer\.exe)$</field>
    </rule>
    <rule id="113034" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_silentprocessexit_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects changes to the Registry in which a monitor program gets registered to dump process memory of the lsass.exe process memory-->
        <!--Date: 2021/02/26-->
        <!--Status: experimental-->
        <!--ID: 55e29995-75e7-451a-bef0-6225e2f13597-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.007</id>
        </mitre>
        <description>SilentProcessExit Monitor Registrytion for LSASS</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Microsoft\\Windows\ NT\\CurrentVersion\\SilentProcessExit\\lsass\.exe</field>
    </rule>
    <rule id="113035" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_susp_download_run_key.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the suspicious RUN keys created by software located in Download or temporary Outlook/Internet Explorer directories-->
        <!--Date: 2019/10/01-->
        <!--Status: test-->
        <!--ID: 9c5037d1-c568-49b3-88c7-9846a5bdc2be-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Suspicious Run Key from Download</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Downloads\\|\\Temporary\ Internet\ Files\\Content\.Outlook\\|\\Local\ Settings\\Temporary\ Internet\ Files\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Run\\</field>
    </rule>
    <rule id="113036" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_disable_security_events_logging_adding_reg_key_minint.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects the addition of a key 'MiniNt' to the registry. Upon a reboot, Windows Event Log service will stopped write events.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 919f2ef0-be2d-4a7a-b635-eb2b41fde044-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Disable Security Events Logging Adding Reg Key MiniNt</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Control\\MiniNt</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)CreateKey</field>
        <field name="win.eventdata.newName" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Control\\MiniNt</field>
    </rule>
    <rule id="113037" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_hybridconnectionmgr_svc_installation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function.-->
        <!--Date: 2021/04/12-->
        <!--Status: experimental-->
        <!--ID: ac8866c7-ce44-46fd-8c17-b24acff96ca8-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1608</id>
        </mitre>
        <description>HybridConnectionManager Service Installation</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Services\\HybridConnectionManager</field>
    </rule>
    <rule id="113038" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_hybridconnectionmgr_svc_installation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function.-->
        <!--Date: 2021/04/12-->
        <!--Status: experimental-->
        <!--ID: ac8866c7-ce44-46fd-8c17-b24acff96ca8-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1608</id>
        </mitre>
        <description>HybridConnectionManager Service Installation</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)Microsoft\.HybridConnectionManager\.Listener\.exe</field>
    </rule>
    <rule id="113039" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_shell_open_keys_manipulation.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 152f3630-77c1-4284-bcc0-4cc68ab2f6e7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1546.001</id>
        </mitre>
        <description>Shell Open Registry Keys Manipulation</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Classes\\ms\-settings\\shell\\open\\command\\SymbolicLinkValue)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\Software\\Classes\\\{</field>
    </rule>
    <rule id="113040" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_shell_open_keys_manipulation.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 152f3630-77c1-4284-bcc0-4cc68ab2f6e7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1546.001</id>
        </mitre>
        <description>Shell Open Registry Keys Manipulation</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Classes\\ms\-settings\\shell\\open\\command\\DelegateExecute)$</field>
    </rule>
    <rule id="113041" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_shell_open_keys_manipulation.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 152f3630-77c1-4284-bcc0-4cc68ab2f6e7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1546.001</id>
        </mitre>
        <description>Shell Open Registry Keys Manipulation</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Classes\\ms\-settings\\shell\\open\\command\\\(Default\)|Classes\\exefile\\shell\\open\\command\\\(Default\))$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113042" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_pandemic.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Pandemic Windows Implant-->
        <!--Date: 2017/06/01-->
        <!--Status: experimental-->
        <!--ID: 47e0852a-cf81-4494-a8e6-31864f8c86ed-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Pandemic Registry Key</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SYSTEM\\CurrentControlSet\\services\\null\\Instance</field>
    </rule>
    <rule id="113043" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_susp_mic_cam_access.yml</info>
        <!--Sigma Rule Author: Den Iuzvyk-->
        <!--Description: Detects Processes accessing the camera and microphone from suspicious folder-->
        <!--Date: 2020/06/07-->
        <!--Status: experimental-->
        <!--ID: 62120148-6b7a-42be-8b91-271c04e281a3-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1125</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Suspicious Camera and Microphone Access</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Microsoft\\\\Windows\\\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\NonPackaged</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)microphone|webcam</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i):\#Windows\#Temp\#|:\#\$Recycle\.bin\#|:\#Temp\#|:\#Users\#Public\#|:\#Users\#Default\#|:\#Users\#Desktop\#</field>
    </rule>
    <rule id="113044" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_cmstp_execution_by_registry.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman-->
        <!--Description: Detects various indicators of Microsoft Connection Manager Profile Installer execution-->
        <!--Date: 2018/07/16-->
        <!--Status: stable-->
        <!--ID: b6d235fc-1d38-4b12-adbe-325f06728f37-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.003</id>
            <id>attack.g0069</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP Execution Registry Event</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\cmmgr32\.exe</field>
    </rule>
    <rule id="113045" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_net_ntlm_downgrade.yml</info>
        <!--Sigma Rule Author: Florian Roth, wagga-->
        <!--Description: Detects NetNTLM downgrade attack-->
        <!--Date: 2018/03/20-->
        <!--Status: experimental-->
        <!--ID: d67572a0-e2ec-45d6-b8db-c100d14b8ef2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>NetNTLM Downgrade Attack</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SYSTEM\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Control\\Lsa</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\lmcompatibilitylevel|\\NtlmMinClientSec|\\RestrictSendingNTLMTraffic)$</field>
    </rule>
    <rule id="113046" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_oceanlotus_registry.yml</info>
        <!--Sigma Rule Author: megan201296, Jonhnathan Ribeiro-->
        <!--Description: Detects registry keys created in OceanLotus (also known as APT32) attacks-->
        <!--Date: 2019/04/14-->
        <!--Status: experimental-->
        <!--ID: 4ac5fc44-a601-4c06-955b-309df8c4e9d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>OceanLotus Registry Activity</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCU\\SOFTWARE\\Classes\\CLSID\\\{E08A0F4B\-1F65\-4D4D\-9A09\-BD4625B9C5A1\}\\Model</field>
    </rule>
    <rule id="113047" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_oceanlotus_registry.yml</info>
        <!--Sigma Rule Author: megan201296, Jonhnathan Ribeiro-->
        <!--Description: Detects registry keys created in OceanLotus (also known as APT32) attacks-->
        <!--Date: 2019/04/14-->
        <!--Status: experimental-->
        <!--ID: 4ac5fc44-a601-4c06-955b-309df8c4e9d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>OceanLotus Registry Activity</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKCU\\SOFTWARE\\App\\|HKLM\\SOFTWARE\\App\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)AppXbf13d4ea2945444d8b13e2121cb6b663\\|AppX70162486c7554f7f80f481985d67586d\\|AppX37cc7fdccd644b4f85f4b22d5a3f105a\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Application|DefaultIcon)$</field>
    </rule>
    <rule id="113048" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_oceanlotus_registry.yml</info>
        <!--Sigma Rule Author: megan201296, Jonhnathan Ribeiro-->
        <!--Description: Detects registry keys created in OceanLotus (also known as APT32) attacks-->
        <!--Date: 2019/04/14-->
        <!--Status: experimental-->
        <!--ID: 4ac5fc44-a601-4c06-955b-309df8c4e9d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>OceanLotus Registry Activity</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKCU\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\|Classes\\AppX3bbba44c6cae4d9695755183472171e2\\|Classes\\CLSID\\\{E3517E26\-8E93\-458D\-A6DF\-8030BC80528B\}\\|Classes\\CLSID\\\{E08A0F4B\-1F65\-4D4D\-9A09\-BD4625B9C5A1\}\\Model</field>
    </rule>
    <rule id="113049" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_susp_lsass_dll_load.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a method to load DLL via LSASS process using an undocumented Registry key-->
        <!--Date: 2019/10/16-->
        <!--Status: test-->
        <!--ID: b3503044-60ce-4bf4-bbcb-e3db98788823-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1547.008</id>
        </mitre>
        <description>DLL Load via LSASS</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt|\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt</field>
    </rule>
    <rule id="113050" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_trust_record_modification.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Alerts on trust record modification within the registry, indicating usage of macros-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: 295a59c1-7b79-4b47-a930-df12c15fc9c2-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Windows Registry Trust Record Modification</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)TrustRecords</field>
    </rule>
    <rule id="113051" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_portproxy_registry_key.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects the modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.-->
        <!--Date: 2021/06/22-->
        <!--Status: experimental-->
        <!--ID: a54f842a-3713-4b45-8c84-5f136fdebd3c-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PortProxy Registry Key</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp</field>
    </rule>
    <rule id="113052" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_hack_wce_reg.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: test-->
        <!--ID: a6b33c02-8305-488f-8585-03cb2a7763f2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Windows Credential Editor Registry</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Services\\WCESERVICE\\Start</field>
    </rule>
    <rule id="113053" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_runkey_winekey.yml</info>
        <!--Sigma Rule Author: omkar72-->
        <!--Description: Detects potential malicious modification of run keys by winekey or team9 backdoor-->
        <!--Date: 2020/10/30-->
        <!--Status: test-->
        <!--ID: b98968aa-dbc0-4a9c-ac35-108363cbf8d5-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>WINEKEY Registry Modification</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run\\Backup\ Mgr)$</field>
    </rule>
    <rule id="113054" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_add_local_hidden_user.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Sysmon registry detection of a local hidden user account.-->
        <!--Date: 2021/05/03-->
        <!--Status: experimental-->
        <!--ID: 460479f3-80b7-42da-9c43-2cc1d54dbccd-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Creation of a Local Hidden User Account by Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\SAM\\SAM\\Domains\\Account\\Users\\Names\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:lsass\.exe)$</field>
    </rule>
    <rule id="113055" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_new_dll_added_to_appinit_dlls_registry_key.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community, Tim Shelton-->
        <!--Description: DLLs that are specified in the AppInit_DLLs value in the Registry key HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 4f84b697-c9ed-4420-8ab5-e09af5b2345d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.010</id>
        </mitre>
        <description>New DLL Added to AppInit_DLLs Registry Key</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\\\Windows\\\\AppInit_Dlls|\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\ NT\\CurrentVersion\\\\Windows\\\\AppInit_Dlls)$</field>
        <field name="win.eventdata.newName" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\\\Windows\\\\AppInit_Dlls|\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\ NT\\CurrentVersion\\\\Windows\\\\AppInit_Dlls)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113056" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_new_dll_added_to_appcertdlls_registry_key.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 6aa1d992-5925-4e9f-a49b-845e51d1de01-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.009</id>
        </mitre>
        <description>New DLL Added to AppCertDlls Registry Key</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session\ Manager\\AppCertDlls</field>
        <field name="win.eventdata.newName" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurentControlSet\\Control\\Session\ Manager\\AppCertDlls</field>
    </rule>
    <rule id="113057" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_mal_flowcloud.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects FlowCloud malware from threat group TA410.-->
        <!--Date: 2020/06/09-->
        <!--Status: experimental-->
        <!--ID: 5118765f-6657-4ddb-a487-d7bd673abbf1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>FlowCloud Malware</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\HARDWARE\\\{804423C2\-F490\-4ac3\-BFA5\-13DEDE63A71A\}|HKLM\\HARDWARE\\\{A5124AF5\-DF23\-49bf\-B0ED\-A18ED3DEA027\}|HKLM\\HARDWARE\\\{2DB80286\-1784\-48b5\-A751\-B6ED1F490303\}</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\SYSTEM\\Setup\\PrintResponsor\\)</field>
    </rule>
    <rule id="113058" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_susp_atbroker_change.yml</info>
        <!--Sigma Rule Author: Mateusz Wydra, oscd.community-->
        <!--Description: Detects creation/modification of Assisitive Technology applications and persistence with usage of ATs-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 9577edbb-851f-4243-8c91-1d5b50c1a39b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Atbroker Registry Change</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\Microsoft\\Windows\ NT\\CurrentVersion\\Accessibility\\ATs</field>
    </rule>
    <rule id="113059" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_susp_atbroker_change.yml</info>
        <!--Sigma Rule Author: Mateusz Wydra, oscd.community-->
        <!--Description: Detects creation/modification of Assisitive Technology applications and persistence with usage of ATs-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 9577edbb-851f-4243-8c91-1d5b50c1a39b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Atbroker Registry Change</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\Microsoft\\Windows\ NT\\CurrentVersion\\Accessibility\\Configuration</field>
    </rule>
    <rule id="113060" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_redmimicry_winnti_reg.yml</info>
        <!--Sigma Rule Author: Alexander Rausch-->
        <!--Description: Detects actions caused by the RedMimicry Winnti playbook-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: 5b175490-b652-4b02-b1de-5b5b4083c5f8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RedMimicry Winnti Playbook Registry Manipulation</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\HTMLHelp\\data</field>
    </rule>
    <rule id="113061" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_dns_serverlevelplugindll.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the installation of a plugin DLL via ServerLevelPluginDll parameter in Registry, which can be used to execute code in context of the DNS server (restart required)-->
        <!--Date: 2017/05/08-->
        <!--Status: experimental-->
        <!--ID: e61e8a88-59a9-451c-874e-70fcc9740d67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1112</id>
        </mitre>
        <description>DNS ServerLevelPluginDll Install</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\services\\DNS\\Parameters\\ServerLevelPluginDll)$</field>
    </rule>
    <rule id="113062" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_bypass_via_wsreset.yml</info>
        <!--Sigma Rule Author: oscd.community, Dmitry Uchakin-->
        <!--Description: Unfixed method for UAC bypass from windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 6ea3bf32-9680-422d-9f50-e90716b12a66-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Via Wsreset</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command)$</field>
    </rule>
    <rule id="113063" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_ssp_added_lsa_config.yml</info>
        <!--Sigma Rule Author: iwillkeepwatch-->
        <!--Description: Detects the addition of a SSP to the registry. Upon a reboot or API call, SSP DLLs gain access to encrypted and plaintext passwords stored in Windows.-->
        <!--Date: 2019/01/18-->
        <!--Status: test-->
        <!--ID: eeb30123-9fbd-4ee8-aaa0-2e545bbed6dc-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.005</id>
        </mitre>
        <description>Security Support Provider (SSP) Added to LSA Configuration</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\System\\CurrentControlSet\\Control\\Lsa\\Security\ Packages|HKLM\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security\ Packages</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\system32\\msiexec\.exe</field>
    </rule>
    <rule id="113064" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_office_test_regadd.yml</info>
        <!--Sigma Rule Author: omkar72-->
        <!--Description: Detects the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started-->
        <!--Date: 2020/10/25-->
        <!--Status: experimental-->
        <!--ID: 3d27f6dd-1c74-4687-b4fa-ca849d128d1c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.002</id>
        </mitre>
        <description>Office Application Startup - Office Test</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCU\\Software\\Microsoft\\Office\ test\\Special\\Perf|HKLM\\Software\\Microsoft\\Office\ test\\Special\\Perf</field>
    </rule>
    <rule id="113065" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_mal_azorult.yml</info>
        <!--Sigma Rule Author: Trent Liffick-->
        <!--Description: Detects the presence of a registry key created during Azorult execution-->
        <!--Date: 2020/05/08-->
        <!--Status: test-->
        <!--ID: f7f9ab88-7557-4a69-b30e-0a8f91b3a0e7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Registry Entries For Azorult Malware</description>
        <options>no_full_log</options>
        <group>windows,registry_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)12|13</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SYSTEM\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\services\\localNETService)$</field>
    </rule>
    <rule id="113066" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_leviathan.yml</info>
        <!--Sigma Rule Author: Aidan Bracher-->
        <!--Description: Detects registry key used by Leviathan APT in Malaysian focused campaign-->
        <!--Date: 2020/07/07-->
        <!--Status: experimental-->
        <!--ID: 70d43542-cd2d-483c-8f30-f16b436fd7db-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Leviathan Registry Key Activity</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCU\\Software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run\\ntkd</field>
    </rule>
    <rule id="113067" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_persistence_recycle_bin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects persistence registry keys for Recycle Bin-->
        <!--Date: 2021/11/18-->
        <!--Status: experimental-->
        <!--ID: 277efb8f-60be-4f10-b4d3-037802f37167-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Registry Persistence Mechanisms in Recycle Bin</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)RenameKey</field>
        <field name="win.eventdata.newName" negate="no" type="pcre2">(?i)HKCR\\CLSID\\\{645FF040\-5081\-101B\-9F08\-00AA002F954E\}\\shell\\open</field>
    </rule>
    <rule id="113068" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_persistence_recycle_bin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects persistence registry keys for Recycle Bin-->
        <!--Date: 2021/11/18-->
        <!--Status: experimental-->
        <!--ID: 277efb8f-60be-4f10-b4d3-037802f37167-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Registry Persistence Mechanisms in Recycle Bin</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCR\\CLSID\\\{645FF040\-5081\-101B\-9F08\-00AA002F954E\}\\shell\\open\\command\\\(Default\)</field>
    </rule>
    <rule id="113069" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_apt_chafer_mar18.yml</info>
        <!--Sigma Rule Author: Florian Roth, Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects Chafer activity attributed to OilRig as reported in Nyotron report in March 2018-->
        <!--Date: 2018/03/23-->
        <!--Status: experimental-->
        <!--ID: 7bdf2a7c-3acc-4091-9581-0a77dad1c5b5-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0049</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
            <id>attack.t1543.003</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Chafer Activity</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\UMe|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\UT)$</field>
    </rule>
    <rule id="113070" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_disable_wdigest_credential_guard.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects potential malicious modification of the property value of IsCredGuardEnabled from HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest to disable Cred Guard on a system. This is usually used with UseLogonCredential to manipulate the caching credentials.-->
        <!--Date: 2019/08/25-->
        <!--Status: test-->
        <!--ID: 1a2d6c47-75b0-45bd-b133-2c0be75349fd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Wdigest CredGuard Registry Modification</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\IsCredGuardEnabled)$</field>
    </rule>
    <rule id="113071" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_event/registry_event_esentutl_volume_shadow_copy_service_keys.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\System\\CurrentControlSet\\Services\\VSS\\Diag\\VolSnap\\Volume are captured.-->
        <!--Date: 2020/10/20-->
        <!--Status: experimental-->
        <!--ID: 5aad0995-46ab-41bd-a9ff-724f41114971-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Esentutl Volume Shadow Copy Service Keys</description>
        <options>no_full_log</options>
        <group>registry_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)System\\CurrentControlSet\\Services\\VSS</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:esentutl\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)System\\CurrentControlSet\\Services\\VSS\\Start</field>
    </rule>
    <rule id="113072" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_suspicious_keyboard_layout_load.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: 34aa0252-6039-40ff-951f-939fd6ce47d8-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Suspicious Keyboard Layout Load</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Keyboard\ Layout\\Preload\\|\\Keyboard\ Layout\\Substitutes\\</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)429|50429|0000042a</field>
    </rule>
    <rule id="113073" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_asep_reg_keys_modification_session_manager.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 046218bd-e0d8-4113-a3c3-895a12b2b298-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Session Manager Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\System\\CurrentControlSet\\Control\\Session\ Manager</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SetupExecute|\\S0InitialCommand|\\KnownDlls|\\Execute|\\BootExecute|\\AppCertDlls</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113074" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_mal_adwind.yml</info>
        <!--Sigma Rule Author: Florian Roth, Tom Ueltschi, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects javaw.exe in AppData folder as used by Adwind / JRAT-->
        <!--Date: 2017/11/10-->
        <!--Status: experimental-->
        <!--ID: 42f0e038-767e-4b85-9d96-2c6335bad0b5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Adwind RAT / JRAT</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Run)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:%AppData%\\Roaming\\Oracle\\bin\\)</field>
    </rule>
    <rule id="113075" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_office_security.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick)-->
        <!--Description: Detects registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents. (see references)-->
        <!--Date: 2020/05/22-->
        <!--Status: experimental-->
        <!--ID: a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Office Security Settings Changed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Security\\Trusted\ Documents\\TrustRecords|\\Security\\AccessVBOM|\\Security\\VBAWarnings)$</field>
    </rule>
    <rule id="113076" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_outlook_security.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Change outlook email security settings-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: c3cefdf4-6703-4e1c-bad8-bf422fc5015a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137</id>
        </mitre>
        <description>Change Outlook Security Setting in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\Office\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Outlook\\Security\\</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
    </rule>
    <rule id="113077" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_change_rdp_port.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Remote desktop is a common feature in operating systems.
It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.
Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).
-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 509e84b9-a71a-40e0-834f-05470369bd1e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.010</id>
        </mitre>
        <description>Changing RDP Port to Non Standard Number</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\System\\CurrentControlSet\\Control\\Terminal\ Server\\WinStations\\RDP\-Tcp\\PortNumber</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x00000d3d\)</field>
    </rule>
    <rule id="113078" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_uac_bypass_wmp.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 5f9db380-ea57-4d1e-beab-8a2d33397e93-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Windows Media Player - Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\AppCompatFlags\\Compatibility\ Assistant\\Store\\C:\\Program\ Files\\Windows\ Media\ Player\\osk\.exe)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)Binary\ Data</field>
    </rule>
    <rule id="113079" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_set_servicedll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the modification of a ServiceDLL value in the service settings-->
        <!--Date: 2022/02/04-->
        <!--Status: experimental-->
        <!--ID: 612e47e9-8a59-43a6-b404-f48683f45bd6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>ServiceDll Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\System\\CurrentControlSet\\Services\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Parameters\\ServiceDll)$</field>
    </rule>
    <rule id="113080" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disabled_tamper_protection_on_microsoft_defender.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects disabling Windows Defender Tamper Protection-->
        <!--Date: 2021/08/04-->
        <!--Status: experimental-->
        <!--ID: 93d298a1-d28f-47f1-a468-d971e7796679-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Tamper Protection on Windows Defender</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\Windows\ Defender\\Features\\TamperProtection</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0\)</field>
    </rule>
    <rule id="113081" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_chrome_extension.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Running Chrome VPN Extensions via the Registry install 2 vpn extension-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: b64a026b-8deb-4c1d-92fd-98893209dff1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Running Chrome VPN Extensions via the Registry 2 VPN Extension</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\Wow6432Node\\Google\\Chrome\\Extensions</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:update_url)$</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)fdcgdnkidjaadafnichfpabhfomcebme|fcfhplploccackoneaefokcmbjfbkenj|bihmplhobchoageeokmgbdihknkjbknd|gkojfkhlekighikafcpjkiklfbnlmeio|jajilbjjinjmgcibalaakngmkilboobh|gjknjjomckknofjidppipffbpoekiipm|nabbmpekekjknlbkgpodfndbodhijjem|kpiecbcckbofpmkkkdibbllpinceiihk|nlbejmccbhkncgokjcmghpfloaajcffj|omghfjlpggmjjaagoclmmobgdodcjboh|bibjcjfmgapbfoljiojpipaooddpkpai|mpcaainmfjjigeicjnlkdfajbioopjko|jljopmgdobloagejpohpldgkiellmfnc|lochiccbgeohimldjooaakjllnafhaid|nhnfcgpcbfclhfafjlooihdfghaeinfc|ookhnhpkphagefgdiemllfajmkdkcaim|namfblliamklmeodpcelkokjbffgmeoo|nbcojefnccbanplpoffopkoepjmhgdgh|majdfhpaihoncoakbjgbdhglocklcgno|lnfdmdhmfbimhhpaeocncdlhiodoblbd|eppiocemhmnlbhjplcgkofciiegomcon|cocfojppfigjeefejbpfmedgjbpchcng|foiopecknacmiihiocgdjgbjokkpkohc|hhdobjgopfphlmjbmnpglhfcgppchgje|jgbaghohigdbgbolncodkdlpenhcmcge|inligpkjkhbpifecbdjhmdpcfhnlelja|higioemojdadgdbhbbbkfbebbdlfjbip|hipncndjamdcmphkgngojegjblibadbe|iolonopooapdagdemdoaihahlfkncfgg|nhfjkakglbnnpkpldhjmpmmfefifedcj|jpgljfpmoofbmlieejglhonfofmahini|fgddmllnllkalaagkghckoinaemmogpe|ejkaocphofnobjdedneohbbiilggdlbi|keodbianoliadkoelloecbhllnpiocoi|hoapmlpnmpaehilehggglehfdlnoegck|poeojclicodamonabcabmapamjkkmnnk|dfkdflfgjdajbhocmfjolpjbebdkcjog|kcdahmgmaagjhocpipbodaokikjkampi|klnkiajpmpkkkgpgbogmcgfjhdoljacg|lneaocagcijjdpkcabeanfpdbmapcjjg|pgfpignfckbloagkfnamnolkeaecfgfh|jplnlifepflhkbkgonidnobkakhmpnmh|jliodmnojccaloajphkingdnpljdhdok|hnmpcagpplmpfojmgmnngilcnanddlhb|ffbkglfijbcbgblgflchnbphjdllaogb|kcndmbbelllkmioekdagahekgimemejo|jdgilggpfmjpbodmhndmhojklgfdlhob|bihhflimonbpcfagfadcnbbdngpopnjb|ppajinakbfocjfnijggfndbdmjggcmde|oofgbpoabipfcfjapgnbbjjaenockbdp|bhnhkdgoefpmekcgnccpnhjfdgicfebm|knmmpciebaoojcpjjoeonlcjacjopcpf|dhadilbmmjiooceioladdphemaliiobo|jedieiamjmoflcknjdjhpieklepfglin|mhngpdlhojliikfknhfaglpnddniijfh|omdakjcmkglenbhjadbccaookpfjihpa|npgimkapccfidfkfoklhpkgmhgfejhbj|akeehkgglkmpapdnanoochpfmeghfdln|gbmdmipapolaohpinhblmcnpmmlgfgje|aigmfoeogfnljhnofglledbhhfegannp|cgojmfochfikphincbhokimmmjenhhgk|ficajfeojakddincjafebjmfiefcmanc|ifnaibldjfdmaipaddffmgcmekjhiloa|jbnmpdkcfkochpanomnkhnafobppmccn|apcfdffemoinopelidncddjbhkiblecc|mjolnodfokkkaichkcjipfgblbfgojpa|oifjbnnafapeiknapihcmpeodaeblbkn|plpmggfglncceinmilojdkiijhmajkjh|mjnbclmflcpookeapghfhapeffmpodij|bblcccknbdbplgmdjnnikffefhdlobhp|aojlhgbkmkahabcmcpifbolnoichfeep|lcmammnjlbmlbcaniggmlejfjpjagiia|knajdeaocbpmfghhmijicidfcmdgbdpm|bdlcnpceagnkjnjlbbbcepohejbheilk|edknjdjielmpdlnllkdmaghlbpnmjmgb|eidnihaadmmancegllknfbliaijfmkgo|ckiahbcmlmkpfiijecbpflfahoimklke|macdlemfnignjhclfcfichcdhiomgjjb|chioafkonnhbpajpengbalkececleldf|amnoibeflfphhplmckdbiajkjaoomgnj|llbhddikeonkpbhpncnhialfbpnilcnc|pcienlhnoficegnepejpfiklggkioccm|iocnglnmfkgfedpcemdflhkchokkfeii|igahhbkcppaollcjeaaoapkijbnphfhb|njpmifchgidinihmijhcfpbdmglecdlb|ggackgngljinccllcmbgnpgpllcjepgc|kchocjcihdgkoplngjemhpplmmloanja|bnijmipndnicefcdbhgcjoognndbgkep|lklekjodgannjcccdlbicoamibgbdnmi|dbdbnchagbkhknegmhgikkleoogjcfge|egblhcjfjmbjajhjhpmnlekffgaemgfh|ehbhfpfdkmhcpaehaooegfdflljcnfec|bkkgdjpomdnfemhhkalfkogckjdkcjkg|almalgbpmcfpdaopimbdchdliminoign|akkbkhnikoeojlhiiomohpdnkhbkhieh|gbfgfbopcfokdpkdigfmoeaajfmpkbnh|bniikohfmajhdcffljgfeiklcbgffppl|lejgfmmlngaigdmmikblappdafcmkndb|ffhhkmlgedgcliajaedapkdfigdobcif|gcknhkkoolaabfmlnjonogaaifnjlfnp|pooljnboifbodgifngpppfklhifechoe|fjoaledfpmneenckfbpdfhkmimnjocfa|aakchaleigkohafkfjfjbblobjifikek|dpplabbmogkhghncfbfdeeokoefdjegm|padekgcemlokbadohgkifijomclgjgif|bfidboloedlamgdmenmlbipfnccokknp</field>
    </rule>
    <rule id="113082" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_asep_reg_keys_modification_wow6432node_currentversion.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 480421f9-417f-4d3b-9552-fd2728443ec8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Wow6432Node CurrentVersion Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\ NT\\CurrentVersion</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\\\Windows\\\\Appinit_Dlls|\\Image\ File\ Execution\ Options|\\Drivers32</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)|\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Image\ File\ Execution\ Options</field>
    </rule>
    <rule id="113083" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_abusing_windows_telemetry_for_persistence.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Windows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections. This binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run. The problem is, it will run any arbitrary command without restriction of location or type.-->
        <!--Date: 2020/09/29-->
        <!--Status: experimental-->
        <!--ID: 4e8d5fd3-c959-441f-a941-f73d0cdcdca5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
            <id>attack.t1053</id>
        </mitre>
        <description>Abusing Windows Telemetry For Persistence</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\.sh|\.exe|\.dll|\.bin|\.bat|\.cmd|\.js|\.ps|\.vb|\.jar|\.hta|\.msi|\.vbs)$</field>
    </rule>
    <rule id="113084" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_asep_reg_keys_modification_system_scripts.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: e7a2fd40-3ae1-4a85-bf80-15cf624fb1b1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>System Scripts Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Policies\\Microsoft\\\\Windows\\\\System\\Scripts</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Startup|\\Shutdown|\\Logon|\\Logoff</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113085" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disable_microsoft_office_security_features.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Disable Microsoft Office Security Features by registry-->
        <!--Date: 2021/06/08-->
        <!--Status: experimental-->
        <!--ID: 7c637634-c95d-4bbf-b26c-a82510874b34-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Microsoft Office Security Features</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\Office\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:VBAWarnings|DisableInternetFilesInPV|DisableUnsafeLocationsInPV|DisableAttachementsInPV)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113086" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_comhijack_sdclt.yml</info>
        <!--Sigma Rule Author: Omkar Gudhate-->
        <!--Description: Detects changes to 'HKCU\Software\Classes\Folder\shell\open\command\DelegateExecute'-->
        <!--Date: 2020/09/27-->
        <!--Status: test-->
        <!--ID: 07743f65-7ec9-404a-a519-913db7118a8d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546</id>
            <id>attack.t1548</id>
        </mitre>
        <description>COM Hijack via Sdclt</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute</field>
    </rule>
    <rule id="113087" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_cve_2020_1048_new_printer_port.yml</info>
        <!--Sigma Rule Author: EagleEye Team, Florian Roth, NVISO-->
        <!--Description: Detects a new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048-->
        <!--Date: 2020/05/13-->
        <!--Status: test-->
        <!--ID: 7ec912f2-5175-4868-b811-ec13ad0f8567-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Suspicious New Printer Ports in Registry (CVE-2020-1048)</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Ports)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.dll|\.exe|\.bat|\.com|C:</field>
    </rule>
    <rule id="113088" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_defender_exclusions.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the Setting of Windows Defender Exclusions-->
        <!--Date: 2021/07/06-->
        <!--Status: test-->
        <!--ID: a982fc9c-6333-4ffb-a51d-addb04e8b529-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusions Added</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Microsoft\\Windows\ Defender\\Exclusions</field>
    </rule>
    <rule id="113089" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_dhcp_calloutdll.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris-->
        <!--Description: Detects the installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required)-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 9d3436ef-9476-4c43-acca-90ce06bdf33a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1112</id>
        </mitre>
        <description>DHCP Callout DLL Installation</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Services\\DHCPServer\\Parameters\\CalloutDlls|\\Services\\DHCPServer\\Parameters\\CalloutEnabled)$</field>
    </rule>
    <rule id="113090" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disabled_pua_protection_on_microsoft_defender.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects disabling Windows Defender PUA protection-->
        <!--Date: 2021/08/04-->
        <!--Status: experimental-->
        <!--ID: 8ffc5407-52e3-478f-9596-0a7371eafe13-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable PUA Protection on Windows Defender</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\PUAProtection</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113091" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_change_security_zones.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Hides the file extension through modification of the registry-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 45e112d0-7759-4c2a-aa36-9f8fb79d3393-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137</id>
        </mitre>
        <description>IE Change Domain Zone</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Internet\ Settings\\ZoneMap\\Domains\\</field>
    </rule>
    <rule id="113092" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_asep_reg_keys_modification_wow6432node_classes.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 18f2065c-d36c-464a-a748-bcf909acb2e3-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Wow6432Node Classes Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Wow6432Node\\Classes</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Folder\\ShellEx\\ExtShellFolderViews|\\Folder\\ShellEx\\DragDropHandlers|\\Folder\\ShellEx\\ColumnHandlers|\\Directory\\Shellex\\DragDropHandlers|\\Directory\\Shellex\\CopyHookHandlers|\\CLSID\\\{AC757296\-3522\-4E11\-9862\-C17BE5A1767E\}\\Instance|\\CLSID\\\{ABE3B9A4\-257D\-4B97\-BD1A\-294AF496222E\}\\Instance|\\CLSID\\\{7ED96837\-96F0\-4812\-B211\-F13C24117ED3\}\\Instance|\\CLSID\\\{083863F1\-70DE\-11d0\-BD40\-00A0C911CE86\}\\Instance|\\AllFileSystemObjects\\ShellEx\\DragDropHandlers|\\ShellEx\\PropertySheetHandlers|\\ShellEx\\ContextMenuHandlers</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113093" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113, AlertIQ-->
        <!--Description: Detects disabling Windows Defender threat protection-->
        <!--Date: 2020/07/28-->
        <!--Status: experimental-->
        <!--ID: a64e4198-c1c8-46a5-bc9c-324c86455fd4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\DisableAntiSpyware|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\DisableAntiVirus</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113094" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113, AlertIQ-->
        <!--Description: Detects disabling Windows Defender threat protection-->
        <!--Date: 2020/07/28-->
        <!--Status: experimental-->
        <!--ID: a64e4198-c1c8-46a5-bc9c-324c86455fd4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend|HKLM\\SOFTWARE\\Microsoft\\Windows\ Defender|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113095" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_rdp_registry_modification.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential malicious modification of the property value of fDenyTSConnections and UserAuthentication to enable remote desktop connections.-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: 41904ebe-d56c-4904-b9ad-7a77bdf154b3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Registry Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\CurrentControlSet\\Control\\Terminal\ Server\\WinStations\\RDP\-Tcp\\UserAuthentication|\\CurrentControlSet\\Control\\Terminal\ Server\\fDenyTSConnections)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113096" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_susp_run_key_img_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth, Markus Neis, Sander Wiebing-->
        <!--Description: Detects suspicious new RUN key element pointing to an executable in a suspicious folder-->
        <!--Date: 2018/08/25-->
        <!--Status: experimental-->
        <!--ID: 02ee49e2-e294-4d0f-9278-f5b3212fc588-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>New RUN Key Pointing to Suspicious Folder</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Run\\|\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\RunOnce\\</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Temp\\|C:\\\$Recycle\.bin\\|C:\\Temp\\|C:\\Users\\Public\\|C:\\Users\\Default\\|C:\\Users\\Desktop\\|\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:%Public%\\|wscript|cscript)</field>
    </rule>
    <rule id="113097" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_file_association_exefile.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects the abuse of the exefile handler in new file association. Used for bypass of security products.-->
        <!--Date: 2021/11/19-->
        <!--Status: experimental-->
        <!--ID: 44a22d59-b175-4f13-8c16-cbaef5b581ff-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>New File Association Using Exefile</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Classes\\\.</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)exefile</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
    </rule>
    <rule id="113098" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_susp_service_installed.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders. Both services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: f2485272-a156-4773-82d7-1d178bc4905b-->
        <mitre>
            <id>attack.t1562.001</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Service Installed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath|HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\procexp64\.exe|\\procexp\.exe|\\procmon64\.exe|\\procmon\.exe)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\\\\Windows\\\\system32\\Drivers\\PROCEXP152\.SYS</field>
    </rule>
    <rule id="113099" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_bypass_uac_using_eventviewer.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 674202d0-b22a-4af4-ae5f-2eda1f3da1af-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.010</id>
        </mitre>
        <description>Bypass UAC Using Event Viewer</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:_Classes\\mscfile\\shell\\open\\command\\\(Default\))$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%SystemRoot%\\system32\\mmc\.exe\ "%1"\ %</field>
    </rule>
    <rule id="113100" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_set_nopolicies_user.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects registry modifications that disable internal tools or functions in explorer (malware like Agent Tesla uses this technique)-->
        <!--Date: 2022/03/18-->
        <!--Status: experimental-->
        <!--ID: 1c3121ed-041b-4d97-a075-07f54f20fb4a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Registry Explorer Policy Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoLogOff|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoDesktop|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoRun|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoFind|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoControlPanel|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoFileMenu|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoClose|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoSetTaskbar|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoPropertiesMyDocuments|SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\NoTrayContextMenu)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113101" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_uac_bypass_eventvwr.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects UAC bypass method using Windows event viewer-->
        <!--Date: 2017/03/19-->
        <!--Status: experimental-->
        <!--ID: 7c81fec3-1c1d-43b0-996a-46753041b1b6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>UAC Bypass via Event Viewer</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKCU\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\mscfile\\shell\\open\\command)$</field>
    </rule>
    <rule id="113102" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_powershell_in_run_keys.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Adds a RUN key that contains a powershell keyword-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: 8d85cf08-bf97-4260-ba49-986a2a65129c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Powershell in Windows Run Keys</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run|\\Software\\Microsoft\\\\Windows\\\\CurrentVersion\\RunOnce</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:powershell|FromBase64String|\.DownloadFile\(|\.DownloadString\(|\ \-w\ hidden\ |\ \-nop\ |\ \-encodedcommand\ )</field>
    </rule>
    <rule id="113103" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_rdp_settings_hijack.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, David ANDRE-->
        <!--Description: Detects changes to RDP terminal service sensitive settings-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 171b67e1-74b4-460e-8d55-b331f3e32d67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Sensitive Settings Changed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\services\\TermService\\Parameters\\ServiceDll|\\Control\\Terminal\ Server\\fSingleSessionPerUser|\\Control\\Terminal\ Server\\fDenyTSConnections|\\Policies\\Microsoft\\Windows\ NT\\Terminal\ Services\\Shadow|\\Control\\Terminal\ Server\\WinStations\\RDP\-Tcp\\InitialProgram</field>
    </rule>
    <rule id="113104" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_susp_reg_persist_explorer_run.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community-->
        <!--Description: Detects a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder-->
        <!--Date: 2018/07/18-->
        <!--Status: test-->
        <!--ID: b7916c2a-fa2f-4795-9477-32b731f70f11-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Registry Persistence via Explorer Run Key</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\Explorer\\Run)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Temp\\|C:\\ProgramData\\|C:\\\$Recycle\.bin\\|C:\\Temp\\|C:\\Users\\Public\\|C:\\Users\\Default\\)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\AppData\\</field>
    </rule>
    <rule id="113105" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disabled_exploit_guard_net_protection_on_ms_defender.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects disabling Windows Defender Exploit Guard Network Protection-->
        <!--Date: 2021/08/04-->
        <!--Status: experimental-->
        <!--ID: bf9e1387-b040-4393-9851-1598f8ecfae9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Exploit Guard Network Protection on Windows Defender</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\ Security\ Center\\App\ and\ Browser\ protection\\DisallowExploitProtectionOverride</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(00000001\)</field>
    </rule>
    <rule id="113106" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_bypass_uac_using_delegateexecute.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Bypasses User Account Control using a fileless method-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 46dd5308-4572-4d12-aa43-8938f0184d4f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC Using DelegateExecute</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\open\\command\\DelegateExecute)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="113107" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_enabling_cor_profiler_env_variables.yml</info>
        <!--Sigma Rule Author: Jose Rodriguez (@Cyb3rPandaH), OTR (Open Threat Research)-->
        <!--Description: This rule detects cor_enable_profiling and cor_profiler environment variables being set and configured.-->
        <!--Date: 2020/09/10-->
        <!--Status: test-->
        <!--ID: ad89044a-8f49-4673-9a55-cbd88a1b374f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.012</id>
        </mitre>
        <description>Enabling COR Profiler Environment Variables</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\COR_ENABLE_PROFILING|\\COR_PROFILER)$</field>
    </rule>
    <rule id="113108" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_wdigest_enable_uselogoncredential.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects potential malicious modification of the property value of UseLogonCredential from HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest to enable clear-text credentials-->
        <!--Date: 2019/09/12-->
        <!--Status: experimental-->
        <!--ID: d6a9b252-c666-4de6-8806-5561bbbd3bdc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Wdigest Enable UseLogonCredential</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:WDigest\\UseLogonCredential)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113109" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_defender_realtime_protection_disabled.yml</info>
        <!--Sigma Rule Author: AlertIQ-->
        <!--Description: Detects disabling Windows Defender Real-Time Protection by modifying registry-->
        <!--Date: 2021/10/18-->
        <!--Status: experimental-->
        <!--ID: fd115e64-97c7-491f-951c-fc8da7e042fa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Real-Time Protection Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\Real\-Time\ Protection\\DisableBehaviorMonitoring|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\Real\-Time\ Protection\\DisableIOAVProtection|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\Real\-Time\ Protection\\DisableOnAccessProtection|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\Real\-Time\ Protection\\DisableRealtimeMonitoring|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\Real\-Time\ Protection\\DisableScanOnRealtimeEnable|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\SpyNet\\DisableBlockAtFirstSeen</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113110" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_defender_realtime_protection_disabled.yml</info>
        <!--Sigma Rule Author: AlertIQ-->
        <!--Description: Detects disabling Windows Defender Real-Time Protection by modifying registry-->
        <!--Date: 2021/10/18-->
        <!--Status: experimental-->
        <!--ID: fd115e64-97c7-491f-951c-fc8da7e042fa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Real-Time Protection Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\SpyNet\\SpynetReporting|HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\SpyNet\\SubmitSamplesConsent</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113111" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_etw_disabled.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: bf4fc428-dcc3-4bbd-99fe-2422aeee2544-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>COMPlus_ETWEnabled Registry Modification</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\Microsoft\\\.NETFramework\\ETWEnabled)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113112" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_outlook_registry_webview.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects the manipulation of persistent URLs which can be malicious-->
        <!--Date: 2021/06/09-->
        <!--Status: experimental-->
        <!--ID: ddd171b5-2cc6-4975-9e78-f0eccd08cc76-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Persistent Outlook Landing Pages</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Microsoft\\Office\\|\\Outlook\\WebView\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\URL)$</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Calendar\\|\\Inbox\\</field>
    </rule>
    <rule id="113113" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement. We can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml) In some SIEM you can catch those events also in HKLM\System\ControlSet001\Services or HKLM\System\ControlSet002\Services, however, this rule is based on a regular sysmon's events.-->
        <!--Date: 2021/06/29-->
        <!--Status: experimental-->
        <!--ID: 61a7697c-cb79-42a8-a2ff-5f0cdfae0130-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\System\\CurrentControlSet\\Services</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)ADMIN\$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="113114" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement. We can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml) In some SIEM you can catch those events also in HKLM\System\ControlSet001\Services or HKLM\System\ControlSet002\Services, however, this rule is based on a regular sysmon's events.-->
        <!--Date: 2021/06/29-->
        <!--Status: experimental-->
        <!--ID: 61a7697c-cb79-42a8-a2ff-5f0cdfae0130-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\System\\CurrentControlSet\\Services</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113115" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_new_application_appcompat.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 60936b49-fca0-4f32-993d-7415edcf9a5d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>New Application in AppCompat</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\AppCompatFlags\\Compatibility\ Assistant\\Store\\</field>
    </rule>
    <rule id="113116" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_telemetry_persistence.yml</info>
        <!--Sigma Rule Author: Lednyov Alexey, oscd.community-->
        <!--Description: Detects persistence method using windows telemetry-->
        <!--Date: 2020/10/16-->
        <!--Status: test-->
        <!--ID: 73a883d0-0348-4be4-a8d8-51031c2564f8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Registry Persistence Mechanism via Windows Telemetry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Command</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.exe</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\\system32\\CompatTelRunner\.exe|\\system32\\DeviceCensus\.exe</field>
    </rule>
    <rule id="113117" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disable_defender_firewall.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage-->
        <!--Date: 2022/01/09-->
        <!--Status: experimental-->
        <!--ID: 974515da-6cc5-4c95-ae65-f97f9150ec7f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Disable Microsoft Defender Firewall via Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\EnableFirewall)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113118" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disable_uac_registry.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Disable User Account Conrol (UAC) by changing its registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA from 1 to 0-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 48437c39-9e5f-47fb-af95-3d663c3f2919-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Disable UAC Using Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\System\\EnableLUA</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113119" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_wab_dllpath_reg_change.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: This rule detects that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: fc014922-5def-4da9-a0fc-28c973f41bfb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution DLL of Choice Using WAB.EXE</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Software\\Microsoft\\WAB\\DLLPath)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%CommonProgramFiles%\\System\\wab32\.dll</field>
    </rule>
    <rule id="113120" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_outlook_c2_registry_key.yml</info>
        <!--Sigma Rule Author: @ScoubiMtl-->
        <!--Description: Detects the modification of Outlook Security Setting to allow unprompted execution. Goes with win_outlook_c2_macro_creation.yml and is particularly interesting if both events occur near to each other.-->
        <!--Date: 2021/04/05-->
        <!--Status: experimental-->
        <!--ID: e3b50fa5-3c3f-444e-937b-0a99d33731cd-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Outlook C2 Registry Key</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKCU\\Software\\Microsoft\\Office\\16\.0\\Outlook\\Security\\Level</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)0x00000001</field>
    </rule>
    <rule id="113121" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_blackbyte_ransomware.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 83314318-052a-4c90-a1ad-660ece38d276-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Blackbyte Ransomware Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy|HKLM\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\Policies\\System\\EnableLinkedConnections|HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="113122" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_disable_administrative_share.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Administrative shares are hidden network shares created by Microsoft&#8217;s Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: c7dcacd0-cc59-4004-b0a4-1d6cdebe6f3e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.005</id>
        </mitre>
        <description>Disable Administrative Share Creation at Startup</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:AutoShareWks|AutoShareServer)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="113123" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_bypass_uac_using_silentcleanup_task.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: There is an auto-elevated task called SilentCleanup located in %windir%\system32\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC-->
        <!--Date: 2022/01/06-->
        <!--Status: experimental-->
        <!--ID: 724ea201-6514-4f38-9739-e5973c34f49a-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC Using SilentCleanup Task</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\Environment\\windir)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\&amp;REM</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
    </rule>
    <rule id="113124" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_winlogon_notify_key.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in.
Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: bbf59793-6efb-4fa1-95ca-a7d288e52c88-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.004</id>
        </mitre>
        <description>Winlogon Notify Key Logon Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\Notify\\logon)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
    </rule>
    <rule id="113125" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_asep_reg_keys_modification_winsock2.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: d6c2ce7e-afb5-4337-9ca4-4b5254ed0565-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>WinSock2 Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Protocol_Catalog9\\Catalog_Entries|\\NameSpace_Catalog5\\Catalog_Entries</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\MsiExec\.exe</field>
    </rule>
    <rule id="113126" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_mal_blue_mockingbird.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick)-->
        <!--Description: Attempts to detect system changes made by Blue Mockingbird-->
        <!--Date: 2020/05/14-->
        <!--Status: experimental-->
        <!--ID: 92b0b372-a939-44ed-a11b-5136cf680e27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Blue Mockingbird</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll)$</field>
    </rule>
    <rule id="113127" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_uac_bypass_winsat.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 6597be7b-ac61-4ac8-bef4-d3ec88174853-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Abusing Winsat Path Parsing - Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Root\\InventoryApplicationFile\\winsat\.exe\|</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\LowerCaseLongPath)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:c:\\users\\)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\\appdata\\local\\temp\\system32\\winsat\.exe)$</field>
    </rule>
    <rule id="113128" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_globalflags_persistence.yml</info>
        <!--Sigma Rule Author: Karneades, Jonhnathan Ribeiro-->
        <!--Description: Detects persistence registry keys-->
        <!--Date: 2018/04/11-->
        <!--Status: test-->
        <!--ID: 36803969-5421-41ec-b92f-8500f79c23b0-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1546.012</id>
            <id>car.2013-01-002</id>
        </mitre>
        <description>GlobalFlags Registry Persistence Mechanisms</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Image\ File\ Execution\ Options\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\GlobalFlag</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SilentProcessExit\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\ReportingMode</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SilentProcessExit\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\MonitorProcess</field>
    </rule>
    <rule id="113129" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_shim_databases_persistence.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: dfb5b4e8-91d0-4291-b40a-e3b0d3942c45-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.011</id>
        </mitre>
        <description>Registry Key Creation or Modification for Shim DataBase</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\\|HKLM\\SOFTWARE\\Microsoft\\Windows\ NT\\CurrentVersion\\AppCompatFlags\\Custom\\)</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="113130" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_silentprocessexit.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects changes to the Registry in which a monitor program gets registered to monitor the exit of another process-->
        <!--Date: 2021/02/26-->
        <!--Status: experimental-->
        <!--ID: c81fe886-cac0-4913-a511-2822d72ff505-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.012</id>
        </mitre>
        <description>SilentProcessExit Monitor Registrytion</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Microsoft\\Windows\ NT\\CurrentVersion\\SilentProcessExit</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)MonitorProcess</field>
    </rule>
    <rule id="113131" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_set/registry_set_powershell_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects that a powershell code is written to the registry as a service.-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 4a5f5a5e-ac01-474b-9b4e-d61298c9df1d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell as a Service in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Services\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\ImagePath)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="113132" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_uac_bypass_wow64_logger.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 4f6c43e2-f989-4ea5-bcd8-843b49a0317c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using WOW64 Logger DLL Hijack</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i):\\\\Windows\\\\SysWOW64\\</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1fffff</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:UNKNOWN\(0000000000000000\)\|UNKNOWN\(0000000000000000\)\|)</field>
    </rule>
    <rule id="113133" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_mimikatz_trough_winrm.yml</info>
        <!--Sigma Rule Author: Patryk Prauze - ING Tech-->
        <!--Description: Detects usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.-->
        <!--Date: 2019/05/20-->
        <!--Status: stable-->
        <!--ID: aa35a627-33fb-4d04-a165-d33b4afca3e8-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Mimikatz through Windows Remote Management</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\wsmprovhost\.exe</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x80000000</field>
    </rule>
    <rule id="113134" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_memdump_indicators.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a possible process memory dump based on a keyword in the file name of the accessing process-->
        <!--Date: 2022/02/10-->
        <!--Status: experimental-->
        <!--ID: 9bd012ee-0dff-44d7-84a0-aa698cfd87a3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>LSASS Memory Access by Tool Named Dump</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)dump</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:10|30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2|FF)$</field>
    </rule>
    <rule id="113135" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_invoke_phantom.yml</info>
        <!--Sigma Rule Author: Tim Burrell-->
        <!--Description: Detects suspect access to svchost process memory such as that used by Invoke-Phantom to kill the winRM windows event logging service.-->
        <!--Date: 2020/01/02-->
        <!--Status: experimental-->
        <!--ID: 166e9c50-8cd9-44af-815d-d1f0c0e90dde-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Suspect Svchost Memory Asccess</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\\\Windows\\\\System32\\svchost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1F3FFF</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
    </rule>
    <rule id="113136" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_memdump.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, Michael Haag-->
        <!--Description: Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 5ef9853e-4d0e-4a70-846f-a9ca37d876da-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>LSASS Memory Dump</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1038|0x1438|0x143a</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)dbghelp\.dll|dbgcore\.dll|ntdll\.dll</field>
    </rule>
    <rule id="113137" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lazagne_cred_dump_lsass_access.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Jonhnathan Ribeiro-->
        <!--Description: Detects LSASS process access by LaZagne for credential dumping.-->
        <!--Date: 2020/09/09-->
        <!--Status: stable-->
        <!--ID: 4b9a8556-99c4-470b-a40c-9c8d02c77ed0-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0349</id>
        </mitre>
        <description>Credential Dumping by LaZagne</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)C:\\\\\\Windows\\\\\\SYSTEM32\\\\ntdll\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)\|C:\\\\\\Windows\\\\\\System32\\\\KERNELBASE\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)_ctypes\.pyd\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)python27\.dll\+</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
    </rule>
    <rule id="113138" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_direct_syscall_ntopenprocess.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: 3f3f3506-1895-401b-9cc3-e86b16e630d0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Direct Syscall of NtOpenProcess</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:UNKNOWN)</field>
    </rule>
    <rule id="113139" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_memdump_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference-->
        <!--Date: 2022/02/10-->
        <!--Status: experimental-->
        <!--ID: 4be8b654-0c01-4c9d-a10c-6b28467fc651-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>LSASS Access from White-Listed Processes</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\TrolleyExpress\.exe|\\ProcessDump\.exe|\\dump64\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:10|30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2|FF)$</field>
    </rule>
    <rule id="113140" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_cobaltstrike_bof_injection_pattern.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects a typical pattern of a CobaltStrike BOF which inject into other processes-->
        <!--Date: 2021/08/04-->
        <!--Status: experimental-->
        <!--ID: 09706624-b7f6-455d-9d02-adee024cee1d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>CobaltStrike BOF Injection Pattern</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^C:\\\\\\Windows\\\\\\SYSTEM32\\\\ntdll\\.dll\+[a-z0-9]{4,6}\|C:\\\\\\Windows\\\\\\System32\\\\KERNELBASE\\.dll\+[a-z0-9]{4,6}\|UNKNOWN\([A-Z0-9]{16}\)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1028|0x1fffff</field>
    </rule>
    <rule id="113141" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_dump_comsvcs_dll.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.-->
        <!--Date: 2020/10/20-->
        <!--Status: experimental-->
        <!--ID: a49fa4d5-11db-418c-8473-1e014a8dd462-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Lsass Memory Dump via Comsvcs DLL</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\rundll32\.exe</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)comsvcs\.dll</field>
    </rule>
    <rule id="113142" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_cmstp_execution_by_access.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman-->
        <!--Description: Detects various indicators of Microsoft Connection Manager Profile Installer execution-->
        <!--Date: 2018/07/16-->
        <!--Status: stable-->
        <!--ID: 3b4b232a-af90-427c-a22f-30b0c0837b95-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.003</id>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.g0069</id>
            <id>attack.g0080</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP Execution Process Access</description>
        <options>no_full_log</options>
        <group>windows,process_access,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)cmlua\.dll</field>
    </rule>
    <rule id="113143" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_littlecorporal_generated_maldoc.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the process injection of a LittleCorporal generated Maldoc.-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 7bdde3bf-2a42-4c39-aa31-a92b3e17afac-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.t1055.003</id>
        </mitre>
        <description>LittleCorporal Generated Maldoc Injection</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:winword\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i):\\\\Windows\\\\Microsoft\.NET\\Framework64\\v2\.</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
    </rule>
    <!-- <rule id="113144" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/process_access_win_shellcode_inject_msf_empire.yml</info>
        Sigma Rule Author: Bhabesh Raj
        Description: Detects shellcode injection by Metasploit's migrate and Empire's psinject
        Date: 2022/03/11
        Status: experimental
        ID: 250ae82f-736e-4844-a68b-0b5e8cc887da
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Shellcode Injection</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x147a|0x1f3fff</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
    </rule> -->
    <rule id="113145" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_pypykatz_cred_dump_lsass_access.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects LSASS process access by pypykatz for credential dumping.-->
        <!--Date: 2021/08/03-->
        <!--Status: experimental-->
        <!--ID: 7186e989-4ed7-4f4e-a656-4674b9e3e48b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Credential Dumping by Pypykatz</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\SYSTEM32\\ntdll\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\KERNELBASE\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)libffi\-7\.dll</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)_ctypes\.pyd\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)python3.+\.dll\+</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
    </rule>
    <rule id="113146" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_load_undocumented_autoelevated_com_interface.yml</info>
        <!--Sigma Rule Author: oscd.community, Dmitry Uchakin-->
        <!--Description: COM interface (EditionUpgradeManager) that is not used by standard executables.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: fb3722e4-1a06-46b6-b772-253e2e7db933-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Load Undocumented Autoelevated COM Interface</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)editionupgrademanagerobj\.dll</field>
    </rule>
    <rule id="113147" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_svchost_cred_dump.yml</info>
        <!--Sigma Rule Author: Florent Labouyrie-->
        <!--Description: Detects when a process, such as mimikatz, accesses the memory of svchost to dump credentials-->
        <!--Date: 2021/04/30-->
        <!--Status: experimental-->
        <!--ID: 174afcfa-6e40-4ae9-af64-496546389294-->
        <mitre>
            <id>attack.t1548</id>
        </mitre>
        <description>SVCHOST Credential Dump</description>
        <options>no_full_log</options>
        <group>windows,process_access,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x143a</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\services\.exe|\\msiexec\.exe)$</field>
    </rule>
    <rule id="113148" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_lobas_appinstaller.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: AppInstaller.exe is spawned by the default handler for the URI, it attempts to load/install a package from the URL-->
        <!--Date: 2021/11/24-->
        <!--Status: experimental-->
        <!--ID: 7cff77e1-9663-46a3-8260-17f2e1aa9d0a-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>AppInstaller Attempts From URL by DNS</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\Program\ Files\\WindowsApps\\Microsoft\.DesktopAppInstaller_)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\AppInstaller\.exe)$</field>
    </rule>
    <rule id="113149" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_hybridconnectionmgr_servicebus.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects Azure Hybrid Connection Manager services querying the Azure service bus service-->
        <!--Date: 2021/04/12-->
        <!--Status: experimental-->
        <!--ID: 7bd3902d-8b8b-4dd4-838a-c6862d40150d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>DNS HybridConnectionManager Service Bus</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)servicebus\.windows\.net</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
    </rule>
    <rule id="113150" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_susp_ipify.yml</info>
        <!--Sigma Rule Author: Brandon George (blog post), Thomas Patzke (rule)-->
        <!--Description: Detects DNS queries for ip lookup services such as api.ipify.org not originating from a browser process.-->
        <!--Date: 2021/07/08-->
        <!--Status: experimental-->
        <!--ID: ec82e2a5-81ea-4211-a1f8-37a0286df2c2-->
        <mitre>
            <id>attack.reconnaissance</id>
            <id>attack.t1590</id>
        </mitre>
        <description>Suspicious DNS Query for IP Lookup Service APIs</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)canireachthe\.net|ipv4\.icanhazip\.com|ip\.anysrc\.net|edns\.ip\-api\.com|wtfismyip\.com|checkip\.dyndns\.org|api\.2ip\.ua|icanhazip\.com|api\.ipify\.org|ip\-api\.com|checkip\.amazonaws\.com|ipecho\.net|ipinfo\.io|ipv4bot\.whatismyipaddress\.com|freegeoip\.app</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\chrome\.exe|\\iexplore\.exe|\\firefox\.exe|\\brave\.exe|\\opera\.exe|\\msedge\.exe|\\vivaldi\.exe)$</field>
    </rule>
    <rule id="113151" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_regsvr32_network_activity.yml</info>
        <!--Sigma Rule Author: Dmitriy Lifanov, oscd.community-->
        <!--Description: Detects network connections and DNS queries initiated by Regsvr32.exe-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 36e037c4-c228-4866-b6a3-48eb292b9955-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Regsvr32 Network Activity</description>
        <options>no_full_log</options>
        <group>dns_query,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regsvr32\.exe)$</field>
    </rule>
    <rule id="113152" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_mega_nz.yml</info>
        <!--Sigma Rule Author: Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects DNS queries for subdomains used for upload to MEGA.io-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 613c03ba-0779-4a53-8a1f-47f914a4ded3-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query for MEGA.io Upload Domain</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)userstorage\.mega\.co\.nz</field>
    </rule>
    <rule id="113153" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_gotoopener.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: 7c4cf8e0-1362-48b2-a512-b606d2065d7d-->
        <description>Query to GoToAssist Remote Access Software Domain</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.getgo\.com)$</field>
    </rule>
    <rule id="113154" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_logmein.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: ed785237-70fa-46f3-83b6-d264d1dc6eb4-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Query to LogMeIn Remote Access Software Domain</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.logmein\.com)$</field>
    </rule>
    <rule id="113155" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_tor_onion.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects DNS resolution of an .onion address related to Tor routing networks-->
        <!--Date: 2022/02/20-->
        <!--Status: experimental-->
        <!--ID: b55ca2a3-7cff-4dda-8bdd-c7bfa63bf544-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.003</id>
        </mitre>
        <description>Query Tor Onion Address</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.onion</field>
    </rule>
    <rule id="113156" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_susp_teamviewer.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)-->
        <!--Date: 2022/01/30-->
        <!--Status: experimental-->
        <!--ID: 778ba9a8-45e4-4b80-8e3e-34a419f0b85e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Suspicious TeamViewer Domain Access</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)taf\.teamviewer\.com|udp\.ping\.teamviewer\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)TeamViewer</field>
    </rule>
    <rule id="113157" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), David ANDRE (additional keywords)-->
        <!--Description: This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)-->
        <!--Date: 2017/01/10-->
        <!--Status: experimental-->
        <!--ID: 06d71506-7beb-4f22-8888-e2e5e2ca7fd8-->
        <mitre>
            <id>attack.s0002</id>
            <id>attack.lateral_movement</id>
            <id>attack.credential_access</id>
            <id>car.2013-07-001</id>
            <id>car.2019-04-004</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Mimikatz Use</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)dpapi::masterkey|eo\.oe\.kiwi|event::clear|event::drop|gentilkiwi\.com|kerberos::golden|kerberos::ptc|kerberos::ptt|kerberos::tgt|Kiwi\ Legit\ Printer|lsadump::|mimidrv\.sys|\\mimilib\.dll|misc::printnightmare|misc::shadowcopies|misc::skeleton|privilege::backup|privilege::debug|privilege::driver|sekurlsa::</field>
        <field name="win.system.eventID" negate="yes" type="pcre2">(?i)15</field>
    </rule>
    <rule id="113158" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_threat.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;-->
        <!--Description: Detects all actions taken by Windows Defender malware detection engines-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: 57b649ef-ff42-4fb0-8bf6-62da243a1708-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Defender Threat Detected</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1006|1116|1015|1117</field>
    </rule>
    <rule id="113159" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_tamper_protection_trigger.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects block of attempt to disable real time protection of Microsoft Defender by tamper protection-->
        <!--Date: 2021/07/05-->
        <!--Status: stable-->
        <!--ID: 49e5bc24-8b86-49f1-b743-535f332c2856-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Microsoft Defender Tamper Protection Trigger</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5013</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\Windows\ Defender\\DisableAntiSpyware\ =\ 0x1\(\)|\\Real\-Time\ Protection\\DisableRealtimeMonitoring\ =\ \(Current\))</field>
    </rule>
    <rule id="113160" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_psexec_wmi_asr.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects blocking of process creations originating from PSExec and WMI commands-->
        <!--Date: 2020/07/14-->
        <!--Status: experimental-->
        <!--ID: 97b9ce1e-c5ab-11ea-87d0-0242ac130003-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1047</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PSExec and WMI Process Creations Block</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1121</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\wmiprvse\.exe|\\psexesvc\.exe)$</field>
    </rule>
    <rule id="113161" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_history_delete.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: Windows Defender logs when the history of detected infections is deleted. Log file will contain the message "Windows Defender Antivirus has removed history of malware and other potentially unwanted software".-->
        <!--Date: 2020/08/13-->
        <!--Status: experimental-->
        <!--ID: 2afe6582-e149-11ea-87d0-0242ac130003-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
        </mitre>
        <description>Windows Defender Malware Detection History Deletion</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1013</field>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)4</field>
    </rule>
    <rule id="113162" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113-->
        <!--Description: Detects disabling Windows Defender threat protection-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: fe34868f-6e0e-4882-81f6-c43aa8f15b62-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5001|5010|5012|5101</field>
    </rule>
    <rule id="113163" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_amsi_trigger.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects triggering of AMSI by Windows Defender.-->
        <!--Date: 2020/09/14-->
        <!--Status: stable-->
        <!--ID: ea9bf0fa-edec-4fb8-8b78-b119f2528186-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Defender AMSI Trigger Detected</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1116</field>
        <field name="full_log" negate="no" type="pcre2">(?i)AMSI</field>
    </rule>
    <rule id="113164" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_exclusions.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the Setting of Windows Defender Exclusions-->
        <!--Date: 2021/07/06-->
        <!--Status: stable-->
        <!--ID: 1321dc4e-a1fe-481d-a016-52c45f0c8b4f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusions Added</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5007</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)\\Microsoft\\Windows\ Defender\\Exclusions</field>
    </rule>
    <rule id="113165" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/servicebus/win_hybridconnectionmgr_svc_running.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Rule to detect the Hybrid Connection Manager service running on an endpoint.-->
        <!--Date: 2021/04/12-->
        <!--Status: experimental-->
        <!--ID: b55d23e5-6821-44ff-8a6e-67218891e49f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>HybridConnectionManager Service Running</description>
        <options>no_full_log</options>
        <group>windows,microsoft-servicebus-client,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)40300|40301|40302</field>
        <field name="full_log" negate="no" type="pcre2">(?i)HybridConnection|sb://|servicebus\.windows\.net|HybridConnectionManage</field>
    </rule>
    <rule id="113166" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/driverframeworks/win_usb_device_plugged.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects plugged USB devices-->
        <!--Date: 2017/11/09-->
        <!--Status: test-->
        <!--ID: 1a4bd6e3-4c6e-405d-a9a3-53a116e341d4-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1200</id>
        </mitre>
        <description>USB Device Plugged</description>
        <options>no_full_log</options>
        <group>windows,driver-framework,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2003|2100|2102</field>
    </rule>
    <rule id="113167" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_audit_cve.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects events generated by Windows to indicate the exploitation of a known vulnerability (e.g. CVE-2020-0601)-->
        <!--Date: 2020/01/15-->
        <!--Status: experimental-->
        <!--ID: 48d91a3a-2363-43ba-a456-ca71ac3da5c2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1211</id>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>attack.impact</id>
            <id>attack.t1499.004</id>
        </mitre>
        <description>Audit CVE Event</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Audit\-CVE</field>
    </rule>
    <rule id="113168" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_builtin_remove_application.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An application have been remove check if it is a critical-->
        <!--Date: 2022/01/28-->
        <!--Status: experimental-->
        <!--ID: 570ae5ec-33dc-427c-b815-db86228ad43e-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>An Application Is Uninstall</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)11724|1034</field>
    </rule>
    <rule id="113169" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_vul_cve_2020_0688.yml</info>
        <!--Sigma Rule Author: Florian Roth, wagga-->
        <!--Description: Detects the exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688-->
        <!--Date: 2020/02/29-->
        <!--Status: experimental-->
        <!--ID: d6266bf5-935e-4661-b477-78772735a7cb-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
        </mitre>
        <description>CVE-2020-0688 Exploitation via Eventlog</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4</field>
        <field name="full_log" negate="no" type="pcre2">(?i)MSExchange\ Control\ Panel</field>
        <field name="win.system.level" negate="no" type="pcre2">(?i)Error</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\&amp;__VIEWSTATE=</field>
    </rule>
    <rule id="113170" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_susp_backup_delete.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Tom U. @c_APT_ure (collection)-->
        <!--Description: Detects backup catalog deletions-->
        <!--Date: 2017/05/12-->
        <!--Status: experimental-->
        <!--ID: 9703792d-fd9a-456d-a672-ff92efe4806a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Backup Catalog Deleted</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)524</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Backup</field>
    </rule>
    <rule id="113171" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_vul_cve_2021_41379.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects PoC tool used to exploit LPE vulnerability CVE-2021-41379-->
        <!--Date: 2021/11/22-->
        <!--Status: experimental-->
        <!--ID: 7dbb86de-a0cc-494c-8aa8-b2996c9ef3c8-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
        </mitre>
        <description>LPE InstallerFileTakeOver PoC CVE-2021-41379</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1033</field>
        <field name="full_log" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="full_log" negate="no" type="pcre2">(?i)test\ pkg</field>
    </rule>
    <rule id="113172" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/win_software_atera_rmm_agent_install.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators-->
        <!--Date: 2021/09/01-->
        <!--Status: experimental-->
        <!--ID: 87261fb2-69d0-42fe-b9de-88c6b5f65a43-->
        <mitre>
            <id>attack.t1219</id>
        </mitre>
        <description>Atera Agent Installation</description>
        <options>no_full_log</options>
        <group>application,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1033</field>
        <field name="full_log" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.message" negate="no" type="pcre2">(?i)AteraAgent</field>
    </rule>
    <rule id="113173" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/applocker/win_applocker_file_was_not_allowed_to_run.yml</info>
        <!--Sigma Rule Author: Pushkarev Dmitry-->
        <!--Description: Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.-->
        <!--Date: 2020/06/28-->
        <!--Status: test-->
        <!--ID: 401e5d00-b944-11ea-8f9a-00163ecd60ae-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.t1059.001</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.006</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>File Was Not Allowed To Run</description>
        <options>no_full_log</options>
        <group>windows,applocker,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8004|8007</field>
    </rule>
    <rule id="113174" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_cve_2021_42321.yml</info>
        <!--Sigma Rule Author: Florian Roth, @testanull-->
        <!--Description: Detects log entries that appear in exploitation attempts against MS Exchange RCE CVE-2021-42321-->
        <!--Date: 2021/11/18-->
        <!--Status: experimental-->
        <!--ID: c92f1896-d1d2-43c3-92d5-7a5b35c217bb-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
        </mitre>
        <description>Possible Exploitation of Exchange RCE CVE-2021-42321</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6|8</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Cmdlet\ failed\.\ Cmdlet\ Get\-App,\ |Task\ Get\-App\ throwing\ unhandled\ exception:\ System\.InvalidCastException:</field>
    </rule>
    <rule id="113175" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_certificate_generation.yml</info>
        <!--Sigma Rule Author: Max Altgelt-->
        <!--Description: Detects a write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: b7bc7038-638b-4ffd-880c-292c692209ef-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Certificate Request Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)New\-ExchangeCertificate</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ \-GenerateRequest</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ \-BinaryEncoded</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ \-RequestFile</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\\\\\\\localhost\\\\C\$|\\\\\\\\127\.0\.0\.1\\\\C\$|C:\\\\inetpub|\.aspx</field>
    </rule>
    <rule id="113176" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_remove_mailbox_export.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit-->
        <!--Date: 2021/08/27-->
        <!--Status: experimental-->
        <!--ID: 09570ae5-889e-43ea-aac0-0e1221fb3d95-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>Remove Exported Mailbox from Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Remove\-MailboxExportRequest</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-Identity\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ \-Confirm\ "False"</field>
    </rule>
    <rule id="113177" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_set_oabvirtualdirectory_externalurl.yml</info>
        <!--Sigma Rule Author: Jose Rodriguez @Cyb3rPandaH-->
        <!--Description: Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log-->
        <!--Date: 2021/03/15-->
        <!--Status: experimental-->
        <!--ID: 9db37458-4df2-46a5-95ab-307e7f29e675-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Exchange Set OabVirtualDirectory ExternalUrl Property</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Set\-OabVirtualDirectory</field>
        <field name="full_log" negate="no" type="pcre2">(?i)ExternalUrl</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Page_Load</field>
        <field name="full_log" negate="no" type="pcre2">(?i)script</field>
    </rule>
    <rule id="113178" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_transportagent.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects the Installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: experimental-->
        <!--ID: 4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>MSExchange Transport Agent Installation</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="113179" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxylogon_oabvirtualdir.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 550d3350-bb8a-4ff3-9533-2ba533f4a1c0-->
        <mitre>
            <id>attack.t1587.001</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>ProxyLogon MSExchange OabVirtualDirectory</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)OabVirtualDirectory</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-ExternalUrl\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)eval\(request|http://f/&lt;script|"unsafe"\};|function\ Page_Load\(\)</field>
    </rule>
    <rule id="113180" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_mailbox_export.yml</info>
        <!--Sigma Rule Author: Florian Roth, Rich Warren, Christian Burkard-->
        <!--Description: Detects a successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 516376b4-05cd-4122-bae0-ad7641c38d48-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Mailbox Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)New\-MailboxExportRequest</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-Mailbox\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-FilePath\ "\\\\\\\\localhost\\\\C\$|\-FilePath\ "\\\\\\\\127\.0\.0\.1\\\\C\$|\.aspx</field>
    </rule>
    <rule id="113181" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_mailbox_export.yml</info>
        <!--Sigma Rule Author: Florian Roth, Rich Warren, Christian Burkard-->
        <!--Description: Detects a successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 516376b4-05cd-4122-bae0-ad7641c38d48-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Mailbox Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)New\-ManagementRoleAssignment</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ \-Role\ "Mailbox\ Import\ Export"</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-User\ )</field>
    </rule>
    <rule id="113182" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_transportagent_failed.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects a failed installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: experimental-->
        <!--ID: c7d16cae-aaf3-42e5-9c1c-fb8553faa6fa-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>Failed MSExchange Transport Agent Installation</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="113184" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_failed.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The Windows Firewall service failed to load Group Policy.-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 7ec15688-fd24-4177-ba43-1a950537ee39-->
        <description>Failed to Load Policy in Windows Firewall with Advanced Security</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2009</field>
    </rule>
    <rule id="113185" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_setting_change.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Setting have been change in Windows Firewall-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 00bb5bd5-1379-4fcf-a965-a5b6f7478064-->
        <description>Setting Change in Windows Firewall with Advanced Security</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2002|2003|2008|2010</field>
    </rule>
    <rule id="113186" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_delete_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: DA rule has been deleted in the Windows Firewall exception list.-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: c187c075-bb3e-4c62-b4fa-beae0ffc211f-->
        <description>Deteled Rule in Windows Firewall with Advanced Security</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2006|2033</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\svchost\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\Program\ Files\\|C:\\Program\ Files\ \(x86\)\\)</field>
    </rule>
    <rule id="113187" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_reset.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Windows Firewall has been reset to its default configuration.-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 04b60639-39c0-412a-9fbe-e82499c881a3-->
        <description>Reset to Default Configuration Windows Firewall with Advanced Security</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2032</field>
    </rule>
    <rule id="113188" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_apt_stonedrill.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method detects a service install of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky-->
        <!--Date: 2017/03/07-->
        <!--Status: test-->
        <!--ID: 9e987c6c-4c1e-40d8-bd85-dd26fba8fdd6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0064</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>StoneDrill Service Install</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)NtsSrv</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)(?:\ LocalService)$</field>
    </rule>
    <rule id="113189" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_service_hacktools.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2022/03/21-->
        <!--Status: experimental-->
        <!--ID: d26ce60c-2151-403c-9a42-49420d87b5e4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>Hacktool Service Registration or Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045|7036</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)WCESERVICE|WCE\ SERVICE|winexesvc|DumpSvc|pwdump|gsecdump|cachedump</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)bypass</field>
    </rule>
    <rule id="113190" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_ntfs_vuln_exploit.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This the exploitation of a NTFS vulnerability as reported without many details via Twitter-->
        <!--Date: 2021/01/11-->
        <!--Status: experimental-->
        <!--ID: f14719ce-d3ab-4e25-9ce6-2899092260b0-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1499.001</id>
        </mitre>
        <description>NTFS Vulnerability Exploitation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Ntfs</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)55</field>
        <field name="full_log" negate="no" type="pcre2">(?i)File\ System\ Driver</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)contains\ a\ corrupted\ file\ record</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)The\ name\ of\ the\ file\ is\ "\\"</field>
    </rule>
    <rule id="113191" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_apt_carbonpaper_turla.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method detects a service install of malicious services mentioned in Carbon Paper - Turla report by ESET-->
        <!--Date: 2017/03/31-->
        <!--Status: test-->
        <!--ID: 1df8b3da-b0ac-4d8a-b7c7-6cb7c24160e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0010</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Turla Service Install</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)srservice|ipvpn|hkmsvc</field>
    </rule>
    <rule id="113192" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_var_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\\"\s+?\-f.*&amp;&amp;.*cmd.*\/c</field>
    </rule>
    <rule id="113193" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_stdin_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 487c7524-f892-4054-b263-8a0ace63fc25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\${?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="113194" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_vul_cve_2021_42278_or_cve_2021_42287.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The attacker creates a computer object using those permissions with a password known to her.
After that she clears the attribute ServicePrincipalName on the computer object.
Because she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.
-->
        <!--Date: 2021/12/15-->
        <!--Status: experimental-->
        <!--ID: 44bbff3e-4ca3-452d-a49a-6efa4cafa06f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Exploit SamAccountName Spoofing with Kerberos</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Kerberos\-Key\-Distribution\-Center</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)35|36|37|38</field>
    </rule>
    <rule id="113195" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_vul_cve_2021_42278_or_cve_2021_42287.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The attacker creates a computer object using those permissions with a password known to her.
After that she clears the attribute ServicePrincipalName on the computer object.
Because she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.
-->
        <!--Date: 2021/12/15-->
        <!--Status: experimental-->
        <!--ID: 44bbff3e-4ca3-452d-a49a-6efa4cafa06f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Exploit SamAccountName Spoofing with Kerberos</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Directory\-Services\-SAM</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16990|16991</field>
    </rule>
    <rule id="113196" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_possible_zerologon_exploitation_using_wellknown_tools.yml</info>
        <!--Sigma Rule Author: Demyan Sokolin @_drd0c, Teymur Kheirkhabarov @HeirhabarovT, oscd.community-->
        <!--Description: This rule is designed to detect attempts to exploit Zerologon (CVE-2020-1472) vulnerability using mimikatz zerologon module or other exploits from machine with "kali" hostname.-->
        <!--Date: 2020/10/13-->
        <!--Status: stable-->
        <!--ID: 18f37338-b9bd-4117-a039-280c81f7a596-->
        <mitre>
            <id>attack.t1210</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Zerologon Exploitation Using Well-known Tools</description>
        <options>no_full_log</options>
        <group>system,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5805|5723</field>
        <field name="full_log" negate="no" type="pcre2">(?i)kali|mimikatz</field>
    </rule>
    <rule id="113197" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_sam_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers-->
        <!--Date: 2018/01/27-->
        <!--Status: test-->
        <!--ID: 839dd1e8-eda8-4834-8145-01beeee33acd-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>SAM Dump to AppData</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\SAM\-</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="113198" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_dhcp_config.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris-->
        <!--Description: This rule detects a DHCP server in which a specified Callout DLL (in registry) was loaded-->
        <!--Date: 2017/05/15-->
        <!--Status: experimental-->
        <!--ID: 13fc89a9-971e-4ca6-b9dc-aa53a445bf40-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DHCP Server Loaded the CallOut DLL</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1033</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-DHCP\-Server</field>
    </rule>
    <rule id="113199" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_use_clip_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 63e3365d-4824-42d8-8b82-e56810fefa0c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).*</field>
    </rule>
    <rule id="113200" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_compress_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: 175997c5-803c-4b08-8bb0-70b099f47595-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)readtoend</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i):system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
    </rule>
    <rule id="113201" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_tool_psexec.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: 42c575ea-e41e-41f1-b248-8093c3e82a28-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Tool Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)PSEXESVC</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)(?:\\PSEXESVC\.exe)$</field>
    </rule>
    <rule id="113202" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_tool_psexec.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: 42c575ea-e41e-41f1-b248-8093c3e82a28-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Tool Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7036</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)PSEXESVC</field>
    </rule>
    <rule id="113203" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_apt_turla_service_png.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method detects malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018-->
        <!--Date: 2018/11/23-->
        <!--Status: test-->
        <!--ID: 1228f8e2-7e79-4dea-b0ad-c91f1d5016c1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0010</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Turla PNG Dropper Service</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)WerFaultSvc</field>
    </rule>
    <rule id="113204" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_vul_cve_2020_1472.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472.-->
        <!--Date: 2020/09/15-->
        <!--Status: experimental-->
        <!--ID: a0cb7110-edf0-47a4-9177-541a4083128a-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Vulnerable Netlogon Secure Channel Connection Allowed</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)NetLogon</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5829</field>
    </rule>
    <rule id="113205" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_clip_services.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: f7385ee2-0e0c-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)clip</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)clipboard\]::</field>
    </rule>
    <rule id="113206" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: a2e5019d-a658-4c6a-92bf-7197b54e2cae-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Installed as Services</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="113207" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_hack_smbexec.yml</info>
        <!--Sigma Rule Author: Omer Faruk Celik-->
        <!--Description: Detects the use of smbexec.py tool by detecting a specific service installation-->
        <!--Date: 2018/03/20-->
        <!--Status: test-->
        <!--ID: 52a85084-6989-40c3-8f32-091e12e13f09-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.execution</id>
            <id>attack.t1021.002</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>smbexec.py Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)BTOBTO</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)(?:\\execute\.bat)$</field>
    </rule>
    <rule id="113208" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth, Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)ADMIN\$</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="113209" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth, Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113210" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth, Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell\ \-nop\ \-w\ hidden\ \-encodedcommand</field>
    </rule>
    <rule id="113211" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth, Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">SUVYIChOZXctT2JqZWN0IE5ldC5XZWJjbGllbnQpLkRvd25sb2FkU3RyaW5nKCdodHRwOi8vMTI3LjAuMC4xOg|lFWCAoTmV3LU9iamVjdCBOZXQuV2ViY2xpZW50KS5Eb3dubG9hZFN0cmluZygnaHR0cDovLzEyNy4wLjAuMTo|JRVggKE5ldy1PYmplY3QgTmV0LldlYmNsaWVudCkuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xMjcuMC4wLjE6</field>
    </rule>
    <rule id="113212" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_system_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113-->
        <!--Description: Detects disabling Windows Defender threat protection-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: 6c0a7755-6d31-44fa-80e1-133e57752680-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7036</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Windows\ Defender\ Antivirus\ Service|Service\ antivirus\ Microsoft\ Defender</field>
        <field name="full_log" negate="no" type="pcre2">(?i)stopped</field>
    </rule>
    <rule id="113213" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth, Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: 4976aa50-8f41-45c6-8b15-ab3fc10e79ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)fgexec|dumpsvc|cachedump|mimidrv|gsecdump|servpw|pwdump</field>
    </rule>
    <rule id="113214" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_use_mshta_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="113215" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_use_rundll32_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 641a4bfb-c017-44f7-800c-2aee0184ce9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="113216" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_system_update_error.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Windows Update get some error Check if need a 0-days KB-->
        <!--Date: 2021/12/04-->
        <!--Status: experimental-->
        <!--ID: 13cfeb75-9e33-4d04-b0f7-ab8faaa95a59-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.resource_development</id>
            <id>attack.t1584</id>
        </mitre>
        <description>Windows Update Error</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-WindowsUpdateClient</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16|20|24|213|217</field>
    </rule>
    <rule id="113217" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_obfuscated_iex_services.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014-->
        <!--Date: 2019/11/08-->
        <!--Status: experimental-->
        <!--ID: 51aa9387-1c53-4153-91cc-d73c59ae1ca9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
    </rule>
    <rule id="113218" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_tap_driver_installation.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 8e4cf0e5-aa5d-4dc3-beff-dc26917744a9-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Driver Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)tap0901</field>
    </rule>
    <rule id="113219" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_quarkspwdump_clearing_hive_access_history.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects QuarksPwDump clearing access history in hive-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 39f919f3-980b-4e6f-a975-8af7e507ef2b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>QuarksPwDump Clearing Access History</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\SAM</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.dmp)</field>
    </rule>
    <rule id="113220" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_rdp_potential_cve_2019_0708.yml</info>
        <!--Sigma Rule Author: Lionel PRAT, Christophe BROCAS, @atc_project (improvements)-->
        <!--Description: Detect suspicious error on protocol RDP, potential CVE-2019-0708-->
        <!--Date: 2019/05/24-->
        <!--Status: experimental-->
        <!--ID: aaa5b30d-f418-420b-83a0-299cb6024885-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Potential RDP Exploit CVE-2019-0708</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)56|50</field>
        <field name="full_log" negate="no" type="pcre2">(?i)TermDD</field>
    </rule>
    <rule id="113221" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_dhcp_config_failed.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris, @atc_project (fix)-->
        <!--Description: This rule detects a DHCP server error in which a specified Callout DLL (in registry) could not be loaded-->
        <!--Date: 2017/05/15-->
        <!--Status: experimental-->
        <!--ID: 75edd3fd-7146-48e5-9848-3013d7f0282c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DHCP Server Error Failed Loading the CallOut DLL</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1031|1032|1034</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-DHCP\-Server</field>
    </rule>
    <rule id="113222" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_var_services.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 8ca7004b-e620-4ecb-870e-86129b5b8e75-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"</field>
    </rule>
    <rule id="113223" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_moriya_rootkit.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report-->
        <!--Date: 2021/05/06-->
        <!--Status: experimental-->
        <!--ID: 25b9c01c-350d-4b95-bed1-836d04a4f324-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Moriya Rootkit</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)ZzNetSvc</field>
    </rule>
    <rule id="113224" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_via_rundll_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: 11b52f18-aaec-4d60-9143-5dd8cc4706b9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113225" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_system_susp_eventlog_cleared.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: One of the Windows Eventlogs has been cleared. e.g. caused by "wevtutil cl" command execution-->
        <!--Date: 2017/01/10-->
        <!--Status: experimental-->
        <!--ID: a62b37e0-45d3-48d9-a517-90c1a1b0186b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>System Eventlog Cleared</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)104</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
    </rule>
    <rule id="113226" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_meterpreter_or_cobaltstrike_getsystem_service_installation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation-->
        <!--Date: 2019/10/26-->
        <!--Status: experimental-->
        <!--ID: 843544a7-56e0-4dcc-a44f-5cc266dd97d6-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/p:</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)^(?:\\\\\\\\127\.0\.0\.1\\\\ADMIN\$\\)</field>
    </rule>
    <rule id="113227" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_pcap_drivers.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: Detects Windows Pcap driver installation based on a list of associated .sys files.-->
        <!--Date: 2020/06/10-->
        <!--Status: test-->
        <!--ID: 7b687634-ab20-11ea-bb37-0242ac130002-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Windows Pcap Drivers</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)pcap|npcap|npf|nm3|ndiscap|nmnt|windivert|USBPcap|pktmon</field>
    </rule>
    <rule id="113228" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_volume_shadow_copy_mount.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects volume shadow copy mount-->
        <!--Date: 2020/10/20-->
        <!--Status: experimental-->
        <!--ID: f512acbf-e662-4903-843e-97ce4652b740-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Volume Shadow Copy Mount</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Ntfs</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)98</field>
        <field name="full_log" negate="no" type="pcre2">(?i)HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="113229" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_proceshacker.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a ProcessHacker tool that elevated privileges to a very high level-->
        <!--Date: 2021/05/27-->
        <!--Status: experimental-->
        <!--ID: c4ff1eac-84ad-44dd-a6fb-d56a92fc43a9-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>ProcessHacker Privilege Elevation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)^(?:ProcessHacker)</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)LocalSystem</field>
    </rule>
    <rule id="113230" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_service_installation.yml</info>
        <!--Sigma Rule Author: pH-T-->
        <!--Description: Detects suspicious service installation commands-->
        <!--Date: 2022/03/18-->
        <!--Status: experimental-->
        <!--ID: 1d61f71d-59d2-479e-9562-4ff5f4ead16b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ \-w\ hidden\ |\ \-nop\ |\ \-sta\ |\\Users\\Public\\|\\\\Windows\\\\Temp\\|\\Perflogs\\|\\\\\\\\\.\\\\pipe|\\ADMIN\$\\|\.downloadstring\(|\.downloadfile\(</field>
    </rule>
    <rule id="113231" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_service_installation.yml</info>
        <!--Sigma Rule Author: pH-T-->
        <!--Description: Detects suspicious service installation commands-->
        <!--Date: 2022/03/18-->
        <!--Status: experimental-->
        <!--ID: 1d61f71d-59d2-479e-9562-4ff5f4ead16b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ \-e</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ JAB|\ SUVYI|\ SQBFAFgA|\ aWV4I|\ IAB|\ PAA|\ aQBlAHgA</field>
    </rule>
    <rule id="113232" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_invoke_obfuscation_stdin_services.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 72862bf2-0eb1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"</field>
    </rule>
    <rule id="113233" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_susp_service_installation_script.yml</info>
        <!--Sigma Rule Author: pH-T-->
        <!--Description: Detects suspicious service installation scripts-->
        <!--Date: 2022/03/18-->
        <!--Status: experimental-->
        <!--ID: 70f00d10-60b2-4f34-b9a0-dc3df3fe762a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Installation Script</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)(?:\ /C\ )</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell|wscript|cscript|mshta|rundll32</field>
    </rule>
    <rule id="113234" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/win_apt_chafer_mar18_system.yml</info>
        <!--Sigma Rule Author: Florian Roth, Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects Chafer activity attributed to OilRig as reported in Nyotron report in March 2018-->
        <!--Date: 2018/03/23-->
        <!--Status: experimental-->
        <!--ID: 53ba33fd-3a50-4468-a5ef-c583635cfa92-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0049</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
            <id>attack.t1543.003</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Chafer Activity</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)SC\ Scheduled\ Scan|UpdatMachine</field>
    </rule>
    <rule id="113235" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_susp_use_bitsadmin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.
Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001)
-->
        <!--Date: 2022/03/01-->
        <!--Status: experimental-->
        <!--ID: 1ff315dc-2a3a-4b71-8dde-873818d25d39-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Suspicious Task Added by Bitsadmin</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\bitsadmin\.exe)</field>
    </rule>
    <rule id="113236" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_susp_powershell_job.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.
Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001)
-->
        <!--Date: 2022/03/01-->
        <!--Status: experimental-->
        <!--ID: fe3a2d49-f255-4d10-935c-bda7391108eb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Suspicious Task Added by Powershell</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)</field>
    </rule>
    <rule id="113237" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_susp_local_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.
Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001)
-->
        <!--Date: 2022/03/01-->
        <!--Status: experimental-->
        <!--ID: b85e5894-9b19-4d86-8c87-a2f3b81f0521-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Suspicious Download File Extension with Bits</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.ps1|\.exe)</field>
    </rule>
    <rule id="113238" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_new_or_renamed_user_account_with_dollar_sign.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects possible bypass EDR and SIEM via abnormal user account name.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: cfeed607-6aa4-4bbd-9627-b637deb723c8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>New or Renamed User Account with '$' in Attribute 'SamAccountName'.</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720|4781</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="113239" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_scrcons_remote_wmi_scripteventconsumer.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network-->
        <!--Date: 2020/09/02-->
        <!--Status: test-->
        <!--ID: 9599c180-e3a8-4743-8f92-7fb96d3be648-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Remote WMI ActiveScriptEventConsumers</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:scrcons\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)0x3e7</field>
    </rule>
    <rule id="113240" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_ad_replication_non_machine_account.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials.-->
        <!--Date: 2019/07/26-->
        <!--Status: test-->
        <!--ID: 17d619c1-e020-4347-957e-1d1207455c93-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Active Directory Replication from Non Machine Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x100</field>
        <field name="win.eventdata.properties" negate="no" type="pcre2">(?i)1131f6aa\-9c07\-11d1\-f79f\-00c04fc2dcd2|1131f6ad\-9c07\-11d1\-f79f\-00c04fc2dcd2|89e95b76\-444d\-4c62\-991a\-0facbeda640c</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:MSOL_)</field>
    </rule>
    <rule id="113241" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_ad_object_writedac_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects WRITE_DAC access to a domain object-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: 028c7842-4243-41cd-be6f-12f3cf1a26c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1222.001</id>
        </mitre>
        <description>AD Object WriteDAC Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)DS</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x40000</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)19195a5b\-6da0\-11d0\-afd3\-00c04fd930c9|domainDNS</field>
    </rule>
    <rule id="113242" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_protected_storage_service_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 45545954-4016-43c6-855e-eae8f1c369dc-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Protected Storage Service Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)IPC</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)protected_storage</field>
    </rule>
    <rule id="113243" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_possible_dc_shadow.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Detects DCShadow via create new SPN-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 32e19d25-4aed-4860-a55a-be99cb0bf7ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1207</id>
        </mitre>
        <description>Possible DC Shadow</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4742</field>
        <field name="full_log" negate="no" type="pcre2">(?i)GC/</field>
    </rule>
    <rule id="113244" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_possible_dc_shadow.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Detects DCShadow via create new SPN-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 32e19d25-4aed-4860-a55a-be99cb0bf7ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1207</id>
        </mitre>
        <description>Possible DC Shadow</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)servicePrincipalName</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i)^(?:GC/)</field>
    </rule>
    <rule id="113245" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_var_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 4c54ba8f-73d2-4d40-8890-d9cf1dca3d30-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\\"\s+?\-f.*&amp;&amp;.*cmd.*\/c</field>
    </rule>
    <rule id="113246" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_dcom_iertutil_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects a threat actor creating a file named `iertutil.dll` in the `C:\Program Files\Internet Explorer\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: c39f0c81-7348-4965-ab27-2fde35a1b641-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>T1021 DCOM InternetExplorer.Application Iertutil DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\Internet\ Explorer\\iertutil\.dll)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="113247" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_asr_bypass_via_appvlp_re.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Application Virtualization Utility is included with Microsoft Office. We are able to abuse "AppVLP" to execute shell commands.
Normally, this binary is used for Application Virtualization, but we can use it as an abuse binary to circumvent the ASR file path rule folder
or to mark a file as a system file.
-->
        <!--Date: 2020/03/13-->
        <!--Status: experimental-->
        <!--ID: 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Using AppVLP To Circumvent ASR File Path Rule</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)appvlp\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe|powershell\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.sh|\.exe|\.dll|\.bin|\.bat|\.cmd|\.js|\.msh|\.reg|\.scr|\.ps|\.vb|\.jar|\.pl|\.inf</field>
    </rule>
    <rule id="113248" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_metasploit_authentication.yml</info>
        <!--Sigma Rule Author: Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Alerts on Metasploit host's authentications on the domain.-->
        <!--Date: 2020/05/06-->
        <!--Status: experimental-->
        <!--ID: 72124974-a68b-4366-b990-d30e0b2a190d-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Metasploit SMB Authentication</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625|4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)^[A-Za-z0-9]{16}$</field>
    </rule>
    <rule id="113249" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_metasploit_authentication.yml</info>
        <!--Sigma Rule Author: Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Alerts on Metasploit host's authentications on the domain.-->
        <!--Date: 2020/05/06-->
        <!--Status: experimental-->
        <!--ID: 72124974-a68b-4366-b990-d30e0b2a190d-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Metasploit SMB Authentication</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)None</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4776</field>
        <field name="full_log" negate="no" type="pcre2">(?i)[A-Za-z0-9]{16}</field>
    </rule>
    <rule id="113250" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_sam_registry_hive_handle_request.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects handles requested to SAM registry hive-->
        <!--Date: 2019/08/12-->
        <!--Status: test-->
        <!--ID: f8748f2c-89dc-4d95-afb0-5a2dfdbad332-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
        </mitre>
        <description>SAM Registry Hive Handle Request</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\SAM)$</field>
    </rule>
    <rule id="113251" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_net_recon_activity.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Jack Croock (method), Jonhnathan Ribeiro (improvements), oscd.community-->
        <!--Description: Detects activity as "net user administrator /domain" and "net group domain admins /domain"-->
        <!--Date: 2017/03/07-->
        <!--Status: test-->
        <!--ID: 968eef52-9cff-4454-8992-1e74b9cbad6c-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.002</id>
            <id>attack.s0039</id>
        </mitre>
        <description>Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4661</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_USER|SAM_GROUP</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)^(?:S\-1\-5\-21\-)</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2d</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\-500|\-512)$</field>
    </rule>
    <rule id="113252" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_rdp_localhost_login.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: RDP login with localhost source address may be a tunnelled login-->
        <!--Date: 2019/01/28-->
        <!--Status: experimental-->
        <!--ID: 51e33403-2a37-4d66-a574-1fda1782cc31-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>car.2013-07-002</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>RDP Login from Localhost</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)10</field>
        <field name="full_log" negate="no" type="pcre2">(?i)::1|127\.0\.0\.1</field>
    </rule>
    <rule id="113253" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_scm_database_handle_failure.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects non-system users failing to get a handle of the SCM database.-->
        <!--Date: 2019/08/12-->
        <!--Status: experimental-->
        <!--ID: 13addce7-47b2-4ca0-a98f-1de964d1d669-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1010</id>
        </mitre>
        <description>SCM Database Handle Failure</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SC_MANAGER\ OBJECT</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)ServicesActive</field>
        <field name="win.eventdata.subjectLogonId" negate="yes" type="pcre2">(?i)0x3e4</field>
    </rule>
    <rule id="113254" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 2a926e6a-4b81-4011-8a96-e36cc8c04302-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Installed as Services</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="113255" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_failed_logon_reasons.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.-->
        <!--Date: 2017/02/19-->
        <!--Status: experimental-->
        <!--ID: 9eb99343-d336-4020-a3cd-67f3819e68ee-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.initial_access</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Account Tampering - Suspicious Failed Logon Reasons</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625|4776</field>
        <field name="win.eventdata.status" negate="no" type="pcre2">(?i)0xC0000072|0xC000006F|0xC0000070|0xC0000413|0xC000018C|0xC000015B</field>
        <field name="win.eventdata.subjectUserSid" negate="yes" type="pcre2">(?i)S\-1\-0\-0</field>
    </rule>
    <rule id="113256" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_petitpotam_network_share.yml</info>
        <!--Sigma Rule Author: Mauricio Velazco, Michael Haag-->
        <!--Description: Detect PetitPotam coerced authentication activity.-->
        <!--Date: 2021/09/02-->
        <!--Status: experimental-->
        <!--ID: 1ce8c8a3-2723-48ed-8246-906ac91061a6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1187</id>
        </mitre>
        <description>Possible PetitPotam Coerce Authentication Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)^(?:\\\\)</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)(?:\\IPC\$)$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)lsarpc</field>
        <field name="win.eventdata.subjectUserName" negate="no" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
    </rule>
    <rule id="113257" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_compress_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: 7a922f1b-2635-4d6c-91ef-af228b198ad3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)readtoend</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
    </rule>
    <rule id="113258" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_not_allowed_rdp_access.yml</info>
        <!--Sigma Rule Author: Pushkarev Dmitry-->
        <!--Description: This event is generated when an authenticated user who is not allowed to log on remotely attempts to connect to this computer through Remote Desktop. Often, this event can be generated by attackers when searching for available windows servers in the network.-->
        <!--Date: 2020/06/27-->
        <!--Status: test-->
        <!--ID: 8e5c03fa-b7f0-11ea-b242-07e0576828d9-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>Denied Access To Remote Desktop</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4825</field>
    </rule>
    <rule id="113259" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_tap_driver_installation.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 9c8afa4d-0022-48f0-9456-3712466f9701-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Driver Installation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)tap0901</field>
    </rule>
    <rule id="113260" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_lolbas_execution_of_nltest.yml</info>
        <!--Sigma Rule Author: Arun Chauhan-->
        <!--Description: The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.-->
        <!--Date: 2021/10/04-->
        <!--Status: experimental-->
        <!--ID: eeb66bbb-3dde-4582-815a-584aee9fe6d1-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1018</id>
            <id>attack.t1016</id>
        </mitre>
        <description>Correct Execution of Nltest.exe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4689</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:nltest\.exe)$</field>
        <field name="win.eventdata.status" negate="no" type="pcre2">(?i)0x0</field>
    </rule>
    <rule id="113261" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_rc4_kerberos.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects service ticket requests using RC4 encryption type-->
        <!--Date: 2017/02/06-->
        <!--Status: experimental-->
        <!--ID: 496a0e47-0a33-4dca-b009-9e6ca3591f39-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Suspicious Kerberos RC4 Ticket Encryption</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4769</field>
        <field name="win.eventdata.ticketOptions" negate="no" type="pcre2">(?i)0x40810000</field>
        <field name="win.eventdata.ticketEncryptionType" negate="no" type="pcre2">(?i)0x17</field>
        <field name="win.eventdata.serviceName" negate="yes" type="pcre2">(?i)^(?:\$)</field>
    </rule>
    <rule id="113262" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_scheduled_task_deletion.yml</info>
        <!--Sigma Rule Author: David Strassegger-->
        <!--Description: Detects scheduled task deletion events. Scheduled tasks are likely to be deleted if not used for persistence. Malicious Software often creates tasks directly under the root node e.g. \TASKNAME-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 4f86b304-3e02-40e3-aa5d-e88a167c9617-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-08-001</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Scheduled Task Deletion</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4699</field>
    </rule>
    <rule id="113263" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_rottenpotato.yml</info>
        <!--Sigma Rule Author: @SBousseaden, Florian Roth-->
        <!--Description: Detects logon events that have characteristics of events generated during an attack with RottenPotato and the like-->
        <!--Date: 2019/11/15-->
        <!--Status: experimental-->
        <!--ID: 16f5d8ca-44bd-47c8-acbe-6fc95a16c12f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>RottenPotato Like Attack Pattern</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="no" type="pcre2">(?i)ANONYMOUS_LOGON</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)\-</field>
        <field name="full_log" negate="no" type="pcre2">(?i)127\.0\.0\.1</field>
    </rule>
    <rule id="113264" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_gpo_scheduledtasks.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: a8f29a7b-b137-4446-80a0-b804272f3da2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Persistence and Execution at Scale via GPO Scheduled Task</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\SYSVOL</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:ScheduledTasks\.xml)$</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData|%%4417</field>
    </rule>
    <rule id="113265" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth, Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: f0d1feba-4344-4ca9-8121-a6c97bd6df52-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)fgexec|dumpsvc|cachedump|mimidrv|gsecdump|servpw|pwdump</field>
    </rule>
    <rule id="113266" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_sysmon_channel_reference_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential threat actor tampering with Sysmon manifest and eventually disabling it-->
        <!--Date: 2020/07/14-->
        <!--Status: test-->
        <!--ID: 18beca67-ab3e-4ee3-ba7a-a46ca8d7d0cc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Sysmon Channel Reference Deletion</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)WINEVT\\Publishers\\\{5770385f\-c22a\-43e0\-bf4c\-06f5698ffbd9\}|WINEVT\\Channels\\Microsoft\-Windows\-Sysmon/Operational</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)Enabled</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="113267" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_sysmon_channel_reference_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential threat actor tampering with Sysmon manifest and eventually disabling it-->
        <!--Date: 2020/07/14-->
        <!--Status: test-->
        <!--ID: 18beca67-ab3e-4ee3-ba7a-a46ca8d7d0cc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Sysmon Channel Reference Deletion</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)WINEVT\\Publishers\\\{5770385f\-c22a\-43e0\-bf4c\-06f5698ffbd9\}|WINEVT\\Channels\\Microsoft\-Windows\-Sysmon/Operational</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)65536</field>
    </rule>
    <rule id="113268" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_user_creation.yml</info>
        <!--Sigma Rule Author: Patrick Bareiss-->
        <!--Description: Detects local user creation on windows servers, which shouldn't happen in an Active Directory environment. Apply this Sigma Use Case on your windows server logs and not on your DC logs.-->
        <!--Date: 2019/04/18-->
        <!--Status: test-->
        <!--ID: 66b6be3d-55d0-4f47-9855-d69df21740ea-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Local User Creation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
    </rule>
    <rule id="113269" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_dce_rpc_smb_spoolss_named_pipe.yml</info>
        <!--Sigma Rule Author: OTR (Open Threat Research)-->
        <!--Description: Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.-->
        <!--Date: 2018/11/28-->
        <!--Status: test-->
        <!--ID: 214e8f95-100a-4e04-bb31-ef6cba8ce07e-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>DCERPC SMB Spoolss Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)spoolss</field>
    </rule>
    <rule id="113270" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_vssaudit_secevent_source_registration.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects the registration of the security event source VSSAudit. It would usually trigger when volume shadow copy operations happen.-->
        <!--Date: 2020/10/20-->
        <!--Status: experimental-->
        <!--ID: e9faba72-4974-4ab2-a4c5-46e25ad59e9b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>VSSAudit Security Event Source Registration</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.eventdata.auditSourceName" negate="no" type="pcre2">(?i)VSSAudit</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4904|4905</field>
    </rule>
    <rule id="113271" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_exploit_cve_2021_1675_printspooler_security.yml</info>
        <!--Sigma Rule Author: INIT_6-->
        <!--Description: Detects remote printer driver load from Detailed File Share in Security logs that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675 and CVE-2021-34527-->
        <!--Date: 2021/07/02-->
        <!--Status: experimental-->
        <!--ID: 8fe1c584-ee61-444b-be21-e9054b229694-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>cve.2021.1675</id>
            <id>cve.2021.34527</id>
        </mitre>
        <description>CVE-2021-1675 Print Spooler Exploitation IPC Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)spoolss</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x3</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
    </rule>
    <rule id="113272" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_stdin_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 80b708f3-d034-40e4-a6c8-d23b7a7db3d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)environment|invoke|\$\{input\)</field>
    </rule>
    <rule id="113273" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_use_clip_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 1a0a2ff1-611b-4dac-8216-8a7b47c618a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).*</field>
    </rule>
    <rule id="113274" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_local_anon_logon_created.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573-->
        <!--Description: Detects the creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces. Created as an covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts.-->
        <!--Date: 2019/10/31-->
        <!--Status: experimental-->
        <!--ID: 1bbf25b9-8038-4154-a50b-118f2a32be27-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
            <id>attack.t1136.002</id>
        </mitre>
        <description>Suspicious Windows ANONYMOUS LOGON Local Account Created</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
        <field name="full_log" negate="no" type="pcre2">(?i)ANONYMOUS</field>
        <field name="full_log" negate="no" type="pcre2">(?i)LOGON</field>
    </rule>
    <rule id="113275" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_metasploit_or_impacket_smb_psexec_service_install.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz, Relativity-->
        <!--Description: Detects usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation-->
        <!--Date: 2021/01/21-->
        <!--Status: experimental-->
        <!--ID: 6fb63b40-e02a-403e-9ffd-3bcc1d749442-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1570</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Metasploit Or Impacket Service Installation Via SMB PsExec</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)^%systemroot%\\[a-zA-Z]{8}\.exe$</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x10</field>
        <field name="win.eventdata.serviceName" negate="yes" type="pcre2">(?i)PSEXESVC</field>
    </rule>
    <rule id="113276" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_overpass_the_hash.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Dominik Schaudel (rule)-->
        <!--Description: Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.-->
        <!--Date: 2018/02/12-->
        <!--Status: test-->
        <!--ID: 192a0330-c20b-4356-90b6-7b7049ae0b87-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.s0002</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Successful Overpass the Hash Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)seclogo</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Negotiate</field>
    </rule>
    <rule id="113277" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_camera_microphone_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries accessing the microphone and webcam in an endpoint.-->
        <!--Date: 2020/06/07-->
        <!--Status: test-->
        <!--ID: 8cd538a4-62d5-4e83-810b-12d41e428d6e-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Processes Accessing the Microphone and Webcam</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657|4656|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged|\\SOFTWARE\\Microsoft\\\\Windows\\\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged</field>
    </rule>
    <rule id="113278" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_dpapi_domain_masterkey_backup_attempt.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 39a94fd1-8c9a-4ff6-bf22-c058762f8014-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.004</id>
        </mitre>
        <description>DPAPI Domain Master Key Backup Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4692</field>
    </rule>
    <rule id="113279" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_logon_explicit_credentials.yml</info>
        <!--Sigma Rule Author: oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st-->
        <!--Description: Detects suspicious processes logging on with explicit credentials-->
        <!--Date: 2020/10/05-->
        <!--Status: experimental-->
        <!--ID: 941e5c45-cda7-4864-8cea-bbb7458d194a-->
        <mitre>
            <id>attack.t1078</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Suspicious Remote Logon with Explicit Credentials</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4648</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\pwsh\.exe|\\winrs\.exe|\\wmic\.exe|\\net\.exe|\\net1\.exe|\\reg\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)localhost</field>
    </rule>
    <rule id="113280" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_samaccountname_spoofing_cve_2021_42287.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287-->
        <!--Date: 2021/12/22-->
        <!--Status: experimental-->
        <!--ID: 45eb2ae2-9aa2-4c3a-99a5-6e5077655466-->
        <description>Suspicious Computer Account Name Change CVE-2021-42287</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4781</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="113281" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_apt_chafer_mar18_security.yml</info>
        <!--Sigma Rule Author: Florian Roth, Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects Chafer activity attributed to OilRig as reported in Nyotron report in March 2018-->
        <!--Date: 2018/03/23-->
        <!--Status: experimental-->
        <!--ID: c0580559-a6bd-4ef6-b9b7-83703d98b561-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.g0049</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
            <id>attack.t1543.003</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Chafer Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4698</field>
        <field name="full_log" negate="no" type="pcre2">(?i)SC\ Scheduled\ Scan|UpdatMachine</field>
    </rule>
    <rule id="113282" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_etw_modification.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: a4c90ea1-2634-4ca0-adbb-35eae169b6fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>COMPlus_ETWEnabled Registry Modification</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\SOFTWARE\\Microsoft\\\.NETFramework)$</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)ETWEnabled</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="113283" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_net_ntlm_downgrade.yml</info>
        <!--Sigma Rule Author: Florian Roth, wagga-->
        <!--Description: Detects NetNTLM downgrade attack-->
        <!--Date: 2018/03/20-->
        <!--Status: experimental-->
        <!--ID: d3abac66-f11c-4ed0-8acb-50cc29c97eed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>NetNTLM Downgrade Attack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\REGISTRY\\MACHINE\\SYSTEM</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\Control\\Lsa</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)LmCompatibilityLevel|NtlmMinClientSec|RestrictSendingNTLMTraffic</field>
    </rule>
    <rule id="113284" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_syskey_registry_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects handle requests and access operations to specific registry keys to calculate the SysKey-->
        <!--Date: 2019/08/12-->
        <!--Status: test-->
        <!--ID: 9a4ff3b8-6187-4fd2-8e8b-e0eae1129495-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>SysKey Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:lsa\\JD|lsa\\GBG|lsa\\Skew1|lsa\\Data)$</field>
    </rule>
    <rule id="113285" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_hidden_user_creation.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the creation of a local hidden user account which should not happen for event ID 4720.-->
        <!--Date: 2021/05/03-->
        <!--Status: experimental-->
        <!--ID: 7b449a5e-1db5-4dd0-a2dc-4e3a67282538-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Hidden Local User Creation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\$)</field>
    </rule>
    <rule id="113286" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_disable_event_logging.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenarios where system auditing (ie: windows event log auditing) is disabled. This may be used in a scenario where an entity would want to bypass local logging to evade detection when windows event logging is enabled and reviewed. Also, it is recommended to turn off "Local Group Policy Object Processing" via GPO, which will make sure that Active Directory GPOs take precedence over local/edited computer policies via something such as "gpedit.msc". Please note, that disabling "Local Group Policy Object Processing" may cause an issue in scenarios of one off specific GPO modifications  -  however it is recommended to perform these modifications in Active Directory anyways.-->
        <!--Date: 2017/11/19-->
        <!--Status: test-->
        <!--ID: 69aeb277-f15f-4d2d-b32a-55e883609563-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Disabling Windows Event Auditing</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4719</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%%8448|%%8450</field>
    </rule>
    <rule id="113287" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_admin_rdp_login.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detect remote login by Administrator user (depending on internal pattern).-->
        <!--Date: 2017/10/29-->
        <!--Status: experimental-->
        <!--ID: 0f63e1ef-1eb9-4226-9d54-8927ca08520a-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1078.001</id>
            <id>attack.t1078.002</id>
            <id>attack.t1078.003</id>
            <id>car.2016-04-005</id>
        </mitre>
        <description>Admin User Remote Logon</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)10</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Negotiate</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Admin)</field>
    </rule>
    <rule id="113288" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_account_discovery.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 35ba1d85-724d-42a3-889f-2e2362bcaf23-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>AD Privileged Users or Groups Reconnaissance</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4661</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_USER|SAM_GROUP</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\-512|\-502|\-500|\-505|\-519|\-520|\-544|\-551|\-555)$</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)admin</field>
    </rule>
    <rule id="113289" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_svcctl_remote_service.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects remote service activity via remote access to the svcctl named pipe-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 586a8d6b-6bfe-4ad9-9d78-888cd2fe50c3-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.persistence</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Remote Service Activity via SVCCTL Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)svcctl</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData</field>
    </rule>
    <rule id="113290" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_meterpreter_or_cobaltstrike_getsystem_service_install.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation-->
        <!--Date: 2019/10/26-->
        <!--Status: experimental-->
        <!--ID: ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Installation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/p:</field>
    </rule>
    <rule id="113291" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_net_share_obj_susp_desktop_ini.yml</info>
        <!--Sigma Rule Author: Tim Shelton (HAWK.IO)-->
        <!--Description: Detects unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.-->
        <!--Date: 2021/12/06-->
        <!--Status: test-->
        <!--ID: 35bc7e28-ee6b-492f-ab04-da58fcf6402e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>Windows Network Access Suspicious desktop.ini Action</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\desktop\.ini)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i)WriteData|DELETE|WriteDAC|AppendData|AddSubdirectory</field>
    </rule>
    <rule id="113292" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_rdp_bluekeep_poc_scanner.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Adam Bradbury (idea)-->
        <!--Description: Detects the use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep-->
        <!--Date: 2019/06/02-->
        <!--Status: experimental-->
        <!--ID: 8400629e-79a9-4737-b387-5db940ab2367-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Scanner PoC for CVE-2019-0708 RDP RCE Vuln</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625</field>
        <field name="full_log" negate="no" type="pcre2">(?i)AAAAAAA</field>
    </rule>
    <rule id="113293" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_raccess_sensitive_fext.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects known sensitive file extensions accessed on a network share-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 91c945bc-2ad1-4799-a591-4d00198a1215-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1039</id>
        </mitre>
        <description>Suspicious Access to Sensitive File Extensions</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\.pst|\.ost|\.msg|\.nst|\.oab|\.edb|\.nsf|\.bak|\.dmp|\.kirbi|\\groups\.xml|\.rdp)$</field>
    </rule>
    <rule id="113294" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_wmiprvse_wbemcomn_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\Windows\System32\wbem\` directory over the network for a WMI DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: f6c68d5f-e101-4b86-8c84-7d96851fd65c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>T1047 Wmiprvse Wbemcomn DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\wbem\\wbemcomn\.dll)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="113295" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_wmi_login.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detection of logins performed with WMI-->
        <!--Date: 2019/12/04-->
        <!--Status: stable-->
        <!--ID: 5af54681-df95-4c26-854f-2565e13cfab0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Login with WMI</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\WmiPrvSE\.exe)$</field>
    </rule>
    <rule id="113296" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_iso_mount.yml</info>
        <!--Sigma Rule Author: Syed Hasan (@syedhasan009)-->
        <!--Description: Detects the mount of ISO images on an endpoint-->
        <!--Date: 2021/05/29-->
        <!--Status: experimental-->
        <!--ID: 0248a7bc-8a9a-4cd8-a57e-3ae8e073a073-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>ISO Image Mount</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)Security</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\Device\\CdRom</field>
        <field name="win.eventdata.objectName" negate="yes" type="pcre2">(?i)\\Device\\CdRom0\\setup\.exe</field>
    </rule>
    <rule id="113297" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_privesc_cve_2020_1472.yml</info>
        <!--Sigma Rule Author: Aleksandr Akhremchik, @aleqs4ndr, ocsd.community-->
        <!--Description: Detects Netlogon Elevation of Privilege Vulnerability aka Zerologon (CVE-2020-1472)-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: dd7876d8-0f09-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.t1068</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Possible Zerologon (CVE-2020-1472) Exploitation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4742</field>
        <field name="win.eventdata.subjectUserName" negate="no" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%DC\-MACHINE\-NAME%</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="113298" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_ad_user_enumeration.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut)-->
        <!--Description: Detects access to a domain user from a non-machine account-->
        <!--Date: 2020/03/30-->
        <!--Status: experimental-->
        <!--ID: ab6bffca-beff-4baa-af11-6733f296d57a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>AD User Enumeration</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)bf967aba\-0de6\-11d0\-a285\-00aa003049e2</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:MSOL_)</field>
    </rule>
    <rule id="113299" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_mal_wceaux_dll.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects wceaux.dll access while WCE pass-the-hash remote command execution on source host-->
        <!--Date: 2017/06/14-->
        <!--Status: test-->
        <!--ID: 1de68c67-af5c-4097-9c85-fe5578e09e67-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.s0005</id>
        </mitre>
        <description>WCE wceaux.dll Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4658|4660|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\wceaux\.dll)$</field>
    </rule>
    <rule id="113300" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_interactive_logons.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects interactive console logons to Server Systems-->
        <!--Date: 2017/03/17-->
        <!--Status: test-->
        <!--ID: 3ff152b2-1388-4984-9cd9-a323323fdadf-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Interactive Logon to Server Systems</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)528|529|4624|4625</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)2</field>
        <field name="win.system.computer" negate="no" type="pcre2">(?i)%ServerSystems%|%DomainControllers%</field>
        <field name="win.eventdata.logonProcessName" negate="yes" type="pcre2">(?i)Advapi</field>
        <field name="win.system.computer" negate="yes" type="pcre2">(?i)%Workstations%</field>
    </rule>
    <rule id="113301" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_scm_database_privileged_operation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects non-system users performing privileged operation os the SCM database-->
        <!--Date: 2019/08/15-->
        <!--Status: test-->
        <!--ID: dae8171c-5ec6-4396-b210-8466585b53e9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>SCM Database Privileged Operation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4674</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SC_MANAGER\ OBJECT</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)servicesactive</field>
        <field name="win.eventdata.privilegeList" negate="no" type="pcre2">(?i)SeTakeOwnershipPrivilege</field>
        <field name="win.eventdata.subjectLogonId" negate="yes" type="pcre2">(?i)0x3e4</field>
    </rule>
    <rule id="113302" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_lm_namedpipe.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 52d8b0c6-53d6-439a-9e41-52ad442ad9ad-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>First Time Seen Remote Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)atsvc|samr|lsarpc|lsass|winreg|netlogon|srvsvc|protected_storage|wkssvc|browser|netdfs|svcctl|spoolss|ntsvcs|LSM_API_service|HydraLsPipe|TermSrv_API_service|MsFteWds|sql\\query</field>
    </rule>
    <rule id="113303" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_rundll_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113304" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_user_driver_loaded.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects the loading of drivers via 'SeLoadDriverPrivilege' required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: f63508a0-c809-4435-b3be-ed819394d612-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Driver Loaded By User</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4673</field>
        <field name="win.eventdata.privilegeList" negate="no" type="pcre2">(?i)SeLoadDriverPrivilege</field>
        <field name="win.eventdata.service" negate="no" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\\\Windows\\\\System32\\Dism\.exe|\\\\Windows\\\\System32\\rundll32\.exe|\\\\Windows\\\\System32\\fltMC\.exe|\\\\Windows\\\\HelpPane\.exe|\\\\Windows\\\\System32\\mmc\.exe|\\\\Windows\\\\System32\\svchost\.exe|\\\\Windows\\\\System32\\wimserv\.exe|\\procexp64\.exe|\\procexp\.exe|\\procmon64\.exe|\\procmon\.exe|\\Google\\Chrome\\Application\\chrome\.exe)$</field>
    </rule>
    <rule id="113305" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_lsass_dump.yml</info>
        <!--Sigma Rule Author: sigma-->
        <!--Description: Detects process handle on LSASS process with certain access mask and object type SAM_DOMAIN-->
        <!--Date: 2017/02/12-->
        <!--Status: experimental-->
        <!--ID: aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Password Dumper Activity on LSASS</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x705</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_DOMAIN</field>
    </rule>
    <rule id="113306" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_dsrm_password_change.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 53ad8e36-f573-46bf-97e4-15ba5bf4bb51-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Password Change on Directory Service Restore Mode (DSRM) Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4794</field>
    </rule>
    <rule id="113307" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_wmi_persistence.yml</info>
        <!--Sigma Rule Author: Florian Roth, Gleb Sukhodolskiy, Timur Zinniatullin oscd.community-->
        <!--Description: Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.-->
        <!--Date: 2017/08/22-->
        <!--Status: experimental-->
        <!--ID: f033f3f3-fd24-4995-97d8-a3bb17550a88-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)WMI\ Namespace</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)subscription</field>
    </rule>
    <rule id="113308" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_pass_the_hash.yml</info>
        <!--Sigma Rule Author: Ilias el Matani (rule), The Information Assurance Directorate at the NSA (method)-->
        <!--Description: Detects the attack technique pass the hash which is used to move laterally inside the network-->
        <!--Date: 2017/03/08-->
        <!--Status: test-->
        <!--ID: f8d98d6c-7a07-4d74-b064-dd4a3c244528-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>car.2016-04-004</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Pass the Hash Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624|4625</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)NtLmSsp</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)%Workstations%</field>
        <field name="win.system.computer" negate="no" type="pcre2">(?i)%Workstations%</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
    </rule>
    <rule id="113309" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_aadhealth_mon_agent_regkey_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), MSTIC-->
        <!--Description: This detection uses Windows security events to detect suspicious access attempts to the registry key of Azure AD Health monitoring agent.
This detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object HKLM\SOFTWARE\Microsoft\Microsoft Online\Reporting\MonitoringAgent.
-->
        <!--Date: 2021/08/26-->
        <!--Status: experimental-->
        <!--ID: ff151c33-45fa-475d-af4f-c2f93571f4fe-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Azure AD Health Monitoring Agent Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Microsoft\ Online\\Reporting\\MonitoringAgent</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.DiagnosticsAgent\.exe|Microsoft\.Identity\.Health\.Adfs\.InsightsService\.exe|Microsoft\.Identity\.Health\.Adfs\.MonitoringAgent\.Startup\.exe|Microsoft\.Identity\.Health\.Adfs\.PshSurrogate\.exe|Microsoft\.Identity\.Health\.Common\.Clients\.ResourceMonitor\.exe</field>
    </rule>
    <rule id="113310" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_use_mshta_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)window\.close</field>
    </rule>
    <rule id="113311" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_add_sid_history.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, @atc_project (improvements)-->
        <!--Description: An attacker can use the SID history attribute to gain additional privileges.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 2632954e-db1c-49cb-9936-67d1ef1d17d2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.005</id>
        </mitre>
        <description>Addition of SID History to Active Directory Object</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4765|4766</field>
    </rule>
    <rule id="113312" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_add_sid_history.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, @atc_project (improvements)-->
        <!--Description: An attacker can use the SID history attribute to gain additional privileges.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 2632954e-db1c-49cb-9936-67d1ef1d17d2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.005</id>
        </mitre>
        <description>Addition of SID History to Active Directory Object</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.sidHistory" negate="yes" type="pcre2">(?i)\-|%%1793</field>
        <field name="win.eventdata.sidHistory" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="113313" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_clip_services_security.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 4edf51e1-cb83-4e1a-bc39-800e396068e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)clipboard\]::</field>
    </rule>
    <rule id="113314" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_impacket_secretdump.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, wagga-->
        <!--Description: Detect AD credential dumping using impacket secretdump HKTL-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 252902e3-5830-4cf6-bf21-c22083dfd5cf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Possible Impacket SecretDump Remote Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\ADMIN\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)SYSTEM32\\</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)\.tmp</field>
    </rule>
    <rule id="113315" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_kerberos_manipulation.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages-->
        <!--Date: 2017/02/10-->
        <!--Status: test-->
        <!--ID: f7644214-0eb0-4ace-9455-331ec4c09253-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
        </mitre>
        <description>Kerberos Manipulation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)675|4768|4769|4771</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x9|0xA|0xB|0xF|0x10|0x11|0x13|0x14|0x1A|0x1F|0x21|0x22|0x23|0x24|0x26|0x27|0x28|0x29|0x2C|0x2D|0x2E|0x2F|0x31|0x32|0x3E|0x3F|0x40|0x41|0x43|0x44</field>
    </rule>
    <rule id="113316" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_remote_registry_management_using_reg_utility.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Remote registry management using REG utility from non-admin workstation-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 68fcba0d-73a5-475e-a915-e8b4c576827e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
            <id>attack.s0075</id>
        </mitre>
        <description>Remote Registry Management Using Reg Utility</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)\\winreg</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)%Admins_Workstations%</field>
    </rule>
    <rule id="113317" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_impacket_psexec.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects execution of Impacket's psexec.py.-->
        <!--Date: 2020/12/14-->
        <!--Status: test-->
        <!--ID: 32d56ea1-417f-44ff-822b-882873f5f43b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Impacket PsExec Execution</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)RemCom_stdint|RemCom_stdoutt|RemCom_stderrt</field>
    </rule>
    <rule id="113318" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_adcs_certificate_template_configuration_vulnerability.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject-->
        <!--Date: 2021/11/17-->
        <!--Status: experimental-->
        <!--ID: 5ee3a654-372f-11ec-8d3d-0242ac130003-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4898</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="113319" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_adcs_certificate_template_configuration_vulnerability.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject-->
        <!--Date: 2021/11/17-->
        <!--Status: experimental-->
        <!--ID: 5ee3a654-372f-11ec-8d3d-0242ac130003-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4899</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="113320" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_add_domain_trust.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Addition of domains is seldom and should be verified for legitimacy.-->
        <!--Date: 2019/12/03-->
        <!--Status: stable-->
        <!--ID: 0255a820-e564-4e40-af2b-6ac61160335c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Addition of Domain Trusts</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4706</field>
    </rule>
    <rule id="113321" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_codeintegrity_check_failure.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Code integrity failures may indicate tampered executables.-->
        <!--Date: 2019/12/03-->
        <!--Status: stable-->
        <!--ID: 470ec5fa-7b4e-4071-b200-4c753100f49b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.001</id>
        </mitre>
        <description>Failed Code Integrity Checks</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5038|6281</field>
    </rule>
    <rule id="113322" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_transferring_files_with_credential_data_via_network_shares.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Transferring files with well-known filenames (sensitive files with credential data) using network shares-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 910ab938-668b-401b-b08c-b596e80fdca5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Transferring Files with Credential Data via Network Shares</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)\\mimidrv|\\lsass|\\\\Windows\\\\minidump\\|\\hiberfil|\\sqldmpr|\\sam|\\ntds\.dit|\\security</field>
    </rule>
    <rule id="113323" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_remote_powershell_session.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound connections to ports 5985 OR 5986-->
        <!--Date: 2019/09/12-->
        <!--Status: experimental-->
        <!--ID: 13acf386-b8c6-4fe0-9a6e-c4756b974698-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Remote PowerShell Sessions Network Connections (WinRM)</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)5985|5986</field>
        <field name="full_log" negate="no" type="pcre2">(?i)44</field>
    </rule>
    <rule id="113324" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_var_services_security.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: dcf2db1f-f091-425b-a821-c05875b8925a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"</field>
    </rule>
    <rule id="113325" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_via_use_rundll32_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: cd0f7229-d16f-42de-8fe3-fba365fbcb3a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="113326" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_apt_wocao.yml</info>
        <!--Sigma Rule Author: Florian Roth, frack113-->
        <!--Description: Detects activity mentioned in Operation Wocao report-->
        <!--Date: 2019/12/20-->
        <!--Status: experimental-->
        <!--ID: 74ad4314-482e-4c3e-b237-3f7ed3b9ca8d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.004</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Operation Wocao Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4799</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Administr)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\checkadmin\.exe)</field>
    </rule>
    <rule id="113327" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_aadhealth_svc_agent_regkey_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), MSTIC-->
        <!--Description: This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).
Information from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).
This detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\SOFTWARE\Microsoft\ADHealthAgent.
Make sure you set the SACL to propagate to its sub-keys.
-->
        <!--Date: 2021/08/26-->
        <!--Status: experimental-->
        <!--ID: 1d2ab8ac-1a01-423b-9c39-001510eae8e8-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Azure AD Health Service Agents Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\ADHealthAgent</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.DiagnosticsAgent\.exe|Microsoft\.Identity\.Health\.Adfs\.InsightsService\.exe|Microsoft\.Identity\.Health\.Adfs\.MonitoringAgent\.Startup\.exe|Microsoft\.Identity\.Health\.Adfs\.PshSurrogate\.exe|Microsoft\.Identity\.Health\.Common\.Clients\.ResourceMonitor\.exe</field>
    </rule>
    <rule id="113328" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_alert_active_directory_user_control.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenario where if a user is assigned the SeEnableDelegationPrivilege right in Active Directory it would allow control of other AD user objects.-->
        <!--Date: 2017/07/30-->
        <!--Status: test-->
        <!--ID: 311b6ce2-7890-4383-a8c2-663a9f6b43cd-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Enabled User Right in AD to Control User Objects</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4704</field>
        <field name="win.eventdata.privilegeList" negate="no" type="pcre2">(?i)SeEnableDelegationPrivilege</field>
    </rule>
    <rule id="113329" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_lateral_movement_condrv.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: This event was observed on the target host during lateral movement. The process name within the event contains the process spawned post compromise. Account Name within the event contains the compromised user account name. This event should to be correlated with 4624 and 4688 for further intrusion context.-->
        <!--Date: 2021/04/27-->
        <!--Status: deprecated-->
        <!--ID: 29d31aee-30f4-4006-85a9-a4a02d65306c-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.execution</id>
            <id>attack.t1021</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Lateral Movement Indicator ConDrv</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4674</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)Security</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\Device\\ConDrv</field>
    </rule>
    <rule id="113330" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_stdin_services_security.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 0c718a5e-4284-4fb9-b4d9-b9a50b3a1974-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\$\{input\}|noexit</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)(?:\ /c\ |\ /r\ )</field>
    </rule>
    <rule id="113331" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_register_new_logon_process_by_rubeus.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community-->
        <!--Description: Detects potential use of Rubeus via registered new trusted logon process-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 12e6d621-194f-4f59-90cc-1959e21e69f7-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Register new Logon Process by Rubeus</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4611</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)User32LogonProcesss</field>
    </rule>
    <rule id="113332" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_sdelete.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects renaming of file while deletion with SDelete tool.-->
        <!--Date: 2017/06/14-->
        <!--Status: test-->
        <!--ID: 39a80702-d7ca-4a83-b776-525b1f86a36d-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
            <id>attack.t1027.005</id>
            <id>attack.t1485</id>
            <id>attack.t1553.002</id>
            <id>attack.s0195</id>
        </mitre>
        <description>Secure Deletion with SDelete</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663|4658</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\.AAA|\.ZZZ)$</field>
    </rule>
    <rule id="113333" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_external_device.yml</info>
        <!--Sigma Rule Author: Keith Wright-->
        <!--Description: Detects external diskdrives or plugged in USB devices , EventID 6416 on windows 10 or later-->
        <!--Date: 2019/11/20-->
        <!--Status: experimental-->
        <!--ID: f69a87ea-955e-4fb4-adb2-bb9fd6685632-->
        <mitre>
            <id>attack.t1091</id>
            <id>attack.t1200</id>
            <id>attack.lateral_movement</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>External Disk Drive Or USB Storage Device</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6416</field>
        <field name="full_log" negate="no" type="pcre2">(?i)DiskDrive</field>
    </rule>
    <rule id="113334" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_external_device.yml</info>
        <!--Sigma Rule Author: Keith Wright-->
        <!--Description: Detects external diskdrives or plugged in USB devices , EventID 6416 on windows 10 or later-->
        <!--Date: 2019/11/20-->
        <!--Status: experimental-->
        <!--ID: f69a87ea-955e-4fb4-adb2-bb9fd6685632-->
        <mitre>
            <id>attack.t1091</id>
            <id>attack.t1200</id>
            <id>attack.lateral_movement</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>External Disk Drive Or USB Storage Device</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.deviceDescription" negate="no" type="pcre2">(?i)USB\ Mass\ Storage\ Device</field>
    </rule>
    <rule id="113335" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_event_log_cleared.yml</info>
        <!--Sigma Rule Author: Saw Winn Naung-->
        <!--Description: Checks for event id 1102 which indicates the security event log was cleared.-->
        <!--Date: 2021/08/15-->
        <!--Status: experimental-->
        <!--ID: a122ac13-daf8-4175-83a2-72c387be339d-->
        <mitre>
            <id>attack.t1070.001</id>
        </mitre>
        <description>Security Event Log Cleared</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1102</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
    </rule>
    <rule id="113336" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_smb_file_creation_admin_shares.yml</info>
        <!--Sigma Rule Author: Jose Rodriguez (@Cyb3rPandaH), OTR (Open Threat Research)-->
        <!--Description: Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).-->
        <!--Date: 2020/08/06-->
        <!--Status: test-->
        <!--ID: b210394c-ba12-4f89-9117-44a2464b9511-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>SMB Create Remote File Admin Share</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)(?:C\$)$</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="113337" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_arbitrary_shell_execution_via_settingcontent.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create "shortcuts" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.-->
        <!--Date: 2020/03/13-->
        <!--Status: experimental-->
        <!--ID: 24de4f3b-804c-4165-b442-5a06a2302c7e-->
        <mitre>
            <id>attack.t1204</id>
            <id>attack.t1566.001</id>
            <id>attack.execution</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Arbitrary Shell Command Execution Via Settingcontent-Ms</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.SettingContent\-ms</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)immersivecontrolpanel</field>
    </rule>
    <rule id="113338" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_apt_slingshot.yml</info>
        <!--Sigma Rule Author: Florian Roth, Bartlomiej Czyz (@bczyz1)-->
        <!--Description: Detects the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group-->
        <!--Date: 2019/03/04-->
        <!--Status: experimental-->
        <!--ID: c5a178bf-9cfb-4340-b584-e4df39b6a3e7-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
            <id>attack.s0111</id>
        </mitre>
        <description>Defrag Deactivation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4701</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\Defrag\\ScheduledDefrag</field>
    </rule>
    <rule id="113339" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_defender_bypass.yml</info>
        <!--Sigma Rule Author: @BarryShooshooga-->
        <!--Description: Detects scenarios where an windows defender exclusion was added in registry where an entity would want to bypass antivirus scanning from windows defender-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusion Set</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657|4656|4660|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\Microsoft\\Windows\ Defender\\Exclusions\\</field>
    </rule>
    <rule id="113340" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address-->
        <!--Date: 2019/02/16-->
        <!--Status: experimental-->
        <!--ID: 5bed80b6-b3e8-428e-a3ae-d3c757589e41-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1090.001</id>
            <id>attack.t1090.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP over Reverse SSH Tunnel WFP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="full_log" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)127\.|::1</field>
    </rule>
    <rule id="113341" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address-->
        <!--Date: 2019/02/16-->
        <!--Status: experimental-->
        <!--ID: 5bed80b6-b3e8-428e-a3ae-d3c757589e41-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1090.001</id>
            <id>attack.t1090.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP over Reverse SSH Tunnel WFP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)127\.|::1</field>
    </rule>
    <rule id="113342" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_dpapi_domain_backupkey_extraction.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects tools extracting LSA secret DPAPI domain backup key from Domain Controllers-->
        <!--Date: 2019/06/20-->
        <!--Status: test-->
        <!--ID: 4ac1f50b-3bd0-4968-902d-868b4647937e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.004</id>
        </mitre>
        <description>DPAPI Domain Backup Key Extraction</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SecretObject</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)BCKUPKEY</field>
    </rule>
    <rule id="113343" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_pass_the_hash_2.yml</info>
        <!--Sigma Rule Author: Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)-->
        <!--Description: Detects the attack technique pass the hash which is used to move laterally inside the network-->
        <!--Date: 2019/06/14-->
        <!--Status: stable-->
        <!--ID: 8eef149c-bd26-49f2-9e5a-9b00e3af499b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Pass the Hash Activity 2</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.subjectUserSid" negate="no" type="pcre2">(?i)S\-1\-0\-0</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)NtLmSsp</field>
        <field name="win.eventdata.keyLength" negate="no" type="pcre2">(?i)0</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
    </rule>
    <rule id="113344" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_account_backdoor_dcsync_rights.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden; Roberto Rodriguez @Cyb3rWard0g; oscd.community-->
        <!--Description: backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 2c99737c-585d-4431-b61a-c911d86ff32f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Powerview Add-DomainObjectAcl DCSync AD Extend Right</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)ntSecurityDescriptor</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i)1131f6ad\-9c07\-11d1\-f79f\-00c04fc2dcd2|1131f6aa\-9c07\-11d1\-f79f\-00c04fc2dcd2|89e95b76\-444d\-4c62\-991a\-0facbeda640c</field>
    </rule>
    <rule id="113345" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_user_couldnt_call_privileged_service_lsaregisterlogonprocess.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community-->
        <!--Description: The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 6daac7fc-77d1-449a-a71a-e6b4d59a0e54-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>User Couldn't Call a Privileged Service 'LsaRegisterLogonProcess'</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Security\-Auditing</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4673</field>
        <field name="win.eventdata.service" negate="no" type="pcre2">(?i)LsaRegisterLogonProcess\(\)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x8010000000000000</field>
    </rule>
    <rule id="113346" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_admin_share_access.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects access to $ADMIN share-->
        <!--Date: 2017/03/04-->
        <!--Status: test-->
        <!--ID: 098d7118-55bc-4912-a836-dc6483a8d150-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Access to ADMIN$ Share</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5140</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)Admin\$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="113347" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_atsvc_task.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects remote task creation via at.exe or API interacting with ATSVC namedpipe-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: f6de6525-4509-495a-8a82-1f8b0ed73a00-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.persistence</id>
            <id>car.2013-05-004</id>
            <id>car.2015-04-001</id>
            <id>attack.t1053.002</id>
        </mitre>
        <description>Remote Task Creation via ATSVC Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)atsvc</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData</field>
    </rule>
    <rule id="113348" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_hybridconnectionmgr_svc_installation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Rule to detect the Hybrid Connection Manager service installation.-->
        <!--Date: 2021/04/12-->
        <!--Status: experimental-->
        <!--ID: 0ee4d8a5-4e67-4faf-acfa-62a78457d1f2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>HybridConnectionManager Service Installation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
    </rule>
    <rule id="113349" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_psexec.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: c462f537-a1e3-41a6-b5fc-b2c2cef9bf82-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Suspicious PsExec Execution</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\\\\\.+\\IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\-stdin|\-stdout|\-stderr)$</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)^(?:PSEXESVC)</field>
    </rule>
    <rule id="113350" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_suspicious_outbound_kerberos_connection.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: eca91c7c-9214-47b9-b4c5-cb1d7e4f2350-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Suspicious Outbound Kerberos Connection</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="full_log" negate="no" type="pcre2">(?i)88</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\lsass\.exe|\\opera\.exe|\\chrome\.exe|\\firefox\.exe)$</field>
    </rule>
    <rule id="113351" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_invoke_obfuscation_obfuscated_iex_services_security.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references-->
        <!--Date: 2019/11/08-->
        <!--Status: experimental-->
        <!--ID: fd0f5778-d3cb-4c9a-9695-66759d04702a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
    </rule>
    <rule id="113352" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_susp_ldap_dataexchange.yml</info>
        <!--Sigma Rule Author: xknow @xknow_infosec-->
        <!--Description: Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.-->
        <!--Date: 2019/03/24-->
        <!--Status: test-->
        <!--ID: d00a9a72-2c09-4459-ad03-5e0a23351e36-->
        <mitre>
            <id>attack.t1001.003</id>
            <id>attack.command_and_control</id>
        </mitre>
        <description>Suspicious LDAP-Attributes Used</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i).+</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)primaryInternationalISDNNumber|otherFacsimileTelephoneNumber|primaryTelexNumber</field>
    </rule>
    <rule id="113353" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/printservice/win_exploit_cve_2021_1675_printspooler.yml</info>
        <!--Sigma Rule Author: Florian Roth, KevTheHermit, fuzzyf10w-->
        <!--Description: Detects events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675-->
        <!--Date: 2021/06/30-->
        <!--Status: experimental-->
        <!--ID: 4e64668a-4da1-49f5-a8df-9e2d5b866718-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>Possible CVE-2021-1675 Print Spooler Exploitation</description>
        <options>no_full_log</options>
        <group>windows,printservice-admin,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)808|4909</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x45A|0x7e</field>
    </rule>
    <rule id="113354" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/printservice/win_exploit_cve_2021_1675_printspooler.yml</info>
        <!--Sigma Rule Author: Florian Roth, KevTheHermit, fuzzyf10w-->
        <!--Description: Detects events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675-->
        <!--Date: 2021/06/30-->
        <!--Status: experimental-->
        <!--ID: 4e64668a-4da1-49f5-a8df-9e2d5b866718-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>Possible CVE-2021-1675 Print Spooler Exploitation</description>
        <options>no_full_log</options>
        <group>windows,printservice-admin,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)The\ print\ spooler\ failed\ to\ load\ a\ plug\-in\ module|MyExploit\.dll|evil\.dll|\\addCube\.dll|\\rev\.dll|\\rev2\.dll|\\main64\.dll|\\mimilib\.dll|\\mimispool\.dll</field>
    </rule>
    <rule id="113356" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/printservice/win_exploit_cve_2021_1675_printspooler_operational.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects driver load events print service operational log that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675-->
        <!--Date: 2021/07/01-->
        <!--Status: experimental-->
        <!--ID: f34d942d-c8c4-4f1f-b196-22471aecf10a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>CVE-2021-1675 Print Spooler Exploitation</description>
        <options>no_full_log</options>
        <group>windows,printservice-operational,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)316</field>
        <field name="full_log" negate="no" type="pcre2">(?i)UNIDRV\.DLL,\ kernelbase\.dll,\ |\ 123\ |\ 1234\ |mimispool</field>
    </rule>
    <rule id="113358" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_failed_driver_load.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects driver load events that got blocked by Windows code integrity checks-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: f8931561-97f5-4c46-907f-0a4a592e47a7-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Code Integrity Blocked Driver Load</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)that\ did\ not\ meet\ the\ Microsoft\ signing\ level\ requirements</field>
    </rule>
    <rule id="113359" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/smbclient/win_susp_failed_guest_logon.yml</info>
        <!--Sigma Rule Author: Florian Roth, KevTheHermit, fuzzyf10w-->
        <!--Description: Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service-->
        <!--Date: 2021/06/30-->
        <!--Status: experimental-->
        <!--ID: 71886b70-d7b4-4dbf-acce-87d2ca135262-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>Suspicious Rejected SMB Guest Logon From IP</description>
        <options>no_full_log</options>
        <group>windows,smbclient-security,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)31017</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Rejected\ an\ insecure\ guest\ logon</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\1)</field>
    </rule>
    <rule id="113360" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_rdp.yml</info>
        <!--Sigma Rule Author: James Pemberton-->
        <!--Description: Detects logons using NTLM to hosts that are potentially not part of the domain.-->
        <!--Date: 2020/05/22-->
        <!--Status: test-->
        <!--ID: ce5678bb-b9aa-4fb5-be4b-e57f686256ad-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Potential Remote Desktop Connection to Non-Domain Host</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8001</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:TERMSRV)</field>
    </rule>
    <rule id="113361" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_auth.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects logons using NTLM, which could be caused by a legacy source or attackers-->
        <!--Date: 2018/06/08-->
        <!--Status: experimental-->
        <!--ID: 98c3bcf1-56f2-49dc-9d8d-c66cf190238b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>NTLM Logon</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8002</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i).+</field>
    </rule>
    <rule id="113362" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_brute_force.yml</info>
        <!--Sigma Rule Author: Jerry Shockley '@jsh0x'-->
        <!--Description: Detects common NTLM brute force device names-->
        <!--Date: 2022/02/02-->
        <!--Status: experimental-->
        <!--ID: 9c8acf1a-cbf9-4db6-b63c-74baabe03e59-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
        </mitre>
        <description>NTLM Brute Force</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8004</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)Rdesktop|Remmina|Freerdp|Windows7|Windows8|Windows2012|Windows2016|Windows2019</field>
    </rule>
    <rule id="113363" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_server/win_apt_gallium.yml</info>
        <!--Sigma Rule Author: Tim Burrell-->
        <!--Description: Detects artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.-->
        <!--Date: 2020/02/07-->
        <!--Status: experimental-->
        <!--ID: 3db10f25-2527-4b79-8d4b-471eb900ee29-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>GALLIUM Artefacts</description>
        <options>no_full_log</options>
        <group>windows,dns-server,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)257</field>
        <field name="full_log" negate="no" type="pcre2">(?i)asyspy256\.ddns\.net|hotkillmail9sddcc\.ddns\.net|rosaf112\.ddns\.net|cvdfhjh1231\.myftp\.biz|sz2016rose\.ddns\.net|dffwescwer4325\.myftp\.biz|cvdfhjh1231\.ddns\.net</field>
    </rule>
    <rule id="113364" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_server/win_susp_dns_config.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This rule detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded-->
        <!--Date: 2017/05/08-->
        <!--Status: test-->
        <!--ID: cbe51394-cd93-4473-b555-edf0144952d9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DNS Server Error Failed Loading the ServerLevelPluginDLL</description>
        <options>no_full_log</options>
        <group>windows,dns-server,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)150|770</field>
    </rule>
    <rule id="113365" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_status.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Someone try to hide from Sysmon-->
        <!--Date: 2021/06/04-->
        <!--Status: experimental-->
        <!--ID: 1f2b5353-573f-4880-8e33-7d04dcf97744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Modification</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Stopped</field>
    </rule>
    <rule id="113366" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_status.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Someone try to hide from Sysmon-->
        <!--Date: 2021/06/04-->
        <!--Status: experimental-->
        <!--ID: 1f2b5353-573f-4880-8e33-7d04dcf97744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Modification</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Sysmon\ config\ state\ changed</field>
    </rule>
    <rule id="113367" level="12">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying manipulate the configuration-->
        <!--Date: 2022/01/12-->
        <!--Status: experimental-->
        <!--ID: 8ac03a65-6c84-4116-acad-dc1558ff7a77-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Sysmon Configuration Change</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16</field>
    </rule>
    <rule id="113368" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_dcom_iertutil_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR), wagga-->
        <!--Description: Detects a threat actor creating a file named `iertutil.dll` in the `C:\Program Files\Internet Explorer\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: e554f142-5cf3-4e55-ace9-a1b59e0def65-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>T1021 DCOM InternetExplorer.Application Iertutil DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)11</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\Internet\ Explorer\\iertutil\.dll)$</field>
    </rule>
    <rule id="113369" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_dcom_iertutil_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR), wagga-->
        <!--Description: Detects a threat actor creating a file named `iertutil.dll` in the `C:\Program Files\Internet Explorer\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: e554f142-5cf3-4e55-ace9-a1b59e0def65-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>T1021 DCOM InternetExplorer.Application Iertutil DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Internet\ Explorer\\iexplore\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\Internet\ Explorer\\iertutil\.dll)$</field>
    </rule>
    <rule id="113370" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_error.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Someone try to hide from Sysmon-->
        <!--Date: 2021/06/04-->
        <!--Status: experimental-->
        <!--ID: 815cd91b-7dbc-4247-841a-d7dd1392b0a8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Error</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error|Failed\ to\ connect\ to\ the\ driver\ to\ update\ configuration</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Last\ error:\ The\ media\ is\ write\ protected\.</field>
    </rule>
    <rule id="113371" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_accessing_winapi_in_powershell_credentials_dumping.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Accessing to lsass.exe by Powershell-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 3f07b9d1-2082-4c56-9277-613a621983cc-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Accessing WinAPI in PowerShell for Credentials Dumping</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8|10</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
    </rule>
    <rule id="113372" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_process_hollowing.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Sittikorn S-->
        <!--Description: Detects when a memory process image does not match the disk image, indicative of process hollowing.-->
        <!--Date: 2022/01/25-->
        <!--Status: experimental-->
        <!--ID: c4b890e5-8d8c-4496-8c66-c805753817cd-->
        <mitre>
            <id>attack.process_injection</id>
            <id>attack.t1055.012</id>
        </mitre>
        <description>Sysmon Process Hollowing Detection</description>
        <options>no_full_log</options>
        <group>windows,process_tampering,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Image\ is\ replaced</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\Program\ Files\\|:\\Program\ Files\ \(x86\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\chrome\.exe|\\opera\.exe|\\firefox\.exe|\\MicrosoftEdge\.exe)$</field>
    </rule>
    <rule id="113373" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_logon_scripts_userinitmprlogonscript_reg.yml</info>
        <!--Sigma Rule Author: Tom Ueltschi (@c_APT_ure)-->
        <!--Description: Detects creation of UserInitMprLogonScript persistence method-->
        <!--Date: 2019/01/12-->
        <!--Status: test-->
        <!--ID: 9ace0707-b560-49b8-b6ca-5148b42f39fb-->
        <mitre>
            <id>attack.t1037.001</id>
            <id>attack.persistence</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Logon Scripts Creation in UserInitMprLogonScript Registry</description>
        <options>no_full_log</options>
        <group>registry_add,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)UserInitMprLogonScript</field>
    </rule>
    <rule id="113374" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_mal_netwire.yml</info>
        <!--Sigma Rule Author: Christopher Peacock-->
        <!--Description: Attempts to detect registry events for common NetWire key HKCU\Software\NetWire-->
        <!--Date: 2021/10/07-->
        <!--Status: experimental-->
        <!--ID: 1d218616-71b0-4c40-855b-9dbe75510f7f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>NetWire RAT Registry Key</description>
        <options>no_full_log</options>
        <group>windows,registry_add,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\software\\NetWire</field>
    </rule>
    <rule id="113375" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_persistence_key_linking.yml</info>
        <!--Sigma Rule Author: Kutepov Anton, oscd.community-->
        <!--Description: Detects COM object hijacking via TreatAs subkey-->
        <!--Date: 2019/10/23-->
        <!--Status: experimental-->
        <!--ID: 9b0f8a61-91b2-464f-aceb-0527e0a45020-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Windows Registry Persistence COM Key Linking</description>
        <options>no_full_log</options>
        <group>registry_add,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)CreateKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKU\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Classes\\CLSID\\</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\TreatAs</field>
    </rule>
    <rule id="113376" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_sysinternals_eula_accepted.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects the usage of Sysinternals Tools due to accepteula key being added to Registry-->
        <!--Date: 2017/08/28-->
        <!--Status: experimental-->
        <!--ID: 25ffa65d-76d8-4da5-a832-3f2b0136e133-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Usage of Sysinternals Tools</description>
        <options>no_full_log</options>
        <group>windows,registry_add,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\EulaAccepted)$</field>
    </rule>
    <rule id="113377" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_mal_ursnif.yml</info>
        <!--Sigma Rule Author: megan201296-->
        <!--Description: Detects new registry key created by Ursnif malware.-->
        <!--Date: 2019/02/13-->
        <!--Status: experimental-->
        <!--ID: 21f17060-b282-4249-ade0-589ea3591558-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Ursnif</description>
        <options>no_full_log</options>
        <group>windows,registry_add,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\AppDataLow\\Software\\Microsoft\\</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet\ Explorer\\|\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\|\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\|\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\</field>
    </rule>
    <rule id="113378" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry_add/registry_add_sysinternals_sdelete_registry_keys.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection to trigger for the creation or modification of .*\Software\Sysinternals\SDelete registry keys. Indicators of the use of Sysinternals SDelete tool.-->
        <!--Date: 2020/05/02-->
        <!--Status: experimental-->
        <!--ID: 9841b233-8df8-4ad7-9133-b0b4402a9014-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Sysinternals SDelete Registry Keys</description>
        <options>no_full_log</options>
        <group>windows,registry_add,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\Software\\Sysinternals\\SDelete</field>
    </rule>
    <rule id="113379" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/wmi_event/sysmon_wmi_susp_encoded_scripts.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious encoded payloads in WMI Event Consumers-->
        <!--Date: 2021/09/01-->
        <!--Status: experimental-->
        <!--ID: 83844185-1c5b-45bc-bcf3-b5bf3084ca5b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Suspicious Encoded Scripts in a WMI Consumer</description>
        <options>no_full_log</options>
        <group>windows,wmi_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.destination" negate="no" type="pcre2">V3JpdGVQcm9jZXNzTWVtb3J5|VGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGU|VGhpcyBwcm9ncmFtIG11c3QgYmUgcnVuIHVuZGVyIFdpbjMy|dyaXRlUHJvY2Vzc01lbW9yeQ|IFRoaXMgcHJvZ3JhbSBjYW5ub3QgYmUgcnVuIGluIERPUyBtb2Rl|IFRoaXMgcHJvZ3JhbSBtdXN0IGJlIHJ1biB1bmRlciBXaW4zMg|Xcml0ZVByb2Nlc3NNZW1vcnk|ICBUaGlzIHByb2dyYW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZQ|ICBUaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2luMzI</field>
    </rule>
    <rule id="113380" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/wmi_event/sysmon_wmi_event_subscription.yml</info>
        <!--Sigma Rule Author: Tom Ueltschi (@c_APT_ure)-->
        <!--Description: Detects creation of WMI event subscription persistence method-->
        <!--Date: 2019/01/12-->
        <!--Status: test-->
        <!--ID: 0f06a3a5-6a09-413f-8743-e6cf35561297-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Event Subscription</description>
        <options>no_full_log</options>
        <group>windows,wmi_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)19|20|21</field>
    </rule>
    <rule id="113381" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/wmi_event/sysmon_wmi_susp_scripting.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious scripting in WMI Event Consumers-->
        <!--Date: 2019/04/15-->
        <!--Status: experimental-->
        <!--ID: fe21810c-2a8c-478f-8dd3-5a287fb2a0e0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>Suspicious Scripting in a WMI Consumer</description>
        <options>no_full_log</options>
        <group>windows,wmi_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)net\.webclient</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)\.downloadstring</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)net\.webclient</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)\.downloadfile</field>
        <field name="win.eventdata.destination" negate="no" type="pcre2">(?i)(?:\ iex\(|WScript\.shell|\ \-nop\ |\ \-noprofile\ |\ \-decode\ |\ \-enc\ )</field>
    </rule>
    <rule id="113382" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_hivenightmare_file_exports.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects files written by the different tools that exploit HiveNightmare-->
        <!--Date: 2021/07/23-->
        <!--Status: experimental-->
        <!--ID: 6ea858a8-ba71-4a12-b2cc-5d83312404c7-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
            <id>cve.2021.36934</id>
        </mitre>
        <description>Typical HiveNightmare SAM File Export</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\hive_sam_|\\SAM\-2021\-|\\SAM\-2022\-|\\SAM\-haxx|\\Sam\.save</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\temp\\sam</field>
    </rule>
    <rule id="113383" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_quarkspw_filedump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a dump file written by QuarksPwDump password dumper-->
        <!--Date: 2018/02/10-->
        <!--Status: test-->
        <!--ID: 847def9e-924d-4e90-b7c4-5f581395a2b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>QuarksPwDump Dump File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\SAM\-</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="113384" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_desktop_ini.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut), Tim Shelton (HAWK.IO)-->
        <!--Description: Detects unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.-->
        <!--Date: 2020/03/19-->
        <!--Status: test-->
        <!--ID: 81315b50-6b60-4d8f-9928-3466e1022515-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>Suspicious desktop.ini Action</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\desktop\.ini)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\|C:\\Program\ Files\\|C:\\Program\ Files\ \(x86\)\\)</field>
    </rule>
    <rule id="113385" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_mimikatz_kirbi_file_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of files that contain Kerberos tickets based on an extension used by the popular tool Mimikatz-->
        <!--Date: 2021/11/08-->
        <!--Status: test-->
        <!--ID: 9e099d99-44c2-42b6-a6d8-54c3545cab29-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
        </mitre>
        <description>Mimikatz Kirbi File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.kirbi)$</field>
    </rule>
    <rule id="113386" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_outlook_c2_macro_creation.yml</info>
        <!--Sigma Rule Author: @ScoubiMtl-->
        <!--Description: Detects the creation of a macro file for Outlook. Goes with win_outlook_c2_registry_key. VbaProject.OTM is explicitly mentioned in T1137. Particularly interesting if both events Registry & File Creation happens at the same time.-->
        <!--Date: 2021/04/05-->
        <!--Status: experimental-->
        <!--ID: 8c31f563-f9a7-450c-bfa8-35f8f32f1f61-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Outlook C2 Macro Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\Microsoft\\Outlook\\VbaProject\.OTM)$</field>
    </rule>
    <rule id="113387" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_gotoopener_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: 5d756aee-ad3e-4306-ad95-cb1abec48de2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>GoToAssist Temporary Installation Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist\ Remote\ Support\ Expert\\</field>
    </rule>
    <rule id="113388" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_rclone_exec_file.yml</info>
        <!--Sigma Rule Author: Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects Rclone config file being created-->
        <!--Date: 2021/05/26-->
        <!--Status: experimental-->
        <!--ID: 34986307-b7f4-49be-92f3-e7a4d01ac5db-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>Rclone Config File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i):\\Users\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\\.config\\rclone\\</field>
    </rule>
    <rule id="113389" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_cve_2021_31979_cve_2021_33771_exploits.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum-->
        <!--Date: 2021/07/16-->
        <!--Status: experimental-->
        <!--ID: ad7085ac-92e4-4b76-8ce2-276d2c0e68ef-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1566</id>
            <id>attack.t1203</id>
            <id>cve.2021.33771</id>
            <id>cve.2021.31979</id>
        </mitre>
        <description>CVE-2021-31979 CVE-2021-33771 Exploits by Sourgum</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\physmem\.sys|C:\\\\Windows\\\\System32\\IME\\IMEJP\\imjpueact\.dll|C:\\\\Windows\\\\system32\\ime\\IMETC\\IMTCPROT\.DLL|C:\\\\Windows\\\\system32\\ime\\SHARED\\imecpmeid\.dll|C:\\\\Windows\\\\system32\\config\\spp\\ServiceState\\Recovery\\pac\.dat|C:\\\\Windows\\\\system32\\config\\cy\-GB\\Setup\\SKB\\InputMethod\\TupTask\.dat|C:\\\\Windows\\\\system32\\config\\config\\startwus\.dat|C:\\\\Windows\\\\system32\\ime\\SHARED\\WimBootConfigurations\.ini|C:\\\\Windows\\\\system32\\ime\\IMEJP\\WimBootConfigurations\.ini|C:\\\\Windows\\\\system32\\ime\\IMETC\\WimBootConfigurations\.ini</field>
    </rule>
    <rule id="113390" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_sam_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of files that look like exports of the local SAM (Security Account Manager)-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: 4e87b8e2-2ee9-4b2a-a715-4727d297ece0-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>SAM Dump File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\Temp\\sam|\\sam\.sav|\\Intel\\sam|\\sam\.hive|\\Perflogs\\sam|\\ProgramData\\sam|\\Users\\Public\\sam|\\AppData\\Local\\sam|\\AppData\\Roaming\\sam|_ShadowSteal\.zip|\\Documents\\SAM\.export)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)c:\\sam</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\hive_sam_|\\sam\.save|\\sam\.export|\\\~reg_sam\.save|\\sam_backup|\\sam\.bck|\\sam\.backup</field>
    </rule>
    <rule id="113391" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_pingback_backdoor.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: 2bd63d53-84d4-4210-80ff-bf0658f1bf78-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Pingback Backdoor</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:updata\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\oci\.dll</field>
    </rule>
    <rule id="113392" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_suspicious_powershell_profile_create.yml</info>
        <!--Sigma Rule Author: HieuTT35-->
        <!--Description: Detects a change in profile.ps1 of the Powershell profile-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b5b78988-486d-4a80-b991-930eff3ff8bf-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.013</id>
        </mitre>
        <description>Powershell Profile.ps1 Modification</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\My\ Documents\\PowerShell\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\profile\.ps1</field>
    </rule>
    <rule id="113393" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_suspicious_powershell_profile_create.yml</info>
        <!--Sigma Rule Author: HieuTT35-->
        <!--Description: Detects a change in profile.ps1 of the Powershell profile-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b5b78988-486d-4a80-b991-930eff3ff8bf-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.013</id>
        </mitre>
        <description>Powershell Profile.ps1 Modification</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\WindowsPowerShell\\v1\.0\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\profile\.ps1</field>
    </rule>
    <rule id="113394" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_access_susp_unattend_xml.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process
-->
        <!--Date: 2021/12/19-->
        <!--Status: experimental-->
        <!--ID: 1a3d42dd-3763-46b9-8025-b5f17f340dfb-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Suspicious Unattend.xml File Access</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\unattend\.xml)$</field>
    </rule>
    <rule id="113395" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_ntfs_reparse_point.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 7fff6773-2baa-46de-a24a-b6eec1aba2d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using NTFS Reparse Point - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\api\-ms\-win\-core\-kernel32\-legacy\-l1\.DLL)$</field>
    </rule>
    <rule id="113396" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_ntds_exfil_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious creations of files with names used in various tools that export the NTDS.DIT for exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: experimental-->
        <!--ID: 3a8da4e0-36c1-40d2-8b29-b3e890d5172a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious NTDS Exfil Filename Patterns</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\All\.cab|\.ntds\.cleartext)$</field>
    </rule>
    <rule id="113397" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_creation_new_shim_database.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.
-->
        <!--Date: 2021/12/29-->
        <!--Status: experimental-->
        <!--ID: ee63c85c-6d51-4d12-ad09-04e25877a947-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>New Shim Database Created in the Default Directory</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.sdb)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\\\Windows\\\\apppatch\\Custom\\</field>
    </rule>
    <rule id="113398" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_procexplorer_driver_created_in_tmp_folder.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects the creation of the PROCEXP152.sys file in the application-data local temporary folder. This driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: 3da70954-0f2c-4103-adff-b7440368f50e-->
        <mitre>
            <id>attack.t1562.001</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PROCEXP152.sys File Created In TMP</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:PROCEXP152\.sys)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\procexp64\.exe|\\procexp\.exe|\\procmon64\.exe|\\procmon\.exe</field>
    </rule>
    <rule id="113399" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_hktl_createminidump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine-->
        <!--Date: 2019/12/22-->
        <!--Status: deprecated-->
        <!--ID: db2110f3-479d-42a6-94fb-d35bc1e46492-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>CreateMiniDump Hacktool</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\lsass\.dmp)$</field>
    </rule>
    <rule id="113400" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_hktl_nppspy.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of NPPSpy hacktool that stores cleartext passwords of users that logged in to a local file-->
        <!--Date: 2021/11/29-->
        <!--Status: experimental-->
        <!--ID: cad1fe90-2406-44dc-bd03-59d0b58fe722-->
        <mitre>
            <id>attack.credential_access</id>
        </mitre>
        <description>NPPSpy Hacktool Usage</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\NPPSpy\.txt|\\NPPSpy\.dll)$</field>
    </rule>
    <rule id="113401" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_csharp_compile_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: When C# is compiled dynamically, a .cmdline file will be created as a part of the process.
Certain processes are not typically observed compiling C# code, but can do so without touching disk.
This can be used to unpack a payload for execution
-->
        <!--Date: 2022/01/09-->
        <!--Status: experimental-->
        <!--ID: e4a74e34-ecde-4aab-b2fb-9112dd01aed0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic C Sharp Compile Artefact</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.cmdline)$</field>
    </rule>
    <rule id="113402" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_screenconnect_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: fec96f39-988b-4586-b746-b93d59fd1922-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>ScreenConnect Temporary Installation Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Bin\\ScreenConnect\.</field>
    </rule>
    <rule id="113403" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_detect_powerup_dllhijacking.yml</info>
        <!--Sigma Rule Author: Subhash Popuri (@pbssubhash)-->
        <!--Description: Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation. In it's default mode, it builds a self deleting .bat file which executes malicious command. The detection rule relies on creation of the malicious bat file (debug.bat by default).-->
        <!--Date: 2021/08/21-->
        <!--Status: experimental-->
        <!--ID: 602a1f13-c640-4d73-b053-be9a2fa58b96-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Powerup Write Hijack DLL</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat)$</field>
    </rule>
    <rule id="113404" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_macro_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: A office file with macro is created from a commandline or a script-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: b1c50487-1967-4315-a026-6491686d860e-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Dump Office Macro Files from Commandline</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.docm|\.dotm|\.xlsm|\.xltm|\.potm|\.pptm|\.pptx)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe)$</field>
    </rule>
    <rule id="113405" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_pcre_net_temp_file.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects processes creating temp files related to PCRE.NET package-->
        <!--Date: 2020/10/29-->
        <!--Status: experimental-->
        <!--ID: 6e90ae7a-7cd3-473f-a035-4ebb72d961da-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>PCRE.NET Package Temp Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\</field>
    </rule>
    <rule id="113406" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_ieinstal.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: bdd8157d-8e85-4397-bb82-f06cc9c71dbb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IEInstal - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\Program\ Files\\Internet\ Explorer\\IEInstal\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:consent\.exe)$</field>
    </rule>
    <rule id="113407" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_mal_vhd_download.yml</info>
        <!--Sigma Rule Author: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'-->
        <!--Description: Malware can use mountable Virtual Hard Disk .vhd file to encapsulate payloads and evade security controls-->
        <!--Date: 2021/10/25-->
        <!--Status: test-->
        <!--ID: 8468111a-ef07-4654-903b-b863a80bbc95-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Suspicious VHD Image Download From Browser</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:chrome\.exe|firefox\.exe|microsoftedge\.exe|microsoftedgecp\.exe|msedge\.exe|iexplorer\.exe|brave\.exe|opera\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.vhd</field>
    </rule>
    <rule id="113408" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_win_cscript_wscript_dropper.yml</info>
        <!--Sigma Rule Author: Tim Shelton-->
        <!--Description: Detects a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe-->
        <!--Date: 2022/01/10-->
        <!--Status: experimental-->
        <!--ID: 002bdb95-0cf1-46a6-9e08-d38c128a6127-->
        <description>WScript or CScript Dropper</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\|C:\\ProgramData)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.jse|\.vbe|\.js|\.vba|\.vbs)$</field>
    </rule>
    <rule id="113409" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_apt_unidentified_nov_18.yml</info>
        <!--Sigma Rule Author: @41thexplorer, Microsoft Defender ATP-->
        <!--Description: A sigma rule detecting an unidetefied attacker who used phishing emails to target high profile orgs on November 2018. The Actor shares some TTPs with YYTRIUM/APT29 campaign in 2016.-->
        <!--Date: 2018/11/20-->
        <!--Status: stable-->
        <!--ID: 3a3f81ca-652c-482b-adeb-b1c804727f74-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Unidentified Attacker November 2018</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)ds7002\.lnk</field>
    </rule>
    <rule id="113410" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_winrm_awl_bypass.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: d353dac0-1b41-46c2-820c-d7d2561fc6ed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:WsmPty\.xsl|WsmTxt\.xsl)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\)</field>
    </rule>
    <rule id="113411" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_tool_psexec.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: 259e5a6a-b8d2-4c38-86e2-26c5e651361d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Tool Execution</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\PSEXESVC\.exe)$</field>
    </rule>
    <rule id="113412" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_task_write.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of tasks from processes executed from suspicious locations-->
        <!--Date: 2021/11/16-->
        <!--Status: experimental-->
        <!--ID: 80e1f67a-4596-4351-98f5-a9c3efabac95-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.t1053</id>
        </mitre>
        <description>Suspicious Scheduled Task Write to System32 Tasks</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\\\Windows\\\\System32\\Tasks</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\AppData\\|C:\\PerfLogs|\\\\Windows\\\\System32\\config\\systemprofile</field>
    </rule>
    <rule id="113413" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_winword_cve_2021_40444.yml</info>
        <!--Sigma Rule Author: Florian Roth, Sittikorn S-->
        <!--Description: Detects file creation patterns noticeable during the exploitation of CVE-2021-40444-->
        <!--Date: 2021/09/10-->
        <!--Status: experimental-->
        <!--ID: 60c0a111-787a-4e8a-9262-ee485f3ef9d5-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587</id>
        </mitre>
        <description>Suspicious Word Cab File Write CVE-2021-40444</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\winword\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.cab)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\\\Windows\\\\INetCache</field>
    </rule>
    <rule id="113414" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_winword_cve_2021_40444.yml</info>
        <!--Sigma Rule Author: Florian Roth, Sittikorn S-->
        <!--Description: Detects file creation patterns noticeable during the exploitation of CVE-2021-40444-->
        <!--Date: 2021/09/10-->
        <!--Status: experimental-->
        <!--ID: 60c0a111-787a-4e8a-9262-ee485f3ef9d5-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587</id>
        </mitre>
        <description>Suspicious Word Cab File Write CVE-2021-40444</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\winword\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.inf</field>
    </rule>
    <rule id="113415" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_mal_adwind.yml</info>
        <!--Sigma Rule Author: Florian Roth, Tom Ueltschi, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects javaw.exe in AppData folder as used by Adwind / JRAT-->
        <!--Date: 2017/11/10-->
        <!--Status: experimental-->
        <!--ID: 0bcfabcb-7929-47f4-93d6-b33fb67d34d1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Adwind RAT / JRAT</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Roaming\\Oracle\\bin\\java</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Retrive</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.vbs</field>
    </rule>
    <rule id="113416" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_ghostpack_safetykatz.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects possible SafetyKatz Behaviour-->
        <!--Date: 2018/07/24-->
        <!--Status: test-->
        <!--ID: e074832a-eada-4fd7-94a1-10642b130e16-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Detection of SafetyKatz</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\Temp\\debug\.bin)$</field>
    </rule>
    <rule id="113417" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_creation_unquoted_service_path.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may execute their own malicious payloads by hijacking vulnerable file path references.
Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: 8c3c76ca-8f8b-4b1d-aaf3-81aebcd367c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>Creation Exe for Service with Unquoted Path</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\program\.exe</field>
    </rule>
    <rule id="113418" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_moriya_rootkit.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report-->
        <!--Date: 2021/05/06-->
        <!--Status: experimental-->
        <!--ID: a1507d71-0b60-44f6-b17c-bf53220fdd88-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Moriya Rootkit</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\drivers\\MoriyaStreamWatchmen\.sys</field>
    </rule>
    <rule id="113419" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_outlook_newform.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects the creation of new Outlook form which can contain malicious code-->
        <!--Date: 2021/06/10-->
        <!--Status: experimental-->
        <!--ID: c3edc6a5-d9d4-48d8-930e-aab518390917-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.003</id>
        </mitre>
        <description>Outlook Form Installation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\outlook\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\appdata\\local\\microsoft\\FORMS\\</field>
    </rule>
    <rule id="113420" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_system_interactive_powershell.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of files that indicator an interactive use of PowerShell in the SYSTEM user context-->
        <!--Date: 2021/12/07-->
        <!--Status: experimental-->
        <!--ID: 5b40a734-99b6-4b98-a1d0-1cea51a08ab2-->
        <description>Suspicious Interactive PowerShell as SYSTEM</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\\\Windows\\\\PowerShell\\PSReadLine\\ConsoleHost_history\.txt|C:\\\\Windows\\\\System32\\config\\systemprofile\\AppData\\\\Local\\Microsoft\\\\Windows\\\\PowerShell\\StartupProfileData\-Interactive</field>
    </rule>
    <rule id="113421" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_desktopimgdownldr_file.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr file creation that stores a file to a suspicious location or contains a file with a suspicious extension-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fc4f4817-0c53-4683-a4ee-b17a64bc1039-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Target File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:svchost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Personalization\\LockScreenImage\\</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\.jpg|\.jpeg|\.png</field>
    </rule>
    <rule id="113422" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_consent_comctl32.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 62ed5b55-f991-406a-85d9-e8e8fdf18789-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Consent and Comctl32 - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\consent\.exe\.@)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\comctl32\.dll)$</field>
    </rule>
    <rule id="113423" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_cve_2021_41379_msi_lpe.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects signs of the exploitation of LPE CVE-2021-41379 that include an msiexec process that creates an elevation_service.exe file-->
        <!--Date: 2021/11/22-->
        <!--Status: experimental-->
        <!--ID: 3be82d5d-09fe-4d6a-a275-0d40d234d324-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>InstallerFileTakeOver LPE CVE-2021-41379 File Create Event</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msiexec\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Program\ Files\ \(x86\)\\Microsoft\\Edge\\Application)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\elevation_service\.exe)$</field>
    </rule>
    <rule id="113424" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_ntds_dit.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious processes that write (copy) a Active Directory database (ntds.dit) file-->
        <!--Date: 2022/01/11-->
        <!--Status: experimental-->
        <!--ID: 11b1ed55-154d-4e82-8ad7-83739298f720-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Writes Ntds.dit</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\ntds\.dit)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\cmd\.exe)$</field>
    </rule>
    <rule id="113425" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_writing_local_admin_share.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Aversaries may use to interact with a remote network share using Server Message Block (SMB).
This technique is used by post-exploitation frameworks.
-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 4aafb0fa-bff5-4b9d-b99e-8093e659c65f-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Writing Local Admin Share</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\\\127\.0\.0</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\ADMIN\$\\</field>
    </rule>
    <rule id="113426" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_exchange_aspx_write.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious activity in which the MSExchangeMailboxReplication process writes .asp and .apsx files to disk, which could be a sign of ProxyShell exploitation-->
        <!--Date: 2022/02/25-->
        <!--Status: experimental-->
        <!--ID: 7280c9f3-a5af-45d0-916a-bc01cb4151c9-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Suspicious MSExchangeMailboxReplication ASPX Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\MSExchangeMailboxReplication\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.aspx|\.asp)$</field>
    </rule>
    <rule id="113427" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_wmiprvse_wbemcomn_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\Windows\System32\wbem\` directory over the network and loading it for a WMI DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 614a7e17-5643-4d89-b6fe-f9df1a79641c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Wmiprvse Wbemcomn DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\wbem\\wbemcomn\.dll)$</field>
    </rule>
    <rule id="113428" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_clr_logs.yml</info>
        <!--Sigma Rule Author: omkar72, oscd.community, Wojciech Lesicki-->
        <!--Description: Detects suspicious .NET assembly executions. Could detect using Cobalt Strike's command execute-assembly.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: e4b63079-6198-405c-abd7-3fe8b0ce3263-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspcious CLR Logs Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Microsoft\\CLR</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\UsageLogs\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)mshta|cscript|wscript|regsvr32|wmic|rundll32|svchost</field>
    </rule>
    <rule id="113429" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_cve_2021_1675_printspooler.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the default filename used in PoC code against print spooler vulnerability CVE-2021-1675-->
        <!--Date: 2021/06/29-->
        <!--Status: experimental-->
        <!--ID: 2131cfb3-8c12-45e8-8fa0-31f5924e9f07-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.resource_development</id>
            <id>attack.t1587</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>CVE-2021-1675 Print Spooler Exploitation Filename Pattern</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\spool\\drivers\\x64\\3\\old\\1\\123</field>
    </rule>
    <rule id="113430" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_powershell_exploit_scripts.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects the creation of known powershell scripts for exploitation-->
        <!--Date: 2018/04/07-->
        <!--Status: test-->
        <!--ID: f331aa1f-8c53-4fc3-b083-cc159bc971cb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Commandlet Names</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\Invoke\-DllInjection\.ps1|\\Invoke\-WmiCommand\.ps1|\\Get\-GPPPassword\.ps1|\\Get\-Keystrokes\.ps1|\\Get\-VaultCredential\.ps1|\\Invoke\-CredentialInjection\.ps1|\\Invoke\-Mimikatz\.ps1|\\Invoke\-NinjaCopy\.ps1|\\Invoke\-TokenManipulation\.ps1|\\Out\-Minidump\.ps1|\\VolumeShadowCopyTools\.ps1|\\Invoke\-ReflectivePEInjection\.ps1|\\Get\-TimedScreenshot\.ps1|\\Invoke\-UserHunter\.ps1|\\Find\-GPOLocation\.ps1|\\Invoke\-ACLScanner\.ps1|\\Invoke\-DowngradeAccount\.ps1|\\Get\-ServiceUnquoted\.ps1|\\Get\-ServiceFilePermission\.ps1|\\Get\-ServicePermission\.ps1|\\Invoke\-ServiceAbuse\.ps1|\\Install\-ServiceBinary\.ps1|\\Get\-RegAutoLogon\.ps1|\\Get\-VulnAutoRun\.ps1|\\Get\-VulnSchTask\.ps1|\\Get\-UnattendedInstallFile\.ps1|\\Get\-WebConfig\.ps1|\\Get\-ApplicationHost\.ps1|\\Get\-RegAlwaysInstallElevated\.ps1|\\Get\-Unconstrained\.ps1|\\Add\-RegBackdoor\.ps1|\\Add\-ScrnSaveBackdoor\.ps1|\\Gupt\-Backdoor\.ps1|\\Invoke\-ADSBackdoor\.ps1|\\Enabled\-DuplicateToken\.ps1|\\Invoke\-PsUaCme\.ps1|\\Remove\-Update\.ps1|\\Check\-VM\.ps1|\\Get\-LSASecret\.ps1|\\Get\-PassHashes\.ps1|\\Show\-TargetScreen\.ps1|\\Port\-Scan\.ps1|\\Invoke\-PoshRatHttp\.ps1|\\Invoke\-PowerShellTCP\.ps1|\\Invoke\-PowerShellWMI\.ps1|\\Add\-Exfiltration\.ps1|\\Add\-Persistence\.ps1|\\Do\-Exfiltration\.ps1|\\Start\-CaptureServer\.ps1|\\Invoke\-ShellCode\.ps1|\\Get\-ChromeDump\.ps1|\\Get\-ClipboardContents\.ps1|\\Get\-FoxDump\.ps1|\\Get\-IndexedItem\.ps1|\\Get\-Screenshot\.ps1|\\Invoke\-Inveigh\.ps1|\\Invoke\-NetRipper\.ps1|\\Invoke\-EgressCheck\.ps1|\\Invoke\-PostExfil\.ps1|\\Invoke\-PSInject\.ps1|\\Invoke\-RunAs\.ps1|\\MailRaider\.ps1|\\New\-HoneyHash\.ps1|\\Set\-MacAttribute\.ps1|\\Invoke\-DCSync\.ps1|\\Invoke\-PowerDump\.ps1|\\Exploit\-Jboss\.ps1|\\Invoke\-ThunderStruck\.ps1|\\Invoke\-VoiceTroll\.ps1|\\Set\-Wallpaper\.ps1|\\Invoke\-InveighRelay\.ps1|\\Invoke\-PsExec\.ps1|\\Invoke\-SSHCommand\.ps1|\\Get\-SecurityPackages\.ps1|\\Install\-SSP\.ps1|\\Invoke\-BackdoorLNK\.ps1|\\PowerBreach\.ps1|\\Get\-SiteListPassword\.ps1|\\Get\-System\.ps1|\\Invoke\-BypassUAC\.ps1|\\Invoke\-Tater\.ps1|\\Invoke\-WScriptBypassUAC\.ps1|\\PowerUp\.ps1|\\PowerView\.ps1|\\Get\-RickAstley\.ps1|\\Find\-Fruit\.ps1|\\HTTP\-Login\.ps1|\\Find\-TrustedDocuments\.ps1|\\Invoke\-Paranoia\.ps1|\\Invoke\-WinEnum\.ps1|\\Invoke\-ARPScan\.ps1|\\Invoke\-PortScan\.ps1|\\Invoke\-ReverseDNSLookup\.ps1|\\Invoke\-SMBScanner\.ps1|\\Invoke\-Mimikittenz\.ps1)$</field>
    </rule>
    <rule id="113431" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_msconfig_gui.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 41bb431f-56d8-4691-bb56-ed34e390906f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using MSConfig Token Modification - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\pkgmgr\.exe)$</field>
    </rule>
    <rule id="113432" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_anydesk_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: 0b9ad457-2554-44c1-82c2-d56a99c42377-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Anydesk Temporary Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Roaming\\AnyDesk\\user\.conf|\\AppData\\Roaming\\AnyDesk\\system\.conf</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.temp)$</field>
    </rule>
    <rule id="113433" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_colorcpl.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once executed, colorcpl.exe will copy the arbitrary file to c:\windows\system32\spool\drivers\color\-->
        <!--Date: 2022/01/21-->
        <!--Status: experimental-->
        <!--ID: e15b518d-b4ce-4410-a9cd-501f23ce4a18-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Suspicious Creation with Colorcpl</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\colorcpl\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.icm|\.gmmp|\.cdmp|\.camp)$</field>
    </rule>
    <rule id="113434" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_redmimicry_winnti_filedrop.yml</info>
        <!--Sigma Rule Author: Alexander Rausch-->
        <!--Description: Detects actions caused by the RedMimicry Winnti playbook-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: 130c9e58-28ac-4f83-8574-0a4cc913b97e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>RedMimicry Winnti Playbook Dropped File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)gthread\-3\.6\.dll|sigcmm\-2\.4\.dll|\\\\Windows\\\\Temp\\tmp\.bat</field>
    </rule>
    <rule id="113435" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_startup_folder_file_write.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 2aa0a6b4-a865-495b-ab51-c28249537b75-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Startup Folder File Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)ProgramData\\Microsoft\\\\Windows\\\\Start\ Menu\\Programs\\StartUp</field>
    </rule>
    <rule id="113436" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_lsass_memory_dump_file_creation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: LSASS memory dump creation using operating systems utilities. Procdump will use process name in output file if no name is specified-->
        <!--Date: 2019/10/22-->
        <!--Status: experimental-->
        <!--ID: 5e3d3601-0662-4af0-b1d2-36a05e90c40a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Memory Dump File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)lsass</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:dmp)$</field>
    </rule>
    <rule id="113437" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_tsclient_filewrite_startup.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects the usage of tsclient share to place a backdoor on the RDP source machine's startup folder-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: 52753ea4-b3a0-4365-910d-36cff487b789-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Hijack Legit RDP Session to Move Laterally</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mstsc\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\Start\ Menu\\Programs\\Startup\\</field>
    </rule>
    <rule id="113438" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_mimimaktz_memssp_log_file.yml</info>
        <!--Sigma Rule Author: David ANDRE-->
        <!--Description: Detects Mimikatz MemSSP default log file creation-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: 034affe8-6170-11ec-844f-0f78aa0c4d66-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Mimikatz MemSSP Default Log File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:mimilsa\.log)$</field>
    </rule>
    <rule id="113439" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_cred_dump_tools_dropped_files.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Files with well-known filenames (parts of credential dump software or files produced by them) creation-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 8fbf3271-1ef6-4e94-8210-03c2317947f6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
        </mitre>
        <description>Cred Dump Tools Dropped Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\pwdump|\\kirbi|\\pwhashes|\\wce_ccache|\\wce_krbtkts|\\fgdump\-log</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\test\.pwd|\\lsremora64\.dll|\\lsremora\.dll|\\fgexec\.exe|\\wceaux\.dll|\\SAM\.out|\\SECURITY\.out|\\SYSTEM\.out|\\NTDS\.out|\\DumpExt\.dll|\\DumpSvc\.exe|\\cachedump64\.exe|\\cachedump\.exe|\\pstgdump\.exe|\\servpw\.exe|\\servpw64\.exe|\\pwdump\.exe|\\procdump64\.exe)$</field>
    </rule>
    <rule id="113440" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_wmi_persistence_script_event_consumer_write.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects file writes of WMI script event consumer-->
        <!--Date: 2018/03/07-->
        <!--Status: test-->
        <!--ID: 33f41cdd-35ac-4ba8-814b-c6a4244a1ad4-->
        <mitre>
            <id>attack.t1546.003</id>
            <id>attack.persistence</id>
        </mitre>
        <description>WMI Persistence - Script Event Consumer File Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\wbem\\scrcons\.exe</field>
    </rule>
    <rule id="113441" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_desktop_txt.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Ransomware create txt file in the user Desktop-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: caf02a0a-1e1c-4552-9b48-5e070bd88d11-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Creation TXT File in User Desktop</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Users\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Desktop\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.txt)$</field>
    </rule>
    <rule id="113442" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_advanced_ip_scanner.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.-->
        <!--Date: 2020/05/12-->
        <!--Status: experimental-->
        <!--ID: fed85bf9-e075-4280-9159-fbe8a023d6fa-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Advanced IP Scanner</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\Advanced\ IP\ Scanner\ 2</field>
    </rule>
    <rule id="113443" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_winsat.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 155dbf56-e0a4-4dd0-8905-8a98705045e8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Abusing Winsat Path Parsing - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\system32\\winsat\.exe|\\AppData\\Local\\Temp\\system32\\winmm\.dll)$</field>
    </rule>
    <rule id="113444" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_susp_pfx_file_creation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A general detection for processes creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: dca1b3e8-e043-4ec8-85d7-867f334b5724-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Suspicious PFX File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.pfx)$</field>
    </rule>
    <rule id="113445" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_office_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects add-ins that load when Microsoft Word or Excel starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Microsoft Office Add-In Loading</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Microsoft\\Word\\Startup\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.wll)$</field>
    </rule>
    <rule id="113446" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_office_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects add-ins that load when Microsoft Word or Excel starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Microsoft Office Add-In Loading</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Microsoft\\Excel\\Startup\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xll)$</field>
    </rule>
    <rule id="113447" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_office_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects add-ins that load when Microsoft Word or Excel starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Microsoft Office Add-In Loading</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Microsoft\\Addins\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xlam|\.xla)$</field>
    </rule>
    <rule id="113448" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_mal_octopus_scanner.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects Octopus Scanner Malware.-->
        <!--Date: 2020/06/09-->
        <!--Status: test-->
        <!--ID: 805c55d9-31e6-4846-9878-c34c75054fe9-->
        <mitre>
            <id>attack.t1195</id>
            <id>attack.t1195.001</id>
        </mitre>
        <description>Octopus Scanner Malware</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Microsoft\\Cache134\.dat|\\AppData\\Local\\Microsoft\\ExplorerSync\.db)$</field>
    </rule>
    <rule id="113449" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_install_teamviewer_desktop.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: TeamViewer_Desktop.exe is create during install-->
        <!--Date: 2022/01/28-->
        <!--Status: experimental-->
        <!--ID: 9711de76-5d4f-4c50-a94f-21e4e8f8384d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Installation of TeamViewer Desktop</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\TeamViewer_Desktop\.exe)$</field>
    </rule>
    <rule id="113450" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_iso_file_recent.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks. This can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: 4358e5a5-7542-4dcb-b9f3-87667371839b-->
        <description>ISO or Image Mount Indicator in Recent Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.iso\.lnk|\.img\.lnk|\.vhd\.lnk|\.vhdx\.lnk)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\Recent\\</field>
    </rule>
    <rule id="113451" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_cve_2021_26858_msexchange.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for | creation of non-standard files on disk by Exchange Server&#8217;s Unified Messaging service | which could indicate dropping web shells or other malicious content-->
        <!--Date: 2021/03/03-->
        <!--Status: experimental-->
        <!--ID: b06335b3-55ac-4b41-937e-16b7f5d57dfd-->
        <mitre>
            <id>attack.t1203</id>
            <id>attack.execution</id>
            <id>cve.2021.26858</id>
        </mitre>
        <description>CVE-2021-26858 Exchange Exploitation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:UMWorkerProcess\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:CacheCleanup\.bin|\.txt|\.LOG|\.cfg|cleanup\.bin)$</field>
    </rule>
    <rule id="113452" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_hack_dumpert.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory-->
        <!--Date: 2020/02/04-->
        <!--Status: experimental-->
        <!--ID: 93d94efc-d7ad-4161-ad7d-1638c4f908d8-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Dumpert Process Dumper</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Temp\\dumpert\.dmp</field>
    </rule>
    <rule id="113453" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_powershell_startup_shortcuts.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE-->
        <!--Description: Attempts to detect PowerShell writing startup shortcuts. This procedure was highlighted in Red Canary Intel Insights Oct. 2021, "We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence. Accordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats. In the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL"-->
        <!--Date: 2021/10/24-->
        <!--Status: experimental-->
        <!--ID: 92fa78e7-4d39-45f1-91a3-8b23f3f1088d-->
        <mitre>
            <id>attack.registry_run_keys_/_startup_folder</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>PowerShell Writing Startup Shortcuts</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\start\ menu\\programs\\startup\\</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.lnk)$</field>
    </rule>
    <rule id="113454" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file_event/file_event_win_uac_bypass_dotnet_profiler.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 93a19907-d4f9-4deb-9f91-aac4692776a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using .NET Code Profiler on MMC</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\Users\\)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\pe386\.dll)$</field>
    </rule>
    <rule id="113455" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_by_ordinal.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious calls of DLLs in rundll32.dll exports by ordinal-->
        <!--Date: 2019/10/22-->
        <!--Status: stable-->
        <!--ID: e79a9e79-eb72-4e78-a628-0e7e8f59e89c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Call by Ordinal</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i),\#|,\ \#|\.dll\ \#|\.ocx\ \#</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)EDGEHTML\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\#141</field>
    </rule>
    <rule id="113456" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_diantz_ads.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Compress taget file into a cab file stored in the Alternate Data Stream (ADS) of the target file.-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: 6b369ced-4b1d-48f1-b427-fdc0de0790bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Suspicious Diantz Alternate Data Stream Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)diantz\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^\\\\]</field>
    </rule>
    <rule id="113457" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_modification.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable security tools to avoid possible detection of their tools and activities by stopping antivirus service-->
        <!--Date: 2021/07/07-->
        <!--Status: experimental-->
        <!--ID: 6783aa9e-0dc3-49d4-a94a-8b39c5fd700b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Stop Or Remove Antivirus Service</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Stop\-Service\ |Remove\-Service\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ McAfeeDLPAgentService|\ Trend\ Micro\ Deep\ Security\ Manager|\ TMBMServer</field>
    </rule>
    <rule id="113458" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_copying_sensitive_files_with_credential_data.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Files with well-known filenames (sensitive files with credential data) copying-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: e7be6119-fc37-43f0-ad4f-1f3f99be2f9f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
            <id>car.2013-07-001</id>
            <id>attack.s0404</id>
        </mitre>
        <description>Copying Sensitive Files with Credential Data</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\esentutl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:vss|\ /m\ |\ /y\ )</field>
    </rule>
    <rule id="113459" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_registration_via_cscript.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects when the registration of a VSS/VDS Provider as a COM+ application.-->
        <!--Date: 2021/11/05-->
        <!--Status: experimental-->
        <!--ID: 28c8f68b-098d-45af-8d43-8089f3e35403-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Registration via cscript.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-register</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Windows\ Kits\\10\\bin\\10\.0\.22000\.0\\x64|\\Windows\ Kits\\10\\bin\\10\.0\.19041\.0\\x64|\\Windows\ Kits\\10\\bin\\10\.0\.17763\.0\\x64</field>
    </rule>
    <rule id="113460" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_cloudhopper.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious file execution by wscript and cscript-->
        <!--Date: 2017/04/07-->
        <!--Status: test-->
        <!--ID: 966e4016-627f-44f7-8341-f394905c361f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.g0045</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>WMIExec VBS Script</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/shell</field>
    </rule>
    <rule id="113461" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_winsat.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 7a01183d-71a2-46ad-ad5c-acd989ac1793-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Abusing Winsat Path Parsing - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\system32\\winsat\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\Windows\ \\system32\\winsat\.exe</field>
    </rule>
    <rule id="113462" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dnx.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Execute C# code located in the consoleapp folder-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 81ebd28b-9607-4478-bf06-974ed9d53ed7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Application Whitelisting Bypass via Dnx.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dnx\.exe)$</field>
    </rule>
    <rule id="113463" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_findstr_lnk.yml</info>
        <!--Sigma Rule Author: Trent Liffick-->
        <!--Description: Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack-->
        <!--Date: 2020/05/01-->
        <!--Status: test-->
        <!--ID: 33339be3-148b-4e16-af56-ad16ec6c7e7b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1202</id>
            <id>attack.t1027.003</id>
        </mitre>
        <description>Findstr Launching .lnk File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\findstr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.lnk)$</field>
    </rule>
    <rule id="113464" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_redir_local_admin_share.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious output redirection to the local admins share as often found in malicious scripts or hacktool stagers-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: ab9e3b40-0c85-4ba1-aede-455d226fd124-->
        <description>Suspicious Redirection to Local Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;\ \\\\\\\\127\.0\.0\.1\\\\admin\$|&gt;\ \\\\\\\\localhost\\\\admin\$</field>
    </rule>
    <rule id="113465" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_appdata_local_system.yml</info>
        <!--Sigma Rule Author: pH-T-->
        <!--Description: Detects the creation of a schtask that executes a file from C:\Users\<USER>\AppData\Local-->
        <!--Date: 2022/03/15-->
        <!--Status: experimental-->
        <!--ID: c5c00f49-b3f9-45a6-997e-cfdecc6e1967-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Schtasks Execution AppData Folder</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/RU\ "NT\ AUT</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\Local\\</field>
    </rule>
    <rule id="113466" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtasks_disable.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: 9ac94dc8-9042-493c-ba45-3b5e7c86b980-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Disable Important Scheduled Task</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Change</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TN</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/disable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\SystemRestore\\SR</field>
    </rule>
    <rule id="113467" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_high_integrity_sdclt.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 40f9af16-589d-4984-b78d-8c2aec023197-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>High Integrity Sdclt Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:sdclt\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High</field>
    </rule>
    <rule id="113468" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_install_quiet.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: 79a87aa6-e4bd-42fc-a5bb-5e6fbdcd62f5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>Suspicious Msiexec Quiet Install</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msiexec\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /q</field>
    </rule>
    <rule id="113469" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_fwd_3389.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community-->
        <!--Description: Detects netsh commands that configure a port forwarding of port 3389 used for RDP-->
        <!--Date: 2019/01/29-->
        <!--Status: test-->
        <!--ID: 782d6f3e-4c5d-4b8c-92a3-1d05fed72e63-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>Netsh RDP Port Forwarding</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)i</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ p</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)=3389</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ c</field>
    </rule>
    <rule id="113470" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_change_default_file_association.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 3d3aa6cd-6272-44d6-8afc-7e88dfef7061-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.001</id>
        </mitre>
        <description>Change Default File Association</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)assoc</field>
    </rule>
    <rule id="113471" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_nircmd.yml</info>
        <!--Sigma Rule Author: Florian Roth, Nasreddine Bencherchali @nas_bench-->
        <!--Description: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 4e2ed651-1906-4a59-a78a-18220fca1b22-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>NirCmd Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\nircmd\.exe|\\nircmdc\.exe)$</field>
    </rule>
    <rule id="113472" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_nircmd.yml</info>
        <!--Sigma Rule Author: Florian Roth, Nasreddine Bencherchali @nas_bench-->
        <!--Description: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 4e2ed651-1906-4a59-a78a-18220fca1b22-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>NirCmd Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ execmd\ |\ exec2\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ copy\ |\ del\ )</field>
    </rule>
    <rule id="113473" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbins_suspicious_driver_installed_by_pnputil.yml</info>
        <!--Sigma Rule Author: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger-->
        <!--Description: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin-->
        <!--Date: 2021/09/30-->
        <!--Status: experimental-->
        <!--ID: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
            <id>attack.t1547.006</id>
        </mitre>
        <description>Suspicious Driver Install by pnputil.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-i|/install|\-a|/add\-driver|\.inf</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\pnputil\.exe)$</field>
    </rule>
    <rule id="113474" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_csc_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData)-->
        <!--Date: 2019/08/24-->
        <!--Status: experimental-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Suspicious Csc.exe Source File Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\csc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\|\\\\Windows\\\\Temp\\</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\sdiagnhost\.exe|\\w3wp\.exe|\\choco\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\ProgramData\\Microsoft\\Windows\ Defender\ Advanced\ Threat\ Protection</field>
    </rule>
    <rule id="113475" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_winrm_execution.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects an attempt to execute code or create service on remote host via winrm.vbs.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Remote Code Execute via Winrm.vbs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)winrm</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)invoke\ Create\ wmicimv2/Win32_</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-r:http</field>
    </rule>
    <rule id="113476" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_abusing_windows_telemetry_for_persistence.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Windows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections. This binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run. The problem is, it will run any arbitrary command without restriction of location or type.-->
        <!--Date: 2020/09/29-->
        <!--Status: experimental-->
        <!--ID: f548a603-c9f2-4c89-b511-b089f7e94549-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
            <id>attack.t1053</id>
        </mitre>
        <description>Abusing Windows Telemetry For Persistence</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)schtasks</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Application\ Experience\\Microsoft\ Compatibility\ Appraiser</field>
    </rule>
    <rule id="113477" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_workfolders.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut)-->
        <!--Description: Detects using WorkFolders.exe to execute an arbitrary control.exe-->
        <!--Date: 2021/10/21-->
        <!--Status: experimental-->
        <!--ID: 0bbc6369-43e3-453d-9944-cae58821c173-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution via WorkFolders.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\control\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WorkFolders\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\control\.exe</field>
    </rule>
    <rule id="113478" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_csharp_console.yml</info>
        <!--Sigma Rule Author: Michael R. (@nahamike01)-->
        <!--Description: Detects the execution of CSharp interactive console by PowerShell-->
        <!--Date: 2020/03/08-->
        <!--Status: test-->
        <!--ID: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Suspicious Use of CSharp Interactive Console</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\csi\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csi\.exe</field>
    </rule>
    <rule id="113479" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_extrac32_ads.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Extract data from cab file and hide it in an alternate data stream-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: 4b13db67-0c45-40f1-aba8-66a1a7198a1e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Suspicious Extrac32 Alternate Data Stream Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)extrac32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^\\\\]</field>
    </rule>
    <rule id="113480" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_empire_launch.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious powershell command line parameters used in Empire-->
        <!--Date: 2019/04/20-->
        <!--Status: test-->
        <!--ID: 79f4ede3-402e-41c8-bc3e-ebbf5f162581-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Empire PowerShell Launch Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-NoP\ \-sta\ \-NonI\ \-W\ Hidden\ \-Enc\ |\ \-noP\ \-sta\ \-w\ 1\ \-enc\ |\ \-NoP\ \-NonI\ \-W\ Hidden\ \-enc\ |\ \-noP\ \-sta\ \-w\ 1\ \-enc|\ \-enc\ \ SQB|\ \-nop\ \-exec\ bypass\ \-EncodedCommand\ )</field>
    </rule>
    <rule id="113481" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_protocolhandler_suspicious_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Emulates attack via documents through protocol handler in Microsoft Office. On successful execution you should see Microsoft Word launch a blank file.-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>ProtocolHandler.exe Downloaded Suspicious File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\protocolhandler\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"ms\-word</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.docx"</field>
    </rule>
    <rule id="113482" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tor_browser.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of Tor or Tor-Browser to connect to onion routing networks-->
        <!--Date: 2022/02/20-->
        <!--Status: experimental-->
        <!--ID: 62f7c9bf-9135-49b2-8aeb-1e54a6ecc13c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.003</id>
        </mitre>
        <description>Tor Client or Tor Browser Use</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tor\.exe|\\Tor\ Browser\\Browser\\firefox\.exe)$</field>
    </rule>
    <rule id="113483" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ad_find_discovery.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe (https://github.com/blueteam0ps)-->
        <!--Description: AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.-->
        <!--Date: 2021/02/02-->
        <!--Status: test-->
        <!--ID: 9a132afa-654e-11eb-ae93-0242ac130002-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1018</id>
        </mitre>
        <description>AdFind Usage Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)domainlist|trustdmp|dcmodes|adinfo|\ dclist\ |computer_pwdnotreqd|objectcategory=|\-subnets\ \-f|name="Domain\ Admins"|\-sc\ u:|domainncs|dompol|\ oudmp\ |subnetdmp|gpodmp|fspdmp|users_noexpire|computers_active</field>
    </rule>
    <rule id="113484" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_download.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Jonhnathan Ribeiro-->
        <!--Description: Detects a Powershell process that contains download commands in its command line string-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Download from URL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net\.webclient\)\.</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)download</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)string\(|file\(</field>
    </rule>
    <rule id="113485" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_run_virtualbox.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.-->
        <!--Date: 2020/09/26-->
        <!--Status: experimental-->
        <!--ID: bab049ca-7471-4828-9024-38279a4c04da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.006</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Detect Virtualbox Driver Installation OR Starting Of VMs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VBoxRT\.dll,RTR3Init|VBoxC\.dll|VBoxDrv\.sys</field>
    </rule>
    <rule id="113486" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_run_virtualbox.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.-->
        <!--Date: 2020/09/26-->
        <!--Status: experimental-->
        <!--ID: bab049ca-7471-4828-9024-38279a4c04da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.006</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Detect Virtualbox Driver Installation OR Starting Of VMs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)startvm|controlvm</field>
    </rule>
    <rule id="113487" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: e9f55347-2928-4c06-88e5-1a7f8169942e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\\"\s+?\-f.*&amp;&amp;.*cmd.*\/c</field>
    </rule>
    <rule id="113488" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cmd_http_appdata.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 1ac8666b-046f-4201-8aba-1951aaec03a3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Command Line Execution with Suspicious URL and AppData Strings</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%AppData%</field>
    </rule>
    <rule id="113489" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_script_dropper.yml</info>
        <!--Sigma Rule Author: Margaritis Dimitrios (idea), Florian Roth (rule), oscd.community-->
        <!--Description: Detects wscript/cscript executions of scripts located in user directories-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: cea72823-df4d-4567-950c-0b579eaf0846-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>WScript or CScript Dropper</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\|C:\\ProgramData\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.jse|\.vbe|\.js|\.vba|\.vbs</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\winzip</field>
    </rule>
    <rule id="113490" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_pcwutl.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 9386d78a-7207-4048-9c9f-a93a7c2d1c05-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Code Execution via Pcwutl.dll</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pcwutl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchApplication</field>
    </rule>
    <rule id="113491" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bootconf_mod.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Identifies use of the bcdedit command to delete boot configuration data. This tactic is sometimes used as by malware or an attacker as a destructive technique.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 1444443e-6757-43e4-9ea4-c8fc705f79a2-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Modification of Boot Configuration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\bcdedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bootstatuspolicy</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ignoreallfailures</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)recoveryenabled</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)no</field>
    </rule>
    <rule id="113492" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_software_discovery.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.-->
        <!--Date: 2020/10/16-->
        <!--Status: experimental-->
        <!--ID: e13f668e-7f95-443d-98d2-1816a7648a7b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518</id>
        </mitre>
        <description>Detected Windows Software Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)query</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\software\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)svcversion</field>
    </rule>
    <rule id="113493" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_diskshadow.yml</info>
        <!--Sigma Rule Author: Ivan Dyachkov, oscd.community-->
        <!--Description: Detects using Diskshadow.exe to execute arbitrary code in text file-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 0c2f8629-7129-4a8a-9897-7e0768f13ff2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution via Diskshadow.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\diskshadow\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s|\-s</field>
    </rule>
    <rule id="113494" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_termserv_proc_spawn.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)-->
        <!--Date: 2019/05/22-->
        <!--Status: test-->
        <!--ID: 1012f107-b8f1-4271-af30-5aed2de89b39-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Terminal Service Process Spawn</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\svchost\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)termsvcs</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\rdpclip\.exe)$</field>
    </rule>
    <rule id="113495" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_athremotefxvgpudisablementcommand.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusable Invoke-ATHRemoteFXvGPUDisablementCommand</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Invoke\-ATHRemoteFXvGPUDisablementCommand\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ModuleName\ |\-ModulePath\ |\-ScriptBlock\ |\-RemoteFXvGPUDisablementFilePath</field>
    </rule>
    <rule id="113496" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_sofacy.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects Trojan loader activity as used by APT28-->
        <!--Date: 2018/03/01-->
        <!--Status: test-->
        <!--ID: ba778144-5e3d-40cf-8af9-e28fb1df1e20-->
        <mitre>
            <id>attack.g0007</id>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.defense_evasion</id>
            <id>car.2013-10-002</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Sofacy Trojan Loader Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%APPDATA%\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dat",</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dll",\#1|\.dll\ \#1|\.dll"\ \#1)$</field>
    </rule>
    <rule id="113497" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cobaltstrike_load_by_rundll32.yml</info>
        <!--Sigma Rule Author: Wojciech Lesicki-->
        <!--Description: Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.-->
        <!--Date: 2021/06/01-->
        <!--Status: experimental-->
        <!--ID: ae9c6a7c-9521-42a6-915e-5aaa8689d529-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>CobaltStrike Load by Rundll32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ StartW|,StartW)$</field>
    </rule>
    <rule id="113498" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_winzip.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: e2e80da2-8c66-4e00-ae3c-2eebd29f6b6d-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Compress Data and Lock With Password for Exfiltration With WINZIP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)winzip\.exe|winzip64\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-s"</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-min\ |\ \-a\ )</field>
    </rule>
    <rule id="113499" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_eula_accepted.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects the usage of Sysinternals Tools due to accepteula key being added to Registry-->
        <!--Date: 2017/08/28-->
        <!--Status: experimental-->
        <!--ID: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Usage of Sysinternals Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-accepteula</field>
    </rule>
    <rule id="113500" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_nt_resource_kit_auditpol_usage.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali @nas_bench-->
        <!--Description: Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability. This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: c6c56ada-612b-42d1-9a29-adad3c5c2c1e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Suspicious NT Resource Kit Auditpol Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/logon:none|/system:none|/sam:none|/privilege:none|/object:none|/process:none|/policy:none</field>
    </rule>
    <rule id="113501" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_control_dll_load.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits-->
        <!--Date: 2017/04/15-->
        <!--Status: test-->
        <!--ID: d7eb979b-c2b5-4a6f-a3a7-c87ce6763819-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Control Panel DLL Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\System32\\control\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe\ )$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Shell32\.dll</field>
    </rule>
    <rule id="113502" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_lsass_clone.yml</info>
        <!--Sigma Rule Author: Florian Roth, Samir Bousseaden-->
        <!--Description: Detects a suspicious LSASS process process clone that could be a sign of process dumping activity-->
        <!--Date: 2021/11/27-->
        <!--Status: experimental-->
        <!--ID: c8da0dfd-4ed0-4b68-962d-13c9c884384e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious LSASS Process Clone</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\\\Windows\\\\System32\\lsass\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\\\Windows\\\\System32\\lsass\.exe)$</field>
    </rule>
    <rule id="113503" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_network_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/07-->
        <!--Status: experimental-->
        <!--ID: a29c1813-ab1f-4dde-b489-330b952e91ae-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
        </mitre>
        <description>Suspicious Network Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ipconfig\ /all|netsh\ interface\ show\ interface|arp\ \-a|nbtstat\ \-n|net\ config</field>
    </rule>
    <rule id="113504" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_conti_7zip.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects a command used by conti to exfiltrate NTDS-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: aa92fd02-09f2-48b0-8a93-864813fb8f41-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560</id>
        </mitre>
        <description>Conti Volume Shadow Listing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)7za\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\C\$\\\\temp\\\\log\.zip</field>
    </rule>
    <rule id="113505" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_7z.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: 9fbf5927-5261-4284-a71d-f681029ea574-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Compress Data and Lock With Password for Exfiltration With 7-ZIP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)7z\.exe|7za\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-p</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ a\ |\ u\ )</field>
    </rule>
    <rule id="113506" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: experimental-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\\?</field>
        <field name="win.eventdata.fileVersion" negate="no" type="pcre2">(?i)\\\?</field>
    </rule>
    <rule id="113507" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: experimental-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\\?</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)\\\?</field>
    </rule>
    <rule id="113508" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: experimental-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\\?</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)\\\?</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Downloads\\</field>
    </rule>
    <rule id="113509" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_proc_dump_createdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the createdump.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/01/04-->
        <!--Status: experimental-->
        <!--ID: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>CreateDump Process Dump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\createdump\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-f\ )</field>
    </rule>
    <rule id="113510" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_proc_dump_createdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the createdump.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/01/04-->
        <!--Status: experimental-->
        <!--ID: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>CreateDump Process Dump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ \-f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dmp\ )</field>
    </rule>
    <rule id="113511" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_instalutil.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Uses the .NET InstallUtil.exe application in order to execute image without log-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: d042284c-a296-4988-9be5-f424fadcc28c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Execution of InstallUtil Without Log</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\InstallUtil\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)Microsoft\.NET\\Framework</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/logfile=\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/LogToConsole=false</field>
    </rule>
    <rule id="113512" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_powershell_session_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).-->
        <!--Date: 2019/09/12-->
        <!--Status: experimental-->
        <!--ID: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session Host Process (WinRM)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wsmprovhost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wsmprovhost\.exe)$</field>
    </rule>
    <rule id="113513" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_temp.yml</info>
        <!--Sigma Rule Author: Florian Roth, Max Altgelt-->
        <!--Description: Detects a suspicious script executions from temporary folder-->
        <!--Date: 2021/07/14-->
        <!--Status: experimental-->
        <!--ID: a6a39bdb-935c-4f0a-ab77-35f4bbf44d33-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Script Execution From Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\mshta\.exe|\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\Windows\\\\Temp|\\Temporary\ Internet|\\AppData\\Local\\Temp|\\AppData\\Roaming\\Temp|%TEMP%|%TMP%|%LocalAppData%\\Temp</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ &gt;|Out\-File|ConvertTo\-Json|\-WindowStyle\ hidden\ \-Verb\ runAs</field>
    </rule>
    <rule id="113514" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntdsutil.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 2afafd61-6aae-4df4-baed-139fa1f4c345-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\ntdsutil\.exe)$</field>
    </rule>
    <rule id="113515" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_gallium_sha1.yml</info>
        <!--Sigma Rule Author: Tim Burrell-->
        <!--Description: Detects artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.-->
        <!--Date: 2020/02/07-->
        <!--Status: experimental-->
        <!--ID: 440a56bf-7873-4439-940a-1c8a671073c2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>GALLIUM Artefacts</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)53a44c2396d15c3a03723fa5e5db54cafd527635|9c5e496921e3bc882dc40694f1dcc3746a75db19|aeb573accfd95758550cf30bf04f389a92922844|79ef78a797403a4ed1a616c68e07fff868a8650a|4f6f38b4cec35e895d91c052b1f5a83d665c2196|1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d|e841a63e47361a572db9a7334af459ddca11347a|c28f606df28a9bc8df75a4d5e5837fc5522dd34d|2e94b305d6812a9f96e6781c888e48c7fb157b6b|dd44133716b8a241957b912fa6a02efde3ce3025|8793bf166cb89eb55f0593404e4e933ab605e803|a39b57032dbb2335499a51e13470a7cd5d86b138|41cc2b15c662bc001c0eb92f6cc222934f0beeea|d209430d6af54792371174e70e27dd11d3def7a7|1c6452026c56efd2c94cea7e0f671eb55515edb0|c6b41d3afdcdcaf9f442bbe772f5da871801fd5a|4923d460e22fbbf165bbbaba168e5a46b8157d9f|f201504bd96e81d0d350c3a8332593ee1c9e09de|ddd2db1127632a2a52943a2fe516a2e7d05d70d2</field>
    </rule>
    <rule id="113516" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dll_sideload_xwizard.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the execution of Xwizard tool from the non-default directory which can be used to sideload a custom xwizards.dll-->
        <!--Date: 2021/09/20-->
        <!--Status: experimental-->
        <!--ID: 193d5ccd-6f59-40c6-b5b0-8e32d5ddd3d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Xwizard DLL Sideloading</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\xwizard\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\)</field>
    </rule>
    <rule id="113517" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_rubeus.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects command line parameters used by Rubeus hack tool-->
        <!--Date: 2018/12/19-->
        <!--Status: stable-->
        <!--ID: 7ec2c172-dceb-4c10-92c9-87c1881b7e18-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>Rubeus Hack Tool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ asreproast\ |\ dump\ /service:krbtgt\ |\ kerberoast\ |\ createnetonly\ /program:|\ ptt\ /ticket:|\ /impersonateuser:|\ renew\ /ticket:|\ asktgt\ /user:|\ harvest\ /interval:|\ s4u\ /user:|\ s4u\ /ticket:|\ hash\ /password:</field>
    </rule>
    <rule id="113518" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_curl_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious curl process start on Windows and outputs the requested document to a local file-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: e218595b-bbe7-4ee5-8a96-f32a24ad3468-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl Usage on Windows</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\curl\.exe)$</field>
    </rule>
    <rule id="113519" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_curl_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious curl process start on Windows and outputs the requested document to a local file-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: e218595b-bbe7-4ee5-8a96-f32a24ad3468-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl Usage on Windows</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-O\ )</field>
    </rule>
    <rule id="113520" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_crime_snatch_ransomware.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects specific process characteristics of Snatch ransomware word document droppers-->
        <!--Date: 2020/08/26-->
        <!--Status: test-->
        <!--ID: 5325945e-f1f0-406e-97b8-65104d393fff-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
        </mitre>
        <description>Snatch Ransomware</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shutdown\ /r\ /f\ /t\ 00|net\ stop\ SuperBackupMan</field>
    </rule>
    <rule id="113521" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_reconnaissance.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary might use WMI to list Processes running on the compromised host or list installed Software hotfix and patches.-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 221b251a-357a-49a9-920a-271802777cc0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Suspicious WMI Reconnaissance</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\WMIC\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)process|qfe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)call</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)create</field>
    </rule>
    <rule id="113522" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_verclsid_runs_com.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects when verclsid.exe is used to run COM object via GUID-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: d06be4b9-8045-428b-a567-740a26d9db25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Verclsid.exe Runs COM Object</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\verclsid\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/C</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/S</field>
    </rule>
    <rule id="113523" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_xor_commandline.yml</info>
        <!--Sigma Rule Author: Sami Ruohonen, Harish Segar (improvement), Tim Shelton-->
        <!--Description: Detects suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.-->
        <!--Date: 2018/09/05-->
        <!--Status: test-->
        <!--ID: bb780e0c-16cf-4383-8383-1e5471db6cf9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1140</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious XOR Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Windows\ PowerShell</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PowerShell\ Core\ 6</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bxor|\-join\ |\-join'|\-join"|\-join`|char</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\Program\ Files\\Amazon\\SSM\\ssm\-document\-worker\.exe</field>
    </rule>
    <rule id="113524" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_process_dump_rundll32_comsvcs.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a process memory dump performed via ordinal function 24 in comsvcs.dll-->
        <!--Date: 2020/02/18-->
        <!--Status: experimental-->
        <!--ID: 646ea171-dded-4578-8a4d-65e9822892e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.credential_access</id>
            <id>car.2013-05-009</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Dump via Rundll32 and Comsvcs.dll</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs\.dll|rundll32|\.dmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\#24|\#\+24|MiniDump</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ full</field>
    </rule>
    <rule id="113525" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_process_dump_rundll32_comsvcs.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a process memory dump performed via ordinal function 24 in comsvcs.dll-->
        <!--Date: 2020/02/18-->
        <!--Status: experimental-->
        <!--ID: 646ea171-dded-4578-8a4d-65e9822892e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.credential_access</id>
            <id>car.2013-05-009</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Dump via Rundll32 and Comsvcs.dll</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\#\-4294967272</field>
    </rule>
    <rule id="113526" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_diantz_remote_cab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Download and compress a remote file and store it in a cab file on local machine.-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: 185d7418-f250-42d0-b72e-0c8b70661e93-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Diantz Download and Compress Into a CAB File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)diantz\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
    </rule>
    <rule id="113527" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_enable_group_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may  modify system firewalls in order to bypass controls limiting network usage-->
        <!--Date: 2022/01/09-->
        <!--Status: experimental-->
        <!--ID: 347906f3-e207-4d18-ae5b-a9403d6bcdef-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Netsh Allow Group Policy on Microsoft Defender Firewall</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advfirewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)firewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rule</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)group=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)enable=Yes</field>
    </rule>
    <rule id="113528" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_muddywater_dnstunnel.yml</info>
        <!--Sigma Rule Author: @caliskanfurkan_-->
        <!--Description: Detecting DNS tunnel activity for Muddywater actor-->
        <!--Date: 2020/06/04-->
        <!--Status: test-->
        <!--ID: 36222790-0d43-4fe8-86e4-674b27809543-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>DNS Tunnel Technique from MuddyWater</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\excel\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DataExchange\.dll</field>
    </rule>
    <rule id="113529" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_svchost_no_cli.yml</info>
        <!--Sigma Rule Author: David Burkett-->
        <!--Description: It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.-->
        <!--Date: 2019/12/28-->
        <!--Status: experimental-->
        <!--ID: 16c37b52-b141-42a5-a3ea-bbe098444397-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspect Svchost Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\rpcnet\.exe|\\rpcnetp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="113530" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_cmstp.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detect child processes of automatically elevated instances of Microsoft Connection Manager Profile Installer (cmstp.exe).-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: e66779cc-383e-4224-a3a4-267eeb585c40-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
            <id>attack.t1218.003</id>
        </mitre>
        <description>Bypass UAC via CMSTP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmstp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s|/au</field>
    </rule>
    <rule id="113531" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_regsvr32_no_dll.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a regsvr.exe execution that doesn't contain a DLL in the command line-->
        <!--Date: 2019/07/17-->
        <!--Status: experimental-->
        <!--ID: 50919691-7302-437f-8e10-1fe088afa145-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574</id>
            <id>attack.execution</id>
        </mitre>
        <description>Regsvr32 Command Line Without DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regsvr32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll|\.ocx|\.cpl|\.ax|\.bav|\.ppl</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="113532" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_credential_access_via_password_filter.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Detects dropping of dll files in system32 that may be used to retrieve user credentials from LSASS-->
        <!--Date: 2020/10/29-->
        <!--Status: experimental-->
        <!--ID: b7966f4a-b333-455b-8370-8ca53c229762-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1556.002</id>
        </mitre>
        <description>Dropping Of Password Filter DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)scecli\\0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ add</field>
    </rule>
    <rule id="113533" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_consent_comctl32.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 1ca6bd18-0ba0-44ca-851c-92ed89a61085-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Consent and Comctl32 - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\consent\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\werfault\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="113534" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_syncappvpublishingserver_execute_powershell.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.-->
        <!--Date: 2021/07/12-->
        <!--Status: experimental-->
        <!--ID: fbd7c32d-db2a-4418-b92c-566eb8911133-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>SyncAppvPublishingServer Execute Arbitrary PowerShell Code</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\SyncAppvPublishingServer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:"n;\ )</field>
    </rule>
    <rule id="113535" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_add_susp_image.yml</info>
        <!--Sigma Rule Author: Sander Wiebing, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects Netsh commands that allows a suspcious application location on Windows Firewall-->
        <!--Date: 2020/05/25-->
        <!--Status: test-->
        <!--ID: a35f5a72-f347-4e36-8895-9869b0d5fc6d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Netsh Program Allowed with Suspcious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)firewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)allowedprogram</field>
    </rule>
    <rule id="113536" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_add_susp_image.yml</info>
        <!--Sigma Rule Author: Sander Wiebing, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects Netsh commands that allows a suspcious application location on Windows Firewall-->
        <!--Date: 2020/05/25-->
        <!--Status: test-->
        <!--ID: a35f5a72-f347-4e36-8895-9869b0d5fc6d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Netsh Program Allowed with Suspcious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advfirewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)firewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rule</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)action=allow</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)program=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%TEMP%|:\\RECYCLER\\|C:\\\$Recycle\.bin\\|:\\SystemVolumeInformation\\|C:\\\\Windows\\\\Temp\\|C:\\Temp\\|C:\\Users\\Public\\|C:\\Users\\Default\\|C:\\Users\\Desktop\\|\\Downloads\\|\\Temporary\ Internet\ Files\\Content\.Outlook\\|\\Local\ Settings\\Temporary\ Internet\ Files\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Tasks\\|C:\\\\Windows\\\\debug\\|C:\\\\Windows\\\\fonts\\|C:\\\\Windows\\\\help\\|C:\\\\Windows\\\\drivers\\|C:\\\\Windows\\\\addins\\|C:\\\\Windows\\\\cursors\\|C:\\\\Windows\\\\system32\\tasks\\|%Public%\\)</field>
    </rule>
    <rule id="113537" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_double_extension.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), @blu3_team (idea)-->
        <!--Description: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns-->
        <!--Date: 2019/06/26-->
        <!--Status: stable-->
        <!--ID: 1cdd9a09-06c9-4769-99ff-626e2b3991b8-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Suspicious Double Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\.doc\.exe|\.docx\.exe|\.xls\.exe|\.xlsx\.exe|\.ppt\.exe|\.pptx\.exe|\.rtf\.exe|\.pdf\.exe|\.txt\.exe|\ \ \ \ \ \ \.exe|______\.exe)$</field>
    </rule>
    <rule id="113538" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_zipexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.-->
        <!--Date: 2021/11/07-->
        <!--Status: experimental-->
        <!--ID: 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious ZipExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/generic:Microsoft_Windows_Shell_ZipFolder:filename=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.zip</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/pass:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/user:</field>
    </rule>
    <rule id="113539" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_zipexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.-->
        <!--Date: 2021/11/07-->
        <!--Status: experimental-->
        <!--ID: 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious ZipExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Microsoft_Windows_Shell_ZipFolder:filename=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.zip</field>
    </rule>
    <rule id="113540" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_anydesk_silent_install.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;-->
        <!--Description: AnyDesk Remote Desktop silent installation can be used by attacker to gain remote access.-->
        <!--Date: 2021/08/06-->
        <!--Status: experimental-->
        <!--ID: 114e7f1c-f137-48c8-8f54-3088c24ce4b9-->
        <mitre>
            <id>attack.t1219</id>
        </mitre>
        <description>AnyDesk Silent Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-install</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-start\-with\-win</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-silent</field>
    </rule>
    <rule id="113541" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_formbook.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Jonhnathan Ribeiro-->
        <!--Description: Detects Formbook like process executions that inject code into a set of files in the System32 folder, which executes a special command command line to delete the dropper from the AppData Temp folder. We avoid false positives by excluding all parent process with command line parameters.-->
        <!--Date: 2019/09/30-->
        <!--Status: test-->
        <!--ID: 032f5fb3-d959-41a5-9263-4173c802dc2b-->
        <mitre>
            <id>attack.develop_capabilities</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Formbook Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\)</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)del</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)del</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Desktop\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/C</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)type\ nul\ &gt;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Desktop\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
    </rule>
    <rule id="113542" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_explorer.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use explorer.exe for evading defense mechanisms-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 9eb271b9-24ae-4cd4-9465-19cfc1047f3e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Proxy Execution Via Explorer.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\explorer\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)explorer\.exe</field>
    </rule>
    <rule id="113543" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mailboxexport_share.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a PowerShell New-MailboxExportRequest that exports a mailbox to a local share, as used in ProxyShell exploitations-->
        <!--Date: 2021/08/07-->
        <!--Status: experimental-->
        <!--ID: 889719ef-dd62-43df-86c3-768fb08dc7c0-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.resource_development</id>
            <id>attack.t1584.006</id>
        </mitre>
        <description>Suspicious PowerShell Mailbox Export to Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-MailboxExport</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-Mailbox\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-FilePath\ \\\\\\\\127\.0\.0\.1\\\\C\$</field>
    </rule>
    <rule id="113544" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_print.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use print.exe for remote file copy-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: bafac3d6-7de9-4dd9-8874-4a1194b493ed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusing Print Executable</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\print\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)^(?:print)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/D</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)print\.exe</field>
    </rule>
    <rule id="113545" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_advancedrun_priv_user.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of AdvancedRun utitlity in the context of the TrustedInstaller or SYSTEM account-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: fa00b701-44c6-4679-994d-5a18afa8a707-->
        <description>Suspicious AdvancedRun Runas Priv User</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/EXEFilename|/CommandLine</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /RunAs\ 8\ |\ /RunAs\ 4\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/RunAs\ 8|/RunAs\ 4)$</field>
    </rule>
    <rule id="113546" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_infdefaultinstall.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: ce7cf472-6fcc-490a-9481-3786840b5d9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>InfDefaultInstall.exe .inf Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:InfDefaultInstall\.exe\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.inf</field>
    </rule>
    <rule id="113547" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_screenconnect.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: 57bff678-25d1-4d6c-8211-8ca106d12053-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of ScreenConnect Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)ScreenConnect\ Service</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)ScreenConnect</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)ScreenConnect\ Software</field>
    </rule>
    <rule id="113548" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_using_settingsynchost_as_lolbin.yml</info>
        <!--Sigma Rule Author: Anton Kutepov, oscd.community-->
        <!--Description: Detects using SettingSyncHost.exe to run hijacked binary-->
        <!--Date: 2020/02/05-->
        <!--Status: test-->
        <!--ID: b2ddd389-f676-4ac4-845a-e00781a48e5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.008</id>
        </mitre>
        <description>Using SettingSyncHost.exe as LOLBin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\)</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /c</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)RoamDiag\.cmd</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-outputpath</field>
    </rule>
    <rule id="113549" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_reg_bitlocker.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Suspicious add key for BitLocker-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: 0e0255bf-2548-47b8-9582-c0955c9283f5-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Reg Add BitLocker</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ADD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EnableBDEWithNoTPM|UseAdvancedStartup|UseTPM|UseTPMKey|UseTPMKeyPIN|RecoveryKeyMessageSource|UseTPMPIN|RecoveryKeyMessage</field>
    </rule>
    <rule id="113550" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_msiexec_cwd.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious msiexec process starts in an uncommon directory-->
        <!--Date: 2019/11/14-->
        <!--Status: test-->
        <!--ID: e22a6eb2-f8a5-44b5-8b44-a2dbd47b1144-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Suspicious MsiExec Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msiexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\|C:\\\\Windows\\\\WinSxS\\)</field>
    </rule>
    <rule id="113551" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_impacket_compiled_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)-->
        <!--Date: 2021/07/24-->
        <!--Status: experimental-->
        <!--ID: 4627c6ae-6899-46e2-aa0c-6ebcb1becd19-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Impacket Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\goldenPac|\\karmaSMB|\\kintercept|\\ntlmrelayx|\\rpcdump|\\samrdump|\\secretsdump|\\smbexec|\\smbrelayx|\\wmiexec|\\wmipersist</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\atexec_windows\.exe|\\dcomexec_windows\.exe|\\dpapi_windows\.exe|\\findDelegation_windows\.exe|\\GetADUsers_windows\.exe|\\GetNPUsers_windows\.exe|\\getPac_windows\.exe|\\getST_windows\.exe|\\getTGT_windows\.exe|\\GetUserSPNs_windows\.exe|\\ifmap_windows\.exe|\\mimikatz_windows\.exe|\\netview_windows\.exe|\\nmapAnswerMachine_windows\.exe|\\opdump_windows\.exe|\\psexec_windows\.exe|\\rdp_check_windows\.exe|\\sambaPipe_windows\.exe|\\smbclient_windows\.exe|\\smbserver_windows\.exe|\\sniffer_windows\.exe|\\sniff_windows\.exe|\\split_windows\.exe|\\ticketer_windows\.exe)$</field>
    </rule>
    <rule id="113552" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_explorer_break_proctree.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a command line process that uses explorer.exe /root, which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer-->
        <!--Date: 2019/06/29-->
        <!--Status: test-->
        <!--ID: 949f1ffb-6e85-4f00-ae1e-c3c5b190d605-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Explorer Root Flag Process Tree Break</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)explorer\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /root,</field>
    </rule>
    <rule id="113553" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powersploit_empire_schtasks.yml</info>
        <!--Sigma Rule Author: Markus Neis, @Karneades-->
        <!--Description: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.-->
        <!--Date: 2018/03/06-->
        <!--Status: test-->
        <!--ID: 56c217c3-2de2-479b-990f-5c109ba8458f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.s0111</id>
            <id>attack.g0022</id>
            <id>attack.g0060</id>
            <id>car.2013-08-001</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Default PowerSploit and Empire Schtasks Persistence</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/SC</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ONLOGON|DAILY|ONIDLE|Updater</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TN</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Updater</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113554" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_screenconnect_access.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects ScreenConnect program starts that establish a remote access to that system (not meeting, not remote support)-->
        <!--Date: 2021/02/11-->
        <!--Status: experimental-->
        <!--ID: 75bfe6e6-cd8e-429e-91d3-03921e1d7962-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1133</id>
        </mitre>
        <description>ScreenConnect Remote Access</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)e=Access\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)y=Guest\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;p=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;c=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;k=</field>
    </rule>
    <rule id="113555" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_actinium_persistence.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects specific process parameters as used by ACTINIUM scheduled task persistence creation.-->
        <!--Date: 2022/02/07-->
        <!--Status: experimental-->
        <!--ID: e1118a8f-82f5-44b3-bb6b-8a284e5df602-->
        <description>Scheduled Task WScript VBScript</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)schtasks</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wscript</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)e:vbscript</field>
    </rule>
    <rule id="113556" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wsl_lolbin.yml</info>
        <!--Sigma Rule Author: oscd.community, Zach Stanford @svch0st-->
        <!--Description: Detects Possible usage of Windows Subsystem for Linux (WSL) binary as a LOLBIN-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: dec44ca7-61ad-493c-bfd7-8819c5faa09b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>WSL Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wsl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-e\ |\ \-\-exec\ )</field>
    </rule>
    <rule id="113557" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_add_run_key.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious command line reg.exe tool adding key to RUN key in Registry-->
        <!--Date: 2021/06/28-->
        <!--Status: experimental-->
        <!--ID: de587dce-915e-4218-aac4-835ca6af6f70-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Reg Add RUN Key</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ ADD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run</field>
    </rule>
    <rule id="113558" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_use_admin_share.yml</info>
        <!--Sigma Rule Author: oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, wagga-->
        <!--Description: Detects when an admin share is mounted using net.exe-->
        <!--Date: 2020/10/05-->
        <!--Status: experimental-->
        <!--ID: 3abd6094-7027-475f-9630-8ab9be7b9725-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Mounted Windows Admin Shares with net.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ use\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\\\.+\\\\.+\$</field>
    </rule>
    <rule id="113559" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_koadic.yml</info>
        <!--Sigma Rule Author: wagga, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects command line parameters used by Koadic hack tool-->
        <!--Date: 2020/01/12-->
        <!--Status: test-->
        <!--ID: 5cddf373-ef00-4112-ad72-960ac29bac34-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Koadic Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/q</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)chcp</field>
    </rule>
    <rule id="113560" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unidentified_nov_18.yml</info>
        <!--Sigma Rule Author: @41thexplorer, Microsoft Defender ATP-->
        <!--Description: A sigma rule detecting an unidetefied attacker who used phishing emails to target high profile orgs on November 2018. The Actor shares some TTPs with YYTRIUM/APT29 campaign in 2016.-->
        <!--Date: 2018/11/20-->
        <!--Status: stable-->
        <!--ID: 7453575c-a747-40b9-839b-125a0aae324b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Unidentified Attacker November 2018</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cyzfc\.dat,</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:PointFunctionCall)$</field>
    </rule>
    <rule id="113561" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_psexesvc_start.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a PsExec service start-->
        <!--Date: 2018/03/13-->
        <!--Status: test-->
        <!--ID: 3ede524d-21cc-472d-a3ce-d21b568d8db7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.s0029</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PsExec Service Start</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\PSEXESVC\.exe</field>
    </rule>
    <rule id="113562" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sc_query.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may try to get information about registered services-->
        <!--Date: 2021/12/06-->
        <!--Status: experimental-->
        <!--ID: 57712d7a-679c-4a41-a913-87e7175ae429-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1007</id>
        </mitre>
        <description>Suspicious Sc Query</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sc\ query</field>
    </rule>
    <rule id="113563" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_wsreset.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community-->
        <!--Description: Identifies use of WSReset.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: d797268e-28a9-49a7-b9a8-2f5039011c5c-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC via WSReset.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wsreset\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\conhost\.exe)$</field>
    </rule>
    <rule id="113564" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2020_1350.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects exploitation of DNS RCE bug reported in CVE-2020-1350 by the detection of suspicious sub process-->
        <!--Date: 2020/07/15-->
        <!--Status: test-->
        <!--ID: b5281f31-f9cc-4d0d-95d0-45b91c45b487-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>DNS RCE CVE-2020-1350</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\System32\\dns\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\System32\\werfault\.exe|\\System32\\conhost\.exe|\\System32\\dnscmd\.exe)$</field>
    </rule>
    <rule id="113565" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_babyshark.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects activity that could be related to Baby Shark malware-->
        <!--Date: 2019/02/24-->
        <!--Status: test-->
        <!--ID: 2b30fa36-3a18-402f-a22d-bf4ce2189f35-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>Baby Shark Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ query\ "HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal\ Server\ Client\\Default"|powershell\.exe\ mshta\.exe\ http|cmd\.exe\ /c\ taskkill\ /im\ cmd\.exe</field>
    </rule>
    <rule id="113566" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shell_spawn_by_java.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), Florian Roth-->
        <!--Description: Detects suspicious shell spawn from Java host process (e.g. log4j exploitation)-->
        <!--Date: 2021/12/17-->
        <!--Status: experimental-->
        <!--ID: 0d34ed8b-1c12-4ff2-828c-16fc860b766d-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Shells Spawn by Java</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\java\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sh\.exe|\\bash\.exe|\\powershell\.exe|\\schtasks\.exe|\\certutil\.exe|\\whoami\.exe|\\bitsadmin\.exe|\\wscript\.exe|\\cscript\.exe|\\scrcons\.exe|\\regsvr32\.exe|\\hh\.exe|\\wmic\.exe|\\mshta\.exe|\\rundll32\.exe|\\forfiles\.exe|\\scriptrunner\.exe|\\mftrace\.exe|\\AppVLP\.exe|\\curl\.exe)$</field>
    </rule>
    <rule id="113567" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_plink_remote_forward.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious Plink tunnel remote forarding to a local port-->
        <!--Date: 2021/01/19-->
        <!--Status: experimental-->
        <!--ID: 48a61b29-389f-4032-b317-b30de6b95314-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>Suspicious Plink Remote Forwarding</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\-line\ SSH,\ Telnet,\ and\ Rlogin\ client</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-R\ )</field>
    </rule>
    <rule id="113568" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regini_ads.yml</info>
        <!--Sigma Rule Author: Eli Salem, Sander Wiebing, oscd.community-->
        <!--Description: Detects the import of an alternate data stream with regini.exe, regini.exe can be used to modify registry keys.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 77946e79-97f1-45a2-84b4-f37b5c0d8682-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Modifies the Registry From a ADS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regini\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^ \\\\]</field>
    </rule>
    <rule id="113569" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_csc.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious parent of csc.exe, which could by a sign of payload delivery-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Suspicious Parent of Csc.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\csc\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe|\\mshta\.exe)$</field>
    </rule>
    <rule id="113570" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_servu_exploitation_cve_2021_35211.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322-->
        <!--Date: 2021/07/14-->
        <!--Status: experimental-->
        <!--ID: 75578840-9526-4b2a-9462-af469a45e767-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
            <id>cve.2021.35211</id>
        </mitre>
        <description>Serv-U Exploitation CVE-2021-35211 by DEV-0322</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)whoami</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\./Client/Common/|\.\\Client\\Common\\</field>
    </rule>
    <rule id="113571" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_servu_exploitation_cve_2021_35211.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322-->
        <!--Date: 2021/07/14-->
        <!--Status: experimental-->
        <!--ID: 75578840-9526-4b2a-9462-af469a45e767-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
            <id>cve.2021.35211</id>
        </mitre>
        <description>Serv-U Exploitation CVE-2021-35211 by DEV-0322</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Temp\\Serv\-U\.bat</field>
    </rule>
    <rule id="113572" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_wlrmdr.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute-->
        <!--Date: 2022/02/16-->
        <!--Status: experimental-->
        <!--ID: 9cfc00b6-bfb7-49ce-9781-ef78503154bb-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Wlrmdr Lolbin Use as Laucher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:wlrmdr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-s\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-m\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-a\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\winlogon\.exe</field>
    </rule>
    <rule id="113573" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysmon_uac_bypass_eventvwr.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects UAC bypass method using Windows event viewer-->
        <!--Date: 2017/03/19-->
        <!--Status: experimental-->
        <!--ID: be344333-921d-4c4d-8bb8-e584cf584780-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>UAC Bypass via Event Viewer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\eventvwr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\mmc\.exe)$</field>
    </rule>
    <rule id="113574" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_userinit_child.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Samir Bousseaden (idea)-->
        <!--Description: Detects a suspicious child process of userinit-->
        <!--Date: 2019/06/17-->
        <!--Status: experimental-->
        <!--ID: b655a06a-31c0-477a-95c2-3726b83d649d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspicious Userinit Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\userinit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\netlogon\\</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\explorer\.exe)$</field>
    </rule>
    <rule id="113575" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_escape.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detects suspicious process that use escape characters-->
        <!--Date: 2018/12/11-->
        <!--Status: test-->
        <!--ID: f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
        </mitre>
        <description>Suspicious Commandline Escape</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)h\^t\^t\^p|h"t"t"p</field>
    </rule>
    <rule id="113576" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_screenconnect_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious sub processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode-->
        <!--Date: 2022/02/25-->
        <!--Status: experimental-->
        <!--ID: 7b582f1a-b318-4c6a-bf4e-66fe49bf55a5-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>ScreenConnect Backstage Mode Anomaly</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:ScreenConnect\.ClientService\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe)$</field>
    </rule>
    <rule id="113577" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_dismhost.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 853e74f9-9392-4935-ad3b-2e8c040dae86-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using DismHost</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\DismHost\.exe</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="113578" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_long_powershell_commandline.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Too long PowerShell command lines-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: d0d28567-4b9a-45e2-8bbc-fb1b66a1f7f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Too Long PowerShell Commandlines</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|pwsh</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Windows\ Powershell</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PowerShell\ Core\ 6</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).{1000,}</field>
    </rule>
    <rule id="113579" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sysvol_access.yml</info>
        <!--Sigma Rule Author: Markus Neis, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects Access to Domain Group Policies stored in SYSVOL-->
        <!--Date: 2018/04/09-->
        <!--Status: test-->
        <!--ID: 05f3c945-dcc8-4393-9f3d-af65077a8f86-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Suspicious SYSVOL Domain Group Policy Access</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\SYSVOL\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\policies\\</field>
    </rule>
    <rule id="113580" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_control_cve_2021_40444.yml</info>
        <!--Sigma Rule Author: @neonprimetime, Florian Roth-->
        <!--Description: Detects a suspicious process pattern found in CVE-2021-40444 exploitation-->
        <!--Date: 2021/09/08-->
        <!--Status: test-->
        <!--ID: 894397c6-da03-425c-a589-3d09e7d1f750-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>CVE-2021-40444 Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\control\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\control\.exe\ input\.dll|\\control\.exe"\ input\.dll)$</field>
    </rule>
    <rule id="113581" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_child_process_as_system_.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Roberto Rodriguez (@Cyb3rWard0g), Open Threat Research (OTR)-->
        <!--Description: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 590a5f4c-6c8c-4f10-8307-89afe9453a9d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Suspicious Child Process Created as System</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)NT\ AUTHORITY\\NETWORK\ SERVICE|NT\ AUTHORITY\\LOCAL\ SERVICE|AUTORITE\ NT\\</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)DavSetCookie</field>
    </rule>
    <rule id="113582" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_packet_capture.yml</info>
        <!--Sigma Rule Author: Kutepov Anton, oscd.community-->
        <!--Description: Detects capture a network trace via netsh.exe trace functionality-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: d3c3861d-c504-4c77-ba55-224ba82d0118-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Capture a Network Trace with netsh.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)netsh</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)trace</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start</field>
    </rule>
    <rule id="113583" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_using_sc_to_change_sevice_image_path_by_non_admin.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: d937b75f-a665-4480-88a5-2f20e9f9b22a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Possible Privilege Escalation via Weak Service Permissions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath</field>
    </rule>
    <rule id="113584" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_using_sc_to_change_sevice_image_path_by_non_admin.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: d937b75f-a665-4480-88a5-2f20e9f9b22a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Possible Privilege Escalation via Weak Service Permissions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)failure</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)command</field>
    </rule>
    <rule id="113585" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shell_spawn_by_java.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects shell spawn from Java host process, which could a maintenance task or some kind of exploitation (e.g. log4j exploitation)-->
        <!--Date: 2021/12/17-->
        <!--Status: experimental-->
        <!--ID: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Shells Spawn by Java</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\java\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)build</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)build</field>
    </rule>
    <rule id="113586" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_query_registry.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 970007b7-ce32-49d0-a4a4-fbef016950bd-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.t1007</id>
        </mitre>
        <description>Query Registry</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)query|save|export</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)currentVersion\\windows|currentVersion\\runServicesOnce|currentVersion\\runServices|winlogon\\|currentVersion\\shellServiceObjectDelayLoad|currentVersion\\runOnce|currentVersion\\runOnceEx|currentVersion\\run|currentVersion\\policies\\explorer\\run|currentcontrolset\\services</field>
    </rule>
    <rule id="113587" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mmc20_lateral_movement.yml</info>
        <!--Sigma Rule Author: @2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)-->
        <!--Description: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of "-Embedding" as a child of svchost.exe-->
        <!--Date: 2020/03/04-->
        <!--Status: test-->
        <!--ID: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>MMC20 Lateral Movement</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mmc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Embedding</field>
    </rule>
    <rule id="113588" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_takeown.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders-->
        <!--Date: 2022/01/30-->
        <!--Status: experimental-->
        <!--ID: 554601fb-9b71-4bcc-abf4-21a611be4fde-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1222.001</id>
        </mitre>
        <description>Suspicious Recursif Takeown</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\takeown\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/r</field>
    </rule>
    <rule id="113589" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_csi.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft &#8220;Roslyn&#8221; Community Technology Preview was named 'rcsi.exe'-->
        <!--Date: 2020/10/17-->
        <!--Status: experimental-->
        <!--ID: 40b95d31-1afc-469e-8d34-9a3a667d058e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1072</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Csi.exe Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\csi\.exe)$</field>
    </rule>
    <rule id="113590" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_csi.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft &#8220;Roslyn&#8221; Community Technology Preview was named 'rcsi.exe'-->
        <!--Date: 2020/10/17-->
        <!--Status: experimental-->
        <!--ID: 40b95d31-1afc-469e-8d34-9a3a667d058e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1072</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Csi.exe Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csi\.exe</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)Microsoft\ Corporation</field>
    </rule>
    <rule id="113591" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_dumpert.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory-->
        <!--Date: 2020/02/04-->
        <!--Status: experimental-->
        <!--ID: 2704ab9e-afe2-4854-a3b1-0c0706d03578-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Dumpert Process Dumper</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)09D278F9DE118EF09163C6140255C690</field>
    </rule>
    <rule id="113592" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wuauclt_cmdline.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags-->
        <!--Date: 2022/02/26-->
        <!--Status: experimental-->
        <!--ID: 52d097e2-063e-4c9c-8fbb-855c8948d135-->
        <description>Suspicious Windows Update Agent Empty Cmdline</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Wuauclt\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\Wuauclt\.exe)$</field>
    </rule>
    <rule id="113593" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_defender_tampering.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects reg command lines that disable certain important features of Microsoft Defender-->
        <!--Date: 2022/03/22-->
        <!--Status: experimental-->
        <!--ID: 452bce90-6fb0-43cc-97a5-affc283139b3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Registry Defender Tampering</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\Microsoft\\Windows\ Defender\\|SOFTWARE\\Policies\\Microsoft\\Windows\ Defender\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /d\ 0</field>
    </rule>
    <rule id="113594" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_mpiexec_lolbin.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary-->
        <!--Date: 2022/01/11-->
        <!--Status: experimental-->
        <!--ID: 729ce0ea-5d8f-4769-9762-e35de441586d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>MpiExec Lolbin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mpiexec\.exe)$</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)d8b52ef6aaa3a81501bdfff9dbb96217</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /n\ 1\ |\ \-n\ 1\ )</field>
    </rule>
    <rule id="113595" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_target_location_shell32.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects shell32.dll executing a DLL in a suspicious directory-->
        <!--Date: 2021/11/24-->
        <!--Status: experimental-->
        <!--ID: 32b96012-7892-429e-b26c-ac2bf46066ff-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Shell32 DLL Execution in Suspicious Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%AppData%|%LocalAppData%|%Temp%|\\AppData\\|\\Temp\\|\\Users\\Public\\</field>
    </rule>
    <rule id="113596" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_execution_of_wuauclt.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Adversaries can abuse wuauclt.exe (Windows Update client) to run code execution by specifying an arbitrary DLL.-->
        <!--Date: 2020/10/29-->
        <!--Status: experimental-->
        <!--ID: ba1bb0cb-73da-42de-ad3a-de10c643a5d0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Monitoring Wuauclt.exe For Lolbas Execution Of DLL</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wuauclt\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/UpdateDeploymentProvider</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Runhandlercomserver</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)wuaueng\.dll|UpdateDeploymentProvider\.dll\ /ClassId</field>
    </rule>
    <rule id="113597" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_odbcconf.yml</info>
        <!--Sigma Rule Author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects defence evasion attempt via odbcconf.exe execution to load DLL-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 65d2be45-8600-4042-b4c0-577a1ff8a60e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Application Whitelisting Bypass via DLL Loaded by odbcconf.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\odbcconf\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f|regsvr</field>
    </rule>
    <rule id="113598" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_odbcconf.yml</info>
        <!--Sigma Rule Author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects defence evasion attempt via odbcconf.exe execution to load DLL-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 65d2be45-8600-4042-b4c0-577a1ff8a60e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Application Whitelisting Bypass via DLL Loaded by odbcconf.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\odbcconf\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
    </rule>
    <rule id="113599" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_machineguid.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of reg to get MachineGuid information-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: f5240972-3938-4e56-8e4b-e33893176c1f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Query of MachineGUID</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\Microsoft\\Cryptography</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/v\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MachineGuid</field>
    </rule>
    <rule id="113600" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_always_install_elevated_msi_spawned_cmd_powershell.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: This rule looks for Windows Installer service (msiexec.exe) spawned command line and/or powershell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 1e53dd56-8d83-4eb4-a43e-b790a05510aa-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Always Install Elevated MSI Spawned Cmd And Powershell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\\\Windows\\\\Installer\\</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)msi</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:tmp)$</field>
    </rule>
    <rule id="113601" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wuauclt.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye Team-->
        <!--Description: Detects code execution via the Windows Update client (wuauclt)-->
        <!--Date: 2020/10/17-->
        <!--Status: experimental-->
        <!--ID: d7825193-b70a-48a4-b992-8b5b3015cc11-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.execution</id>
            <id>attack.t1105</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Windows Update Client LOLBIN</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/UpdateDeploymentProvider</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/RunHandlerComServer</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wuauclt\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /ClassId\ |\ wuaueng\.dll\ )</field>
    </rule>
    <rule id="113602" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_systemnightmare.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the exploitation of PrinterNightmare to get a shell as LOCAL_SYSTEM-->
        <!--Date: 2021/08/11-->
        <!--Status: test-->
        <!--ID: c01f7bd6-0c1d-47aa-9c61-187b91273a16-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>SystemNightmare Exploitation Script Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)printnightmare\.gentilkiwi\.com|\ /user:gentilguest\ |Kiwi\ Legit\ Printer</field>
    </rule>
    <rule id="113603" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_indirect_cmd.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detect indirect command execution via Program Compatibility Assistant (pcalua.exe or forfiles.exe).-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: fa47597e-90e9-41cd-ab72-c3b74cfb0d02-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Indirect Command Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\pcalua\.exe|\\forfiles\.exe)$</field>
    </rule>
    <rule id="113604" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_lpe_cve_2021_41379.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects signs of the exploitation of LPE CVE-2021-41379 to spawn a cmd.exe with LOCAL_SYSTEM rights-->
        <!--Date: 2021/11/22-->
        <!--Status: experimental-->
        <!--ID: af8bbce4-f751-46b4-8d91-82a33a736f61-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Possible InstallerFileTakeOver LPE CVE-2021-41379</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\elevation_service\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
    </rule>
    <rule id="113605" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shell_spawn_by_java_keytool.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)-->
        <!--Date: 2021/12/22-->
        <!--Status: experimental-->
        <!--ID: 90fb5e62-ca1f-4e22-b42e-cc521874c938-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Shells Spawn by Java Utility Keytool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\keytool\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\sh\.exe|\\bash\.exe|\\powershell\.exe|\\schtasks\.exe|\\certutil\.exe|\\whoami\.exe|\\bitsadmin\.exe|\\wscript\.exe|\\cscript\.exe|\\scrcons\.exe|\\regsvr32\.exe|\\hh\.exe|\\wmic\.exe|\\mshta\.exe|\\rundll32\.exe|\\forfiles\.exe|\\scriptrunner\.exe|\\mftrace\.exe|\\AppVLP\.exe)$</field>
    </rule>
    <rule id="113606" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_remote_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary might use WMI to execute commands on a remote system-->
        <!--Date: 2022/03/13-->
        <!--Status: experimental-->
        <!--ID: e42af9df-d90b-4306-b7fb-05c863847ebd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMI Remote Command Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\WMIC\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/node:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)process</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)call</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
    </rule>
    <rule id="113607" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_public_folder_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This rule detects suspicious processes with parent images located in the C:\Users\Public folder-->
        <!--Date: 2022/02/25-->
        <!--Status: experimental-->
        <!--ID: 69bd9b97-2be2-41b6-9816-fb08757a4d1a-->
        <description>Parent in Public Folder Suspicious Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)^(?:C:\\Users\\Public\\)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|cmd\.exe\ /c\ |cmd\ /c\ |wscript\.exe|cscript\.exe|bitsadmin|certutil|mshta\.exe</field>
    </rule>
    <rule id="113608" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_gallium.yml</info>
        <!--Sigma Rule Author: Tim Burrell-->
        <!--Description: Detects artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.-->
        <!--Date: 2020/02/07-->
        <!--Status: experimental-->
        <!--ID: 18739897-21b1-41da-8ee4-5b786915a676-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>GALLIUM Artefacts</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)e570585edc69f9074cb5e8a790708336bd45ca0f</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\Program\ Files\(x86\)\\|:\\Program\ Files\\</field>
    </rule>
    <rule id="113609" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_suspicious_parameter_variation.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Daniel Bohannon (idea), Roberto Rodriguez (Fix)-->
        <!--Description: Detects suspicious PowerShell invocation with a parameter substring-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 36210e0d-5b19-485d-a087-c096088885f0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Parameter Substring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-windowstyle\ h\ |\ \-windowstyl\ h|\ \-windowsty\ h|\ \-windowst\ h|\ \-windows\ h|\ \-windo\ h|\ \-wind\ h|\ \-win\ h|\ \-wi\ h|\ \-win\ h\ |\ \-win\ hi\ |\ \-win\ hid\ |\ \-win\ hidd\ |\ \-win\ hidde\ |\ \-NoPr\ |\ \-NoPro\ |\ \-NoProf\ |\ \-NoProfi\ |\ \-NoProfil\ |\ \-nonin\ |\ \-nonint\ |\ \-noninte\ |\ \-noninter\ |\ \-nonintera\ |\ \-noninterac\ |\ \-noninteract\ |\ \-noninteracti\ |\ \-noninteractiv\ |\ \-ec\ |\ \-encodedComman\ |\ \-encodedComma\ |\ \-encodedComm\ |\ \-encodedCom\ |\ \-encodedCo\ |\ \-encodedC\ |\ \-encoded\ |\ \-encode\ |\ \-encod\ |\ \-enco\ |\ \-en\ |\ \-executionpolic\ |\ \-executionpoli\ |\ \-executionpol\ |\ \-executionpo\ |\ \-executionp\ |\ \-execution\ bypass|\ \-executio\ bypass|\ \-executi\ bypass|\ \-execut\ bypass|\ \-execu\ bypass|\ \-exec\ bypass|\ \-exe\ bypass|\ \-ex\ bypass|\ \-ep\ bypass|\ /windowstyle\ h\ |\ /windowstyl\ h|\ /windowsty\ h|\ /windowst\ h|\ /windows\ h|\ /windo\ h|\ /wind\ h|\ /win\ h|\ /wi\ h|\ /win\ h\ |\ /win\ hi\ |\ /win\ hid\ |\ /win\ hidd\ |\ /win\ hidde\ |\ /NoPr\ |\ /NoPro\ |\ /NoProf\ |\ /NoProfi\ |\ /NoProfil\ |\ /nonin\ |\ /nonint\ |\ /noninte\ |\ /noninter\ |\ /nonintera\ |\ /noninterac\ |\ /noninteract\ |\ /noninteracti\ |\ /noninteractiv\ |\ /ec\ |\ /encodedComman\ |\ /encodedComma\ |\ /encodedComm\ |\ /encodedCom\ |\ /encodedCo\ |\ /encodedC\ |\ /encoded\ |\ /encode\ |\ /encod\ |\ /enco\ |\ /en\ |\ /executionpolic\ |\ /executionpoli\ |\ /executionpol\ |\ /executionpo\ |\ /executionp\ |\ /execution\ bypass|\ /executio\ bypass|\ /executi\ bypass|\ /execut\ bypass|\ /execu\ bypass|\ /exec\ bypass|\ /exe\ bypass|\ /ex\ bypass|\ /ep\ bypass</field>
    </rule>
    <rule id="113610" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_user_add.yml</info>
        <!--Sigma Rule Author: Endgame, JHasenbusch (adapted to Sigma for oscd.community)-->
        <!--Description: Identifies creation of local users via the net.exe command.-->
        <!--Date: 2018/10/30-->
        <!--Status: test-->
        <!--ID: cd219ff3-fa99-45d4-8380-a7d15116c6dc-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Net.exe User Account Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)user</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
    </rule>
    <rule id="113611" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdbinst_shim_persistence.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects installation of a new shim using sdbinst.exe. A shim can be used to load malicious DLLs into applications.-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 517490a7-115a-48c6-8862-1a481504d5a8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.011</id>
        </mitre>
        <description>Possible Shim Database Persistence via sdbinst.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sdbinst\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.sdb</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)iisexpressshim\.sdb</field>
    </rule>
    <rule id="113612" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_syncappvpublishingserver_vbs_execute_powershell.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs-->
        <!--Date: 2021/07/16-->
        <!--Status: experimental-->
        <!--ID: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1216</id>
        </mitre>
        <description>SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\SyncAppvPublishingServer\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"\\n;</field>
    </rule>
    <rule id="113613" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_extrac32.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Download or Copy file with Extrac32-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: aa8e035d-7be4-48d3-a944-102aec04400d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Suspicious Extrac32 Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)extrac32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/C|/Y|\ \\\\</field>
    </rule>
    <rule id="113614" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_del.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: suspicious command line to remove exe or dll-->
        <!--Date: 2021/12/02-->
        <!--Status: experimental-->
        <!--ID: 204b17ae-4007-471b-917b-b917b315c5db-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Suspicious Del in CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)del\ .+\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/q\ )</field>
    </rule>
    <rule id="113615" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_del.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: suspicious command line to remove exe or dll-->
        <!--Date: 2021/12/02-->
        <!--Status: experimental-->
        <!--ID: 204b17ae-4007-471b-917b-b917b315c5db-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Suspicious Del in CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)del\ .+\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\ProgramData\\</field>
    </rule>
    <rule id="113616" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: ac20ae82-8758-4f38-958e-b44a3140ca88-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="113617" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spn_enum.yml</info>
        <!--Sigma Rule Author: Markus Neis, keepwatch-->
        <!--Description: Detects Service Principal Name Enumeration used for Kerberoasting-->
        <!--Date: 2018/11/14-->
        <!--Status: test-->
        <!--ID: 1eeed653-dbc8-4187-ad0c-eeebb20e6599-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Possible SPN Enumeration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\setspn\.exe)$</field>
    </rule>
    <rule id="113618" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spn_enum.yml</info>
        <!--Sigma Rule Author: Markus Neis, keepwatch-->
        <!--Description: Detects Service Principal Name Enumeration used for Kerberoasting-->
        <!--Date: 2018/11/14-->
        <!--Status: test-->
        <!--ID: 1eeed653-dbc8-4187-ad0c-eeebb20e6599-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Possible SPN Enumeration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Query\ or\ reset\ the\ computer</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SPN\ attribute</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-q</field>
    </rule>
    <rule id="113619" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_without_parameters.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz, Relativity-->
        <!--Description: Detects rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module-->
        <!--Date: 2021/01/31-->
        <!--Status: experimental-->
        <!--ID: 5bb68627-3198-40ca-b458-49f973db8752-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1570</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Rundll32 Without Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe$</field>
    </rule>
    <rule id="113620" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_lsass_ppl.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects reg command lines that disables PPL on the LSA process-->
        <!--Date: 2022/03/22-->
        <!--Status: experimental-->
        <!--ID: 8c0eca51-0f88-4db2-9183-fdfb10c703f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.010</id>
        </mitre>
        <description>Registry Disabling LSASS PPL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SYSTEM\\CurrentControlSet\\Control\\Lsa</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /d\ 0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /v\ RunAsPPL\ )</field>
    </rule>
    <rule id="113621" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tap_installer_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 99793437-3e16-439b-be0f-078782cf953d-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Installer Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tapinstall\.exe)$</field>
    </rule>
    <rule id="113622" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2019_1388.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM-->
        <!--Date: 2019/11/20-->
        <!--Status: experimental-->
        <!--ID: 02e0b2ea-a597-428e-b04a-af6a1a403e5c-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Exploiting CVE-2019-1388</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\consent\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\iexplore\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ http</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
    </rule>
    <rule id="113623" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2019_1388.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM-->
        <!--Date: 2019/11/20-->
        <!--Status: experimental-->
        <!--ID: 02e0b2ea-a597-428e-b04a-af6a1a403e5c-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Exploiting CVE-2019-1388</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\consent\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\iexplore\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ http</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
    </rule>
    <rule id="113624" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_psexec_eula.yml</info>
        <!--Sigma Rule Author: omkar72 - https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html-->
        <!--Description: Detect ed user accept agreement execution in psexec commandline-->
        <!--Date: 2020/10/30-->
        <!--Status: test-->
        <!--ID: 730fc21b-eaff-474b-ad23-90fd265d4988-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>attack.t1021</id>
        </mitre>
        <description>Psexec Accepteula Condition</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\psexec\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)accepteula</field>
    </rule>
    <rule id="113625" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rclone_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc-->
        <!--Date: 2021/05/10-->
        <!--Status: experimental-->
        <!--ID: e37db05d-d1f9-49c8-b464-cee1a4b11638-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>Rclone Execution via Command Line or PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-config\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-no\-check\-certificate\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ copy\ )</field>
    </rule>
    <rule id="113626" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rclone_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc-->
        <!--Date: 2021/05/10-->
        <!--Status: experimental-->
        <!--ID: e37db05d-d1f9-49c8-b464-cee1a4b11638-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>Rclone Execution via Command Line or PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:pass|user|copy|sync|config|lsd|remote|ls|mega|pcloud|ftp|ignore\-existing|auto\-confirm|transfers|multi\-thread\-streams|no\-check\-certificate\ )</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Rsync\ for\ cloud\ storage</field>
    </rule>
    <rule id="113627" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rclone_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc-->
        <!--Date: 2021/05/10-->
        <!--Status: experimental-->
        <!--ID: e37db05d-d1f9-49c8-b464-cee1a4b11638-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>Rclone Execution via Command Line or PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:pass|user|copy|sync|config|lsd|remote|ls|mega|pcloud|ftp|ignore\-existing|auto\-confirm|transfers|multi\-thread\-streams|no\-check\-certificate\ )</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rclone\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\PowerShell\.exe|\\cmd\.exe)$</field>
    </rule>
    <rule id="113628" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_setupapi_installhinfsection.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 285b85b1-a555-4095-8652-a8a4106af63f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Rundll32 Setupapi.dll Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\runonce\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)setupapi\.dll</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)InstallHinfSection</field>
    </rule>
    <rule id="113629" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_regsvr32_image.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: utilizes REGSVR32.exe to execute this DLL masquerading as a Image file-->
        <!--Date: 2021/11/29-->
        <!--Status: experimental-->
        <!--ID: 089fc3d2-71e8-4763-a8a5-c97fbb0a403e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious Regsvr32 Execution With Image Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regsvr32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.jpg)$</field>
    </rule>
    <rule id="113630" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the SysInternals Procdump utility-->
        <!--Date: 2021/08/16-->
        <!--Status: experimental-->
        <!--ID: 2e65275c-8288-4ab4-aeb7-6274f58b6b20-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Procdump Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\procdump\.exe|\\procdump64\.exe)$</field>
    </rule>
    <rule id="113631" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the SysInternals Procdump utility-->
        <!--Date: 2021/08/16-->
        <!--Status: experimental-->
        <!--ID: 2e65275c-8288-4ab4-aeb7-6274f58b6b20-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Procdump Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="113632" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_compression_params.yml</info>
        <!--Sigma Rule Author: Florian Roth, Samir Bousseaden-->
        <!--Description: Detects suspicious command line arguments of common data compression tools-->
        <!--Date: 2019/10/15-->
        <!--Status: test-->
        <!--ID: 27a72a60-7e5e-47b1-9d17-909c9abafdcd-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Suspicious Compression Tool Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)7z.+\.exe|rar\.exe|Command.+Line.+RAR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-p|\ \-ta|\ \-tb|\ \-sdel|\ \-dw|\ \-hp</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\Program)</field>
    </rule>
    <rule id="113633" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cve_2021_26857_msexchange.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server&#8217;s Unified Messaging service-->
        <!--Date: 2021/03/03-->
        <!--Status: stable-->
        <!--ID: cd479ccc-d8f0-4c66-ba7d-e06286f3f887-->
        <mitre>
            <id>attack.t1203</id>
            <id>attack.execution</id>
            <id>cve.2021.26857</id>
        </mitre>
        <description>CVE-2021-26857 Exchange Exploitation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:UMWorkerProcess\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:wermgr\.exe|WerFault\.exe)$</field>
    </rule>
    <rule id="113634" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_service_imagepath_change.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: 9b0b7ac3-6223-47aa-a3fd-e8f211e637db-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Service ImagePath Change with Reg.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\SYSTEM\\CurrentControlSet\\Services\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/v\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:ImagePath\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ )</field>
    </rule>
    <rule id="113635" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmi_backdoor_exchange_transport_agent.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a WMI backdoor in Exchange Transport Agents via WMI event filters-->
        <!--Date: 2019/10/11-->
        <!--Status: test-->
        <!--ID: 797011dc-44f4-4e6f-9f10-a8ceefbe566b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Backdoor Exchange Transport Agent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\EdgeTransport\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\conhost\.exe</field>
    </rule>
    <rule id="113636" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hiding_malware_in_fonts_folder.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Monitors for the hiding possible malicious files in the C:\Windows\Fonts\ location. This folder doesn't require admin privillege to be written and executed from.-->
        <!--Date: 2020/04/21-->
        <!--Status: experimental-->
        <!--ID: ae9b0bd7-8888-4606-b444-0ed7410cb728-->
        <mitre>
            <id>attack.t1211</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Writing Of Malicious Files To The Fonts Folder</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo|copy|type|file\ createnew|cacls</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Fonts\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.sh|\.exe|\.dll|\.bin|\.bat|\.cmd|\.js|\.msh|\.reg|\.scr|\.ps|\.vb|\.jar|\.pl|\.inf|\.cpl|\.hta|\.msi|\.vbs</field>
    </rule>
    <rule id="113637" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_taskmgr_localsystem.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM-->
        <!--Date: 2018/03/18-->
        <!--Status: experimental-->
        <!--ID: 9fff585c-c33e-4a86-b3cd-39312079a65f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Taskmgr as LOCAL_SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\taskmgr\.exe)$</field>
    </rule>
    <rule id="113638" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_iss_module_install.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious IIS native-code module installations via command line-->
        <!--Date: 2012/12/11-->
        <!--Status: test-->
        <!--ID: 9465ddf4-f9e4-4ebd-8d98-702df3a93239-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>IIS Native-Code Module Command Line Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\appcmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)install</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)module</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/name:</field>
    </rule>
    <rule id="113639" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_spawn_exe_from_users_directory.yml</info>
        <!--Sigma Rule Author: Jason Lynch-->
        <!--Description: Detects an executable in the users directory started from Microsoft Word, Excel, Powerpoint, Publisher or Visio-->
        <!--Date: 2019/04/02-->
        <!--Status: experimental-->
        <!--ID: aa3a6f94-890e-4e22-b634-ffdfd54792cc-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.g0046</id>
            <id>car.2013-05-002</id>
        </mitre>
        <description>MS Office Product Spawning Exe in User Dir</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WINWORD\.EXE|\\EXCEL\.EXE|\\POWERPNT\.exe|\\MSPUB\.exe|\\VISIO\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\users\\)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\Teams\.exe)$</field>
    </rule>
    <rule id="113640" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pypykatz.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: a29808fd-ef50-49ff-9c7a-59a9b040b404-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Registry Parse with Pypykatz</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\pypykatz\.exe|\\python\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)live</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)registry</field>
    </rule>
    <rule id="113641" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_download_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)-->
        <!--Date: 2022/02/28-->
        <!--Status: experimental-->
        <!--ID: e6c54d94-498c-4562-a37c-b469d8e9a275-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download and Execute Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)IEX\ \(\(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\ \(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\(\(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\(New\-Object\ Net\.WebClient\)\.DownloadString|\ \-command\ \(New\-Object\ System\.Net\.WebClient\)\.DownloadFile\(|\ \-c\ \(New\-Object\ System\.Net\.WebClient\)\.DownloadFile\(</field>
    </rule>
    <rule id="113642" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_win_exchange_transportagent.yml</info>
        <!--Sigma Rule Author: Tobias Michalski-->
        <!--Description: Detects the Installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: experimental-->
        <!--ID: 83809e84-4475-4b69-bc3e-4aad8568612f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>MSExchange Transport Agent Installation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="113643" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_curl_useragent.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a suspicious curl process start on Windows with set useragent options-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: 3286d37a-00fd-41c2-a624-a672dcd34e60-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Suspicious Curl Change User Agents</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\curl\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-A\ |\ \-\-user\-agent\ )</field>
    </rule>
    <rule id="113644" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_b64_shellcode.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Base64 encoded Shellcode-->
        <!--Date: 2018/11/17-->
        <!--Status: stable-->
        <!--ID: 2d117e49-e626-4c7c-bd1f-c3c0147774c8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded Shellcode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)AAAAYInlM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OiCAAAAYInlM|OiJAAAAYInlM</field>
    </rule>
    <rule id="113645" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_path_modification.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects service path modification to PowerShell or cmd.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 138d3531-8793-4f50-a2cd-f291b2863d78-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Path Modification</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binpath</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|cmd</field>
    </rule>
    <rule id="113646" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_script_run.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects suspicious process related to rundll32 based on arguments-->
        <!--Date: 2021/12/04-->
        <!--Status: experimental-->
        <!--ID: 73fcad2e-ff14-4c38-b11d-4172c8ac86c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Rundll32 Script in CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshtml,RunHTMLApplication</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)javascript:|vbscript:</field>
    </rule>
    <rule id="113647" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_spawn_shell.yml</info>
        <!--Sigma Rule Author: Michael Haag-->
        <!--Description: Detects a Windows command line executable started from MSHTA-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 03cc0c25-389f-4bf8-b48d-11878079f1ca-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>car.2013-02-003</id>
            <id>car.2013-03-001</id>
            <id>car.2014-04-003</id>
        </mitre>
        <description>MSHTA Spawning Windows Shell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\sh\.exe|\\bash\.exe|\\reg\.exe|\\regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\BITSADMIN</field>
    </rule>
    <rule id="113648" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_curl_start_combo.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.-->
        <!--Date: 2020/01/13-->
        <!--Status: test-->
        <!--ID: 21dd6d38-2b18-4453-9404-a0fe4a0cc288-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Curl Start Combination</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)curl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ start\ )</field>
    </rule>
    <rule id="113649" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_enum.yml</info>
        <!--Sigma Rule Author: Endgame, JHasenbusch (ported for oscd.community)-->
        <!--Description: Identifies attempts to enumerate hosts in a network using the built-in Windows net.exe tool.-->
        <!--Date: 2018/10/30-->
        <!--Status: stable-->
        <!--ID: 62510e69-616b-4078-b371-847da438cc03-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>Windows Network Enumeration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)view</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\\\\\</field>
    </rule>
    <rule id="113650" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_adidnsdump.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,
Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP
-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>Suspicious Execution of Adidnsdump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\python\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)adidnsdump</field>
    </rule>
    <rule id="113651" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_mpcmdrun_download.yml</info>
        <!--Sigma Rule Author: Matthew Matchen-->
        <!--Description: Detect the use of Windows Defender to download payloads-->
        <!--Date: 2020/09/04-->
        <!--Status: test-->
        <!--ID: 46123129-1024-423e-9fae-43af4a0fa9a5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Windows Defender Download Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MpCmdRun\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Microsoft\ Malware\ Protection\ Command\ Line\ Utility</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DownloadFile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url</field>
    </rule>
    <rule id="113652" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_disable_feature.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects requests to disable Microsoft Defender features using PowerShell commands-->
        <!--Date: 2022/03/03-->
        <!--Status: experimental-->
        <!--ID: 1ec65a5f-9473-4f12-97da-622044d6df21-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Disable Scan Feature</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Add\-MpPreference\ |Set\-MpPreference\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:DisableRealtimeMonitoring\ |DisableIOAVProtection\ |DisableBehaviorMonitoring\ |DisableBlockAtFirstSeen\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\$true|\ 1\ )</field>
    </rule>
    <rule id="113653" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_disable_feature.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects requests to disable Microsoft Defender features using PowerShell commands-->
        <!--Date: 2022/03/03-->
        <!--Status: experimental-->
        <!--ID: 1ec65a5f-9473-4f12-97da-622044d6df21-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Disable Scan Feature</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">RGlzYWJsZVJlYWx0aW1lTW9uaXRvcmluZyA|RGlzYWJsZUlPQVZQcm90ZWN0aW9uIA|RGlzYWJsZUJlaGF2aW9yTW9uaXRvcmluZyA|RGlzYWJsZUJsb2NrQXRGaXJzdFNlZW4g|ZGlzYWJsZXJlYWx0aW1lbW9uaXRvcmluZyA|ZGlzYWJsZWlvYXZwcm90ZWN0aW9uIA|ZGlzYWJsZWJlaGF2aW9ybW9uaXRvcmluZyA|ZGlzYWJsZWJsb2NrYXRmaXJzdHNlZW4g|Rpc2FibGVSZWFsdGltZU1vbml0b3Jpbmcg|IERpc2FibGVJT0FWUHJvdGVjdGlvbiA|IERpc2FibGVCZWhhdmlvck1vbml0b3Jpbmcg|IERpc2FibGVCbG9ja0F0Rmlyc3RTZWVuIA|IGRpc2FibGVyZWFsdGltZW1vbml0b3Jpbmcg|IGRpc2FibGVpb2F2cHJvdGVjdGlvbiA|IGRpc2FibGViZWhhdmlvcm1vbml0b3Jpbmcg|IGRpc2FibGVibG9ja2F0Zmlyc3RzZWVuIA|EaXNhYmxlUmVhbHRpbWVNb25pdG9yaW5nIA|ICBEaXNhYmxlSU9BVlByb3RlY3Rpb24g|ICBEaXNhYmxlQmVoYXZpb3JNb25pdG9yaW5nIA|ICBEaXNhYmxlQmxvY2tBdEZpcnN0U2VlbiA|ICBkaXNhYmxlcmVhbHRpbWVtb25pdG9yaW5nIA|ICBkaXNhYmxlaW9hdnByb3RlY3Rpb24g|ICBkaXNhYmxlYmVoYXZpb3Jtb25pdG9yaW5nIA|ICBkaXNhYmxlYmxvY2thdGZpcnN0c2VlbiA</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA|EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA|RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA|QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA|EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA|RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA|EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA|RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA|QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA|EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA|ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA|kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA|ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA|QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA|kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA|ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA|kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA|ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA|QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA|kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA</field>
    </rule>
    <rule id="113654" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_where_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.
Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about
internal network resources such as servers, tools/dashboards, or other related infrastructure.
-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 725a9768-0f5e-4cb3-aec2-bc5719c6831a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1217</id>
        </mitre>
        <description>Suspicious Where Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\where\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Bookmarks|places\.sqlite</field>
    </rule>
    <rule id="113655" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_winrm_awl_bypass.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 074e0ded-6ced-4ebd-8b4d-53f55908119d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)winrm</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)format:pretty|format:"pretty"|format:"text"|format:text</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\)</field>
    </rule>
    <rule id="113656" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_getprocess_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity-->
        <!--Date: 2021/04/23-->
        <!--Status: experimental-->
        <!--ID: b2815d0d-7481-4bf0-9b6c-a4c48a94b349-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>PowerShell Get-Process LSASS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Process\ lsass</field>
    </rule>
    <rule id="113657" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_evilnum_jul20.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Golden Chickens deployment method as used by Evilnum in report published in July 2020-->
        <!--Date: 2020/07/10-->
        <!--Status: test-->
        <!--ID: 8acf3cfa-1e8c-4099-83de-a0c4038e18f0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>EvilNum Golden Chickens Deployment via OCX Files</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)regsvr32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/i</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\Roaming\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.ocx</field>
    </rule>
    <rule id="113658" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_tscon_rdp_redirect.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious RDP session redirect using tscon.exe-->
        <!--Date: 2018/03/17-->
        <!--Status: test-->
        <!--ID: f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1563.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Suspicious RDP Redirect Using TSCON</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /dest:rdp\-tcp:</field>
    </rule>
    <rule id="113659" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hacktool_imphashes.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Windows hacktools based on their import hash (imphash) even if the files have been renamed-->
        <!--Date: 2022/03/04-->
        <!--Status: experimental-->
        <!--ID: 24e3e58a-646b-4b50-adef-02ef935b9fc8-->
        <description>Windows Hacktool Imphash</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)BCCA3C247B619DCD13C8CDFF5F123932|3A19059BD7688CB88E70005F18EFC439|9DA6D5D77BE11712527DCAB86DF449A3|A6E01BC1AB89F8D91D9EAB72032AAE88|D21BBC50DCC169D7B4D0F01962793154|9528A0E91E28FBB88AD433FEABCA2456|4C1B52A19748428E51B14C278D0F58E3|725BB81DC24214F6ECACC0CFB36AD30D|672B13F4A0B6F27D29065123FE882DFC|0C106686A31BFE2BA931AE1CF6E9DBC6|23867A89C2B8FC733BE6CF5EF902F2D1|9FB060C2977A9D9B782440B98D410C3E|B18A1401FF8F444056D29450FBC0A6CE|13F08707F759AF6003837A150A371BA1|749A7BB1F0B4C4455949C0B2BF7F9E9F|94CB940A1A6B65BED4D5A8F849CE9793|1781F06048A7E58B323F0B9259BE798B|CB567F9498452721D77A451374955F5F|730073214094CD328547BF1F72289752|6EEFD92BFFBFB27F378B81C09CA96786|AC615FB1D93576FA3C26077A619C9144|DC25EE78E2EF4D36FAA0BADF1E7461C9|17B461A082950FC6332228572138B80C|C547F2E66061A8DFFB6F5A3FF63C0A74|0588081AB0E63BA785938467E1B10CCA|ADA161BF41B8E5E9132858CB54CAB5FB|2A1BC4913CD5ECB0434DF07CB675B798|11083E75553BAAE21DC89CE8F9A195E4|A23D29C9E566F2FA8FFBB79267F5DF80</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932|IMPHASH=3A19059BD7688CB88E70005F18EFC439|IMPHASH=9DA6D5D77BE11712527DCAB86DF449A3|IMPHASH=A6E01BC1AB89F8D91D9EAB72032AAE88|IMPHASH=D21BBC50DCC169D7B4D0F01962793154|IMPHASH=9528A0E91E28FBB88AD433FEABCA2456|IMPHASH=4C1B52A19748428E51B14C278D0F58E3|IMPHASH=725BB81DC24214F6ECACC0CFB36AD30D|IMPHASH=672B13F4A0B6F27D29065123FE882DFC|IMPHASH=0C106686A31BFE2BA931AE1CF6E9DBC6|IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1|IMPHASH=9FB060C2977A9D9B782440B98D410C3E|IMPHASH=B18A1401FF8F444056D29450FBC0A6CE|IMPHASH=13F08707F759AF6003837A150A371BA1|IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F|IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793|IMPHASH=1781F06048A7E58B323F0B9259BE798B|IMPHASH=CB567F9498452721D77A451374955F5F|IMPHASH=730073214094CD328547BF1F72289752|IMPHASH=6EEFD92BFFBFB27F378B81C09CA96786|IMPHASH=AC615FB1D93576FA3C26077A619C9144|IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9|IMPHASH=17B461A082950FC6332228572138B80C|IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74|IMPHASH=0588081AB0E63BA785938467E1B10CCA|IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB|IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798|IMPHASH=11083E75553BAAE21DC89CE8F9A195E4|IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80</field>
    </rule>
    <rule id="113660" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_trickbot_recon_activity.yml</info>
        <!--Sigma Rule Author: David Burkett, Florian Roth-->
        <!--Description: Trickbot enumerates domain/network topology and executes certain commands automatically every few minutes. This detectors attempts to identify that activity based off a command rarely observed in an enterprise network.-->
        <!--Date: 2019/12/28-->
        <!--Status: test-->
        <!--ID: 410ad193-a728-4107-bc79-4419789fcbf8-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Trickbot Malware Recon Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\nltest\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/domain_trusts\ /all_trusts</field>
    </rule>
    <rule id="113661" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_ieinstal.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: 80fc36aa-945e-4181-89f2-2f907ab6775d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IEInstal - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\ieinstal\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:consent\.exe)$</field>
    </rule>
    <rule id="113662" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/process_creation_apt_gamaredon_ultravnc.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)-->
        <!--Date: 2022/03/04-->
        <!--Status: experimental-->
        <!--ID: 871b9555-69ca-4993-99d3-35a59f9f3599-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.g0047</id>
            <id>attack.t1021.005</id>
        </mitre>
        <description>Suspicious UltraVNC Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-autoreconnect\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-connect\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-id:</field>
    </rule>
    <rule id="113663" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_base64_reflective_assembly_load.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects base64 encoded .NET reflective loading of Assembly-->
        <!--Date: 2022/03/01-->
        <!--Status: test-->
        <!--ID: 62b7ccc9-23b4-471e-aa15-6da3663c4d59-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Base64 Encoded Reflective Assembly Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA|sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA|bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA</field>
    </rule>
    <rule id="113664" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_paexec.yml</info>
        <!--Sigma Rule Author: Jason Lynch-->
        <!--Description: Detects execution of renamed paexec via imphash and executable product string-->
        <!--Date: 2019/04/17-->
        <!--Status: test-->
        <!--ID: 7b0666ad-3e38-4e3d-9bab-78b06de85f7b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
            <id>attack.g0046</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Execution of Renamed PaExec</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PAExec</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)11D40A7B7876288F919AB819CC2D9802|6444f8a34e99b8f7d9647de66aabe516|dfd6aa3f7b2b1035b76b718f1ddc689f|1a6cca4d5460b1710a12dea39e4a592c</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=11D40A7B7876288F919AB819CC2D9802|IMPHASH=6444f8a34e99b8f7d9647de66aabe516|IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f|IMPHASH=1a6cca4d5460b1710a12dea39e4a592c</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)paexec</field>
    </rule>
    <rule id="113665" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_workflow_compiler.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman, frack113-->
        <!--Description: Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 419dbf2b-8a9b-4bea-bf99-7544b050ec8d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1127</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Microsoft Workflow Compiler</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Microsoft\.Workflow\.Compiler\.exe)$</field>
    </rule>
    <rule id="113666" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_workflow_compiler.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman, frack113-->
        <!--Description: Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 419dbf2b-8a9b-4bea-bf99-7544b050ec8d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1127</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Microsoft Workflow Compiler</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Microsoft\.Workflow\.Compiler\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.xml</field>
    </rule>
    <rule id="113667" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_exclusion.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets-->
        <!--Date: 2021/04/29-->
        <!--Status: experimental-->
        <!--ID: 17769c90-230e-488b-a463-e05c08e9d48f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Exclusion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Add\-MpPreference\ |Set\-MpPreference\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ExclusionPath\ |\ \-ExclusionExtension\ |\ \-ExclusionProcess\ )</field>
    </rule>
    <rule id="113668" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_ke3chang_regadd.yml</info>
        <!--Sigma Rule Author: Markus Neis, Swisscom-->
        <!--Description: Detects Registry modifications performed by Ke3chang malware in campaigns running in 2019 and 2020-->
        <!--Date: 2020/06/18-->
        <!--Status: test-->
        <!--ID: 7b544661-69fc-419f-9a59-82ccc328f205-->
        <mitre>
            <id>attack.g0004</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Ke3chang Registry Key Modifications</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Property\ DWORD\ \-name\ DisableFirstRunCustomize\ \-value\ 2\ \-Force|\-Property\ String\ \-name\ Check_Associations\ \-value|\-Property\ DWORD\ \-name\ IEHarden\ \-value\ 0\ \-Force</field>
    </rule>
    <rule id="113669" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_network_sniffing.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: ba1f7802-adc7-48b4-9ecb-81e227fddfd5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Network Sniffing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tshark\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-i</field>
    </rule>
    <rule id="113670" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_whoami.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of whoami, which is often used by attackers after exloitation / privilege escalation but rarely used by administrators-->
        <!--Date: 2018/08/13-->
        <!--Status: test-->
        <!--ID: e28a5a99-da44-436d-b7a0-2afc20a5f413-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Whoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
    </rule>
    <rule id="113671" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_download_iex.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious ways to download files or content using PowerShell-->
        <!--Date: 2022/03/24-->
        <!--Status: experimental-->
        <!--ID: 85b0b087-eddf-4a2b-b033-d771fa2b9775-->
        <description>PowerShell Web Download and Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.DownloadString\(|\.DownloadFile\(</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)IEX\(|IEX\ \(|I`EX|IE`X|I`E`X|\ \|\ IEX|\|IEX\ |Invoke\-Execution|;iex\ \$</field>
    </rule>
    <rule id="113672" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_dacl_modification.yml</info>
        <!--Sigma Rule Author: Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious DACL modifications that can  be used to hide services or make them unstopable-->
        <!--Date: 2020/10/16-->
        <!--Status: test-->
        <!--ID: 99cf1e02-00fb-4c0d-8375-563f978dfd37-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service DACL Modification</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sdset</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)D;;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i);;;IU|;;;SU|;;;BA|;;;SY|;;;WD</field>
    </rule>
    <rule id="113673" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_run_powershell_script_from_ads.yml</info>
        <!--Sigma Rule Author: Sergey Soldatov, Kaspersky Lab, oscd.community-->
        <!--Description: Detects PowerShell script execution from Alternate Data Stream (ADS)-->
        <!--Date: 2019/10/30-->
        <!--Status: test-->
        <!--ID: 45a594aa-1fbd-4972-a809-ff5a99dd81b8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Run PowerShell Script from ADS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Content</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Stream</field>
    </rule>
    <rule id="113674" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_devinit_lolbin.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a certain command line flag combination used by devinit.exe lolbin to download arbitrary MSI packages on a Windows system-->
        <!--Date: 2022/01/11-->
        <!--Status: experimental-->
        <!--ID: 90d50722-0483-4065-8e35-57efaadd354d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>DevInit Lolbin Download</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ msi\-install\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-i\ http</field>
    </rule>
    <rule id="113675" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_script_event_consumer_spawn.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects a suspicious child process of Script Event Consumer (scrcons.exe).-->
        <!--Date: 2021/06/21-->
        <!--Status: experimental-->
        <!--ID: f6d1dd2f-b8ce-40ca-bc23-062efb686b34-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Script Event Consumer Spawning Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\scrcons\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe|\\dllhost\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\schtasks\.exe|\\regsvr32\.exe|\\mshta\.exe|\\rundll32\.exe|\\msiexec\.exe|\\msbuild\.exe)$</field>
    </rule>
    <rule id="113676" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_computerdefaults.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using computerdefaults.exe (UACMe 59)-->
        <!--Date: 2021/08/31-->
        <!--Status: experimental-->
        <!--ID: 3c05e90d-7eba-4324-9972-5d7f711a60a8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using ComputerDefaults</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\ComputerDefaults\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\\\Windows\\\\System32|:\\Program\ Files</field>
    </rule>
    <rule id="113677" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_megasync.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects the execution of a renamed meg.exe of MegaSync during incident response engagements associated with ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.-->
        <!--Date: 2021/06/22-->
        <!--Status: experimental-->
        <!--ID: 643bdcac-8b82-49f4-9fd9-25a90b929f3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Renamed MegaSync</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\explorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Temp\\meg\.exe</field>
    </rule>
    <rule id="113678" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_megasync.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects the execution of a renamed meg.exe of MegaSync during incident response engagements associated with ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.-->
        <!--Date: 2021/06/22-->
        <!--Status: experimental-->
        <!--ID: 643bdcac-8b82-49f4-9fd9-25a90b929f3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Renamed MegaSync</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)meg\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\meg\.exe)$</field>
    </rule>
    <rule id="113679" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtasks_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious scheduled task creations with commands that are uncommon-->
        <!--Date: 2022/02/23-->
        <!--Status: experimental-->
        <!--ID: f2c64357-b1d2-41b7-849f-34d2682c0fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Add Scheduled Command Pattern</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/sc\ minute\ |/ru\ system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /c\ |cmd\ /c</field>
    </rule>
    <rule id="113680" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtasks_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious scheduled task creations with commands that are uncommon-->
        <!--Date: 2022/02/23-->
        <!--Status: experimental-->
        <!--ID: f2c64357-b1d2-41b7-849f-34d2682c0fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Add Scheduled Command Pattern</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/sc\ minute\ |/ru\ system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ bypass\ |\.DownloadString|\.DownloadFile|FromBase64String|\ \-w\ hidden\ |\ IEX|\ \-enc\ |\ \-decode\ |/c\ start\ /min\ |\ curl\ )</field>
    </rule>
    <rule id="113681" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtasks_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious scheduled task creations with commands that are uncommon-->
        <!--Date: 2022/02/23-->
        <!--Status: experimental-->
        <!--ID: f2c64357-b1d2-41b7-849f-34d2682c0fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Add Scheduled Command Pattern</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/sc\ minute\ |/ru\ system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/xml\ C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\Local\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wscript\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\</field>
    </rule>
    <rule id="113682" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_download_via_gfxdownloadwrapper.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects when GfxDownloadWrapper.exe downloads file from non standard URL-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: eee00933-a761-4cd0-be70-c42fe91731e7-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>GfxDownloadWrapper.exe Downloads File from Suspicious URL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\GfxDownloadWrapper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)gameplayapi\.intel\.com</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\GfxDownloadWrapper\.exe)$</field>
    </rule>
    <rule id="113683" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_dtrack.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects specific process parameters as seen in DTRACK infections-->
        <!--Date: 2019/10/30-->
        <!--Status: stable-->
        <!--ID: f1531fa4-5b84-4342-8f68-9cf3fdbd83d4-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>DTRACK Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ echo\ EEEE\ &gt;\ )</field>
    </rule>
    <rule id="113684" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bcdedit.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects, possibly, malicious unauthorized usage of bcdedit.exe-->
        <!--Date: 2019/02/07-->
        <!--Status: experimental-->
        <!--ID: c9fbe8e9-119d-40a6-9b59-dd58a5d84429-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.persistence</id>
            <id>attack.t1542.003</id>
        </mitre>
        <description>Possible Ransomware or Unauthorized MBR Modifications</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\bcdedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete|deletevalue|import|safeboot|network</field>
    </rule>
    <rule id="113685" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_bear_activity_gtr19.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Russian group activity as described in Global Threat Report 2019 by Crowdstrike-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: b83f5166-9237-4b5e-9cd4-7b5d52f4d8ee-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Judgement Panda Credential Access Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\xcopy\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/S</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/E</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/C</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Q</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/H</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\</field>
    </rule>
    <rule id="113686" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_bear_activity_gtr19.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Russian group activity as described in Global Threat Report 2019 by Crowdstrike-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: b83f5166-9237-4b5e-9cd4-7b5d52f4d8ee-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Judgement Panda Credential Access Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\adexplorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-snapshot</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)""</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)c:\\users\\</field>
    </rule>
    <rule id="113687" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_process_dump_rdrleakdiag.yml</info>
        <!--Sigma Rule Author: Cedric MAURUGEON-->
        <!--Description: Detects a process memory dump performed by RdrLeakDiag.exe-->
        <!--Date: 2021/09/24-->
        <!--Status: experimental-->
        <!--ID: edadb1e5-5919-4e4c-8462-a9e643b02c4b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Dump via RdrLeakDiag.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RdrLeakDiag\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)fullmemdmp</field>
    </rule>
    <rule id="113688" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vul_java_remote_debugging.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a JAVA process running with remote debugging allowing more than just localhost to connect-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8f88e3f6-2a49-48f5-a5c4-2f7eedf78710-->
        <mitre>
            <id>attack.t1203</id>
            <id>attack.execution</id>
        </mitre>
        <description>Java Running with Remote Debugging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)transport=dt_socket,address=</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)address=127\.0\.0\.1</field>
    </rule>
    <rule id="113689" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_logmein.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: d85873ef-a0f8-4c48-a53a-6b621f11729d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of LogMeIn Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)LMIGuardianSvc</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)LMIGuardianSvc</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)LogMeIn,\ Inc\.</field>
    </rule>
    <rule id="113690" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_defender_exclusion.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Qbot used reg.exe to add Defender folder exceptions for folders within AppData and ProgramData.-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: 48917adc-a28e-4f5d-b729-11e75da8941f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Registry Defender Exclusions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\SOFTWARE\\Microsoft\\Windows\ Defender\\Exclusions\\Paths\\|HKLM\\SOFTWARE\\Microsoft\\Microsoft\ Antimalware\\Exclusions\\Paths</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:ADD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:REG_DWORD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/v\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="113691" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_base64.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects base64 encoded PowerShell code that modifies Windows Defender-->
        <!--Date: 2022/03/04-->
        <!--Status: experimental-->
        <!--ID: c6fb44c6-71f5-49e6-9462-1425d328aee3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Base64 MpPreference</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">QWRkLU1wUHJlZmVyZW5jZSA|U2V0LU1wUHJlZmVyZW5jZSA|YWRkLW1wcHJlZmVyZW5jZSA|c2V0LW1wcHJlZmVyZW5jZSA|FkZC1NcFByZWZlcmVuY2Ug|IFNldC1NcFByZWZlcmVuY2Ug|IGFkZC1tcHByZWZlcmVuY2Ug|IHNldC1tcHByZWZlcmVuY2Ug|BZGQtTXBQcmVmZXJlbmNlIA|ICBTZXQtTXBQcmVmZXJlbmNlIA|ICBhZGQtbXBwcmVmZXJlbmNlIA|ICBzZXQtbXBwcmVmZXJlbmNlIA</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)QQBkAGQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA|EAZABkAC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA|BAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA|UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA|MAZQB0AC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA|TAGUAdAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA|YQBkAGQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA|EAZABkAC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA|hAGQAZAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA|cwBlAHQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA|MAZQB0AC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA|zAGUAdAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA</field>
    </rule>
    <rule id="113692" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_base64_listing_shadowcopy.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects base64 encoded listing Win32_Shadowcopy-->
        <!--Date: 2022/03/01-->
        <!--Status: test-->
        <!--ID: 47688f1b-9f51-4656-b013-3cc49a166a36-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Base64 Encoded Listing of Shadowcopy</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA|cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A|XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA</field>
    </rule>
    <rule id="113693" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_downgrade_attack.yml</info>
        <!--Sigma Rule Author: Harish Segar (rule)-->
        <!--Description: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0-->
        <!--Date: 2020/03/20-->
        <!--Status: test-->
        <!--ID: b3512211-c67e-4707-bedc-66efc7848863-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Downgrade Attack</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-version\ 2\ |\ \-versio\ 2\ |\ \-versi\ 2\ |\ \-vers\ 2\ |\ \-ver\ 2\ |\ \-ve\ 2\ )</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
    </rule>
    <rule id="113694" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_creation_mavinject_dll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.-->
        <!--Date: 2021/07/12-->
        <!--Status: experimental-->
        <!--ID: 4f73421b-5a0b-4bbf-a892-5a7fb99bea66-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.collection</id>
            <id>attack.t1218</id>
            <id>attack.t1056.004</id>
        </mitre>
        <description>Mavinject Inject DLL Into Running Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /INJECTRUNNING</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mavinject</field>
    </rule>
    <rule id="113695" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regini.yml</info>
        <!--Sigma Rule Author: Eli Salem, Sander Wiebing, oscd.community-->
        <!--Description: Detects the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files.-->
        <!--Date: 2020/10/08-->
        <!--Status: experimental-->
        <!--ID: 5f60740a-f57b-4e76-82a1-15b6ff2cb134-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Modifies the Registry From a File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regini\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):[^ \\\\]</field>
    </rule>
    <rule id="113696" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netcat_execution.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: e31033fc-33f0-4020-9a16-faf9b31cbf08-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>Ncat Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\ncat\.exe|\\netcat\.exe)$</field>
    </rule>
    <rule id="113697" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netcat_execution.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: e31033fc-33f0-4020-9a16-faf9b31cbf08-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>Ncat Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-lvp\ |\ \-lvnp|\ \-l\ \-v\ \-p\ |\ \-lv\ \-p\ |\ \-l\ \-\-proxy\-type\ http\ |\ \-\-exec\ cmd\.exe\ |\ \-vnl\ \-\-exec\ )</field>
    </rule>
    <rule id="113698" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detect various execution methods of the CrackMapExec pentesting framework-->
        <!--Date: 2020/05/22-->
        <!--Status: stable-->
        <!--ID: 058f4380-962d-40a5-afce-50207d36d7e2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.s0106</id>
        </mitre>
        <description>CrackMapExec Command Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\.exe\ /Q\ /c\ .+\ 1&gt;\ \\\\\\\\.+\\\\.+\\\\.+\ 2&gt;\&amp;1|cmd\.exe\ /C\ .+\ &gt;\ \\\\\\\\.+\\\\.+\\\\.+\ 2&gt;\&amp;1|cmd\.exe\ /C\ .+\ &gt;\ .+\\\\Temp\\\\.+\ 2&gt;\&amp;1)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:powershell\.exe\ \-exec\ bypass\ \-noni\ \-nop\ \-w\ 1\ \-C\ "|powershell\.exe\ \-noni\ \-nop\ \-w\ 1\ \-enc\ )</field>
    </rule>
    <rule id="113699" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shadow_copies_creation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Shadow Copies creation using operating systems utilities, possible credential access-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: b17ea6f7-6e90-447e-a799-e6c0a493d6ce-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Shadow Copies Creation Using Operating Systems Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\wmic\.exe|\\vssadmin\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shadow</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
    </rule>
    <rule id="113700" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_embed_exe_lnk.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects events that appear when a user click on a link file with a powershell command in it-->
        <!--Date: 2022/02/06-->
        <!--Status: experimental-->
        <!--ID: 30e92f50-bb5a-4884-98b5-d20aa80f3d7a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Hidden Powershell in Link File Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\explorer\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.lnk</field>
    </rule>
    <rule id="113701" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rpcping.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process.-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 93671f99-04eb-4ab4-a161-70d446a84003-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Capture Credentials with Rpcping.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rpcping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-s|/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-u</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/u</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-t</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ncacn_np</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ncacn_np</field>
    </rule>
    <rule id="113702" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_nmap.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: f6ecd1cf-19b8-4488-97f6-00f0924991a3-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Suspicious Nmap Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)nmap\.exe</field>
    </rule>
    <rule id="113703" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_atlassian_confluence_cve_2021_26084_exploit.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2021-26084-->
        <!--Date: 2021/09/08-->
        <!--Status: experimental-->
        <!--ID: 245f92e3-c4da-45f1-9070-bc552e06db11-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.execution</id>
            <id>attack.t1190</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Atlassian Confluence CVE-2021-26084</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\Atlassian\\Confluence\\jre\\bin\\java\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\ /c|cmd\ /k|powershell|certutil|curl|whoami|ipconfig</field>
    </rule>
    <rule id="113704" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_iex_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious ways to run Invoke-Execution using IEX acronym-->
        <!--Date: 2022/03/24-->
        <!--Status: experimental-->
        <!--ID: 09576804-7a05-458e-a817-eb718ca91f54-->
        <description>Suspicious PowerShell IEX Execution Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-'\ \|\ iex;'\ \-'\ \|\ iex\ '\ \-'\ \|\ iex\}'\ \-'\ \|\ IEX;'\ \-'\ \|\ IEX\ ;'\ \-'\ \|\ IEX\ \-Error'\ \-'\ \|\ IEX\ \(new'\ \-'\ \|\ IEX\ \(New'\ \-'\);IEX\ '</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::FromBase64String|\.GetString\(\[System\.Convert\]::</field>
    </rule>
    <rule id="113705" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_iex_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious ways to run Invoke-Execution using IEX acronym-->
        <!--Date: 2022/03/24-->
        <!--Status: experimental-->
        <!--ID: 09576804-7a05-458e-a817-eb718ca91f54-->
        <description>Suspicious PowerShell IEX Execution Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-'\)\|iex;\$'\ \-'\)\|IEX;\$'\ \-'\);iex\(\$'\ \-'\);iex\ \$'\ \-'\ \|\ IEX\ \|\ '</field>
    </rule>
    <rule id="113706" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmstp_execution_by_creation.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman-->
        <!--Description: Detects various indicators of Microsoft Connection Manager Profile Installer execution-->
        <!--Date: 2018/07/16-->
        <!--Status: stable-->
        <!--ID: 7d4cdc5a-0076-40ca-aac8-f7e714570e47-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.003</id>
            <id>attack.g0069</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP Execution Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\cmstp\.exe)$</field>
    </rule>
    <rule id="113707" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573-->
        <!--Description: Detects the use of various web request with commandline tools or Windows PowerShell command,methods (including aliases)-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Windows Suspicious Use Of Web Request in CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |Net\.WebClient|Start\-BitsTransfer</field>
    </rule>
    <rule id="113708" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2015_1641.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Winword starting uncommon sub process MicroScMgmt.exe as used in exploits for CVE-2015-1641-->
        <!--Date: 2018/02/22-->
        <!--Status: stable-->
        <!--ID: 7993792c-5ce2-4475-a3db-a3a5539827ef-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Exploit for CVE-2015-1641</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WINWORD\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\MicroScMgmt\.exe)$</field>
    </rule>
    <rule id="113709" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_systeminfo.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of systeminfo to get information-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 0ef56343-059e-4cb6-adc1-4c3c967c5e46-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Execution of Systeminfo</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\systeminfo\.exe)$</field>
    </rule>
    <rule id="113710" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_new_service_creation.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects creation of a new service.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 7fe71fc9-de3b-432a-8d57-8c809efc10ab-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>New Service Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binpath</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-service</field>
    </rule>
    <rule id="113711" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_bitsjob.yml</info>
        <!--Sigma Rule Author: Endgame, JHasenbusch (ported to sigma for oscd.community)-->
        <!--Description: Detect download by BITS jobs via PowerShell-->
        <!--Date: 2018/10/30-->
        <!--Status: test-->
        <!--ID: f67dbfce-93bc-440d-86ad-a95ae8858c90-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Suspicious Bitsadmin Job via PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Start\-BitsTransfer</field>
    </rule>
    <rule id="113712" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_meterpreter_or_cobaltstrike_getsystem_service_start.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting-->
        <!--Date: 2019/10/26-->
        <!--Status: experimental-->
        <!--ID: 15619216-e993-4721-b590-4c520615a67d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Start</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\services\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/p:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)MpCmdRun</field>
    </rule>
    <rule id="113713" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_register_cimprovider.yml</info>
        <!--Sigma Rule Author: Ivan Dyachkov, Yulia Fomina, oscd.community-->
        <!--Description: Detects using register-cimprovider.exe to execute arbitrary dll file.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: a2910908-e86f-4687-aeba-76a5f996e652-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574</id>
        </mitre>
        <description>DLL Execution Via Register-cimprovider.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\register\-cimprovider\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-path</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dll</field>
    </rule>
    <rule id="113714" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml</info>
        <!--Sigma Rule Author: @Kostastsale, @TheDFIRReport, slightly modified by pH-T-->
        <!--Description: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Scheduled Task Executing Powershell Encoded Payload from Registry</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/SC</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)FromBase64String</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-ItemProperty</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU:|HKLM:|registry::|HKEY_</field>
    </rule>
    <rule id="113715" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ps_appdata.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder-->
        <!--Date: 2019/01/09-->
        <!--Status: experimental-->
        <!--ID: ac175779-025a-4f12-98b0-acdaeb77ea85-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Script Run in AppData</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell\.exe|\\powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Local\\|Roaming\\</field>
    </rule>
    <rule id="113716" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_gpp_passwords.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.-->
        <!--Date: 2021/12/27-->
        <!--Status: experimental-->
        <!--ID: 91a2c315-9ee6-4052-a853-6f6a8238f90d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Findstr GPP Passwords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\findstr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cpassword</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\sysvol\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.xml</field>
    </rule>
    <rule id="113717" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_clip.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may collect data stored in the clipboard from users copying information within or between applications.-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: ddeff553-5233-4ae9-bbab-d64d2bd634be-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1115</id>
        </mitre>
        <description>Use of CLIP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)clip\.exe</field>
    </rule>
    <rule id="113718" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bginfo.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Execute VBscript code that is referenced within the *.bgi file.-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: aaf46cdc-934e-4284-b329-34aa701e3771-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Application Whitelisting Bypass via Bginfo</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\bginfo\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/popup</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/nolicprompt</field>
    </rule>
    <rule id="113719" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_spawning_wmi_commandline.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: Initial execution of malicious document calls wmic to execute the file with regsvr32-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 04f5363a-6bca-42ff-be70-0d28bf629ead-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Office Applications Spawning Wmi Cli</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wbem\\WMIC\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:wmic\ )</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)winword\.exe|excel\.exe|powerpnt\.exe</field>
    </rule>
    <rule id="113720" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_psexex_paexec_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious flags used by PsExec and PAExec but no usual program name in command line-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: 207b0396-3689-42d9-8399-4222658efc99-->
        <mitre>
            <id>attack.develop_capabilities</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>PsExec/PAExec Flags</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-s\ cmd\.exe|\ \-s\ \-i\ cmd\.exe)$</field>
    </rule>
    <rule id="113721" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_psexex_paexec_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious flags used by PsExec and PAExec but no usual program name in command line-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: 207b0396-3689-42d9-8399-4222658efc99-->
        <mitre>
            <id>attack.develop_capabilities</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>PsExec/PAExec Flags</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)accepteula</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \\\\</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)paexec|PsExec</field>
    </rule>
    <rule id="113722" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_binary.yml</info>
        <!--Sigma Rule Author: Matthew Green - @mgreen27, Ecco, James Pemberton / @4A616D6573, oscd.community (improvements), Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.-->
        <!--Date: 2019/06/15-->
        <!--Status: test-->
        <!--ID: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)cmd\.exe|CONHOST\.EXE|powershell\.exe|powershell_ise\.exe|psexec\.exe|psexec\.c|cscript\.exe|wscript\.exe|mshta\.exe|regsvr32\.exe|wmic\.exe|certutil\.exe|rundll32\.exe|cmstp\.exe|msiexec\.exe|7z\.exe|winrar\.exe|wevtutil\.exe|net\.exe|net1\.exe|netsh\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\cmd\.exe|\\conhost\.exe|\\powershell\.exe|\\powershell_ise\.exe|\\psexec\.exe|\\psexec64\.exe|\\cscript\.exe|\\wscript\.exe|\\mshta\.exe|\\regsvr32\.exe|\\wmic\.exe|\\certutil\.exe|\\rundll32\.exe|\\cmstp\.exe|\\msiexec\.exe|\\7z\.exe|\\winrar\.exe|\\wevtutil\.exe|\\net\.exe|\\net1\.exe|\\netsh\.exe)$</field>
    </rule>
    <rule id="113723" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_winrar_dmp.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious winrar execution that involves a file with a .dmp extension, which could be a step in a process of dump file exfiltration-->
        <!--Date: 2022/01/04-->
        <!--Status: experimental-->
        <!--ID: 1ac14d38-3dfc-4635-92c7-e3fd1c5f5bfc-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Winrar Compressing Dump Files</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rar\.exe|\\winrar\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\ line\ RAR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="113724" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dotnet.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: dotnet.exe will execute any DLL and execute unsigned code-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: d80d5c81-04ba-45b4-84e4-92eba40e0ad3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Dotnet.exe Exec Dll and Execute Unsigned Code LOLBIN</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dll|\.csproj)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dotnet\.exe)$</field>
    </rule>
    <rule id="113725" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sticky_keys_unauthenticated_privileged_cmd_access.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system. When the sticky keys are "activated" the privilleged shell is launched.-->
        <!--Date: 2020/02/18-->
        <!--Status: experimental-->
        <!--ID: 1070db9a-3e5d-412e-8e7b-7183b616e1b3-->
        <mitre>
            <id>attack.t1546.008</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Using Sticky-keys To Obtain Unauthenticated, Privileged Console Access</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy\ /y\ C:\\\\Windows\\\\system32\\cmd\.exe\ C:\\\\Windows\\\\system32\\sethc\.exe</field>
    </rule>
    <rule id="113726" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_ta17_293a_ps.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report-->
        <!--Date: 2017/10/22-->
        <!--Status: test-->
        <!--ID: 18da1007-3f26-470f-875d-f77faf1cab31-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.g0035</id>
            <id>attack.t1036.003</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Ps.exe Renamed SysInternals Tool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ps\.exe\ \-accepteula</field>
    </rule>
    <rule id="113727" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_delete.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may delete files left behind by the actions of their intrusion activity.
Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.
Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.
-->
        <!--Date: 2022/01/15-->
        <!--Status: experimental-->
        <!--ID: 379fa130-190e-4c3f-b7bc-6c8e834485f3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Windows Cmd Delete File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:del\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rmdir</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/q</field>
    </rule>
    <rule id="113728" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_frombase64string.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious FromBase64String expressions in command line arguments-->
        <!--Date: 2020/01/29-->
        <!--Status: test-->
        <!--ID: e32d4572-9826-4738-b651-95fa63747e8a-->
        <mitre>
            <id>attack.t1027</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>FromBase64String Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::FromBase64String\(</field>
    </rule>
    <rule id="113729" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_system_exe_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth, Patrick Bareiss, Anton Kutepov, oscd.community-->
        <!--Description: Detects a Windows program executable started in a suspicious folder-->
        <!--Date: 2017/11/27-->
        <!--Status: experimental-->
        <!--ID: e4a6b256-3e47-40fc-89d2-7a477edd6915-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>System File Execution Location Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe|\\rundll32\.exe|\\services\.exe|\\powershell\.exe|\\regsvr32\.exe|\\spoolsv\.exe|\\lsass\.exe|\\smss\.exe|\\csrss\.exe|\\conhost\.exe|\\wininit\.exe|\\lsm\.exe|\\winlogon\.exe|\\explorer\.exe|\\taskhost\.exe|\\Taskmgr\.exe|\\sihost\.exe|\\RuntimeBroker\.exe|\\smartscreen\.exe|\\dllhost\.exe|\\audiodg\.exe|\\wlanext\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\\\Windows\\\\\\System32\\|C:\\\\Windows\\\\system32\\|C:\\\\Windows\\\\SysWow64\\|C:\\\\Windows\\\\SysWOW64\\|C:\\\\Windows\\\\winsxs\\|C:\\\\Windows\\\\WinSxS\\|C:\\avast!\ sandbox)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\SystemRoot\\System32\\</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\explorer\.exe</field>
    </rule>
    <rule id="113730" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_nsudo_as_system.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of NSudo tool for command execution-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 771d1eb5-9587-4568-95fb-9ec44153a012-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>NSudo Tool Execution As System</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\NSudo\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-U:S\ )</field>
    </rule>
    <rule id="113731" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_vboxdrvinst.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: Detect VBoxDrvInst.exe run with parameters allowing processing INF file. This allows to create values in the registry and install drivers. For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: b7b19cb6-9b32-4fc4-a108-73f19acfe262-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Suspicious VBoxDrvInst.exe Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\VBoxDrvInst\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)driver</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)executeinf</field>
    </rule>
    <rule id="113732" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_psexex_paexec_escalate_system.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights-->
        <!--Date: 2021/11/23-->
        <!--Status: experimental-->
        <!--ID: 8834e2f7-6b4b-4f09-8906-d2276470ee23-->
        <mitre>
            <id>attack.develop_capabilities</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>PsExec/PAExec Escalation to LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:PsExec|PAExec|accepteula|cmd\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-s\ cmd\.exe)$</field>
    </rule>
    <rule id="113733" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_procdump_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process. This way we're also able to catch cases in which the attacker has renamed the procdump executable.-->
        <!--Date: 2018/10/30-->
        <!--Status: stable-->
        <!--ID: 5afee48e-67dd-4e03-a783-f74259dcf998-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Suspicious Use of Procdump on LSASS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ lsass</field>
    </rule>
    <rule id="113734" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_procdump_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process. This way we're also able to catch cases in which the attacker has renamed the procdump executable.-->
        <!--Date: 2018/10/30-->
        <!--Status: stable-->
        <!--ID: 5afee48e-67dd-4e03-a783-f74259dcf998-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Suspicious Use of Procdump on LSASS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ ls</field>
    </rule>
    <rule id="113735" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2017_0261.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262-->
        <!--Date: 2018/02/22-->
        <!--Status: test-->
        <!--ID: 864403a1-36c9-40a2-a982-4c9a45f7d833-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.t1204.002</id>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Exploit for CVE-2017-0261</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WINWORD\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\FLTLDR\.exe</field>
    </rule>
    <rule id="113736" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtask_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of scheduled tasks in user session-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 92626ddd-662c-49e3-ac59-f6535f12d189-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
            <id>car.2013-08-001</id>
        </mitre>
        <description>Scheduled Task Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /create\ )</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
    </rule>
    <rule id="113737" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_hydra.yml</info>
        <!--Sigma Rule Author: Vasiliy Burov-->
        <!--Description: Detects command line parameters used by Hydra password guessing hack tool-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: aaafa146-074c-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>Hydra Password Guessing Hack Tool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\^USER\^|\^PASS\^</field>
    </rule>
    <rule id="113738" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dns_serverlevelplugindll.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the installation of a plugin DLL via ServerLevelPluginDll parameter in Registry, which can be used to execute code in context of the DNS server (restart required)-->
        <!--Date: 2017/05/08-->
        <!--Status: experimental-->
        <!--ID: f63b56ee-3f79-4b8a-97fb-5c48007e8573-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1112</id>
        </mitre>
        <description>DNS ServerLevelPluginDll Install</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dnscmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/serverlevelplugindll</field>
    </rule>
    <rule id="113739" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 27aec9c9-dbb0-4939-8422-1742242471d0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"</field>
    </rule>
    <rule id="113740" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lethalhta.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects MSHTA.EXE spwaned by SVCHOST as seen in LethalHTA and described in report-->
        <!--Date: 2018/06/07-->
        <!--Status: test-->
        <!--ID: ed5d72a6-f8f4-479d-ba79-02f6a80d7471-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>MSHTA Spwaned by SVCHOST</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
    </rule>
    <rule id="113741" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_nircmd_as_system.yml</info>
        <!--Sigma Rule Author: Florian Roth, Nasreddine Bencherchali @nas_bench-->
        <!--Description: Detects the use of NirCmd tool for command execution as SYSTEM user-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: d9047477-0359-48c9-b8c7-792cedcdc9c4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>NirCmd Tool Execution As LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ runassystem\ )</field>
    </rule>
    <rule id="113742" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winword_dll_load.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects Winword.exe loading of custmom dll via /l cmd switch-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 2621b3a6-3840-4810-ac14-a02426086171-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Winword.exe Loads Suspicious DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/l</field>
    </rule>
    <rule id="113743" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shutdown.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of the commandline to shutdown or reboot windows-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 34ebb878-1b15-4895-b352-ca2eeb99b274-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1529</id>
        </mitre>
        <description>Suspicious Execution of Shutdown</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\shutdown\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/r\ |/s\ )</field>
    </rule>
    <rule id="113744" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_encoded_frombase64string.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a base64 encoded FromBase64String keyword in a process command line-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded FromBase64String</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">OjpGcm9tQmFzZTY0U3RyaW5n|o6RnJvbUJhc2U2NFN0cmluZw|6OkZyb21CYXNlNjRTdHJpbmc</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA|oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA|6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw</field>
    </rule>
    <rule id="113745" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rasdial_activity.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detects suspicious process related to rasdial.exe-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious RASdial Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:rasdial\.exe)$</field>
    </rule>
    <rule id="113746" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_win10_sched_task_0day.yml</info>
        <!--Sigma Rule Author: Olaf Hartong-->
        <!--Description: Detects Task Scheduler .job import arbitrary DACL write\par-->
        <!--Date: 2019/05/22-->
        <!--Status: test-->
        <!--ID: 931b6802-d6a6-4267-9ffa-526f57f22aaf-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1053.005</id>
            <id>car.2013-08-001</id>
        </mitre>
        <description>Windows 10 Scheduled Task SandboxEscaper 0-day</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/change</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TN</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/RU</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/RP</field>
    </rule>
    <rule id="113747" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pingback_backdoor.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: b2400ffb-7680-47c0-b08a-098a7de7e7a9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Pingback Backdoor</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:updata\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)msdtc</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)auto</field>
    </rule>
    <rule id="113748" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_data_exfiltration_by_using_datasvcutil.yml</info>
        <!--Sigma Rule Author: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger-->
        <!--Description: Detects when a user performs data exfiltration by using DataSvcUtil.exe-->
        <!--Date: 2021/09/30-->
        <!--Status: experimental-->
        <!--ID: e290b10b-1023-4452-a4a9-eb31a9013b3a-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567</id>
        </mitre>
        <description>LOLBAS Data Exfiltration by DataSvcUtil.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/in:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/out:</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\DataSvcUtil\.exe)$</field>
    </rule>
    <rule id="113749" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ps_downloadfile.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line-->
        <!--Date: 2020/08/28-->
        <!--Status: test-->
        <!--ID: 8f70ac5f-1f6f-4f8e-b454-db19561216c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1104</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PowerShell DownloadFile</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.DownloadFile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
    </rule>
    <rule id="113750" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_devtoolslauncher.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community (rule), @_felamos (idea)-->
        <!--Description: The Devtoolslauncher.exe executes other binary-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Devtoolslauncher.exe Executes Specified Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\devtoolslauncher\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchForDeploy</field>
    </rule>
    <rule id="113751" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_run_locations.yml</info>
        <!--Sigma Rule Author: juju4, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious process run from unusual locations-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 15b75071-74cc-47e0-b4c6-b43744a62a2b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>car.2013-05-002</id>
        </mitre>
        <description>Suspicious Process Start Locations</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i):\\RECYCLER\\|:\\SystemVolumeInformation\\</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Tasks\\|C:\\\\Windows\\\\debug\\|C:\\\\Windows\\\\fonts\\|C:\\\\Windows\\\\help\\|C:\\\\Windows\\\\drivers\\|C:\\\\Windows\\\\addins\\|C:\\\\Windows\\\\cursors\\|C:\\\\Windows\\\\system32\\tasks\\)</field>
    </rule>
    <rule id="113752" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_cleanmgr.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: b697e69c-746f-4a86-9f59-7bfff8eab881-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Disk Cleanup</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:"\\system32\\cleanmgr\.exe\ /autoclean\ /d\ C:)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ Schedule</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="113753" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_regsvr32_flags_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a flag anomaly in which regsvr32.exe uses a /i flag without using a /n flag at the same time-->
        <!--Date: 2019/07/13-->
        <!--Status: test-->
        <!--ID: b236190c-1c61-41e9-84b3-3fe03f6d76b0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Regsvr32 Flags Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regsvr32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /n\ )</field>
    </rule>
    <rule id="113754" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_lazarus_session_highjack.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick), Bartlomiej Czyz (@bczyz1)-->
        <!--Description: Detects executables launched outside their default directories as used by Lazarus Group (Bluenoroff)-->
        <!--Date: 2020/06/03-->
        <!--Status: test-->
        <!--ID: 3f7f5b0b-5b16-476c-a85f-ab477f6dd24b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Lazarus Session Highjacker</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msdtc\.exe|\\gpvc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\)</field>
    </rule>
    <rule id="113755" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_stickykey_like_backdoor.yml</info>
        <!--Sigma Rule Author: Florian Roth, @twjackomo, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen-->
        <!--Date: 2018/03/15-->
        <!--Status: test-->
        <!--ID: 2fdefcb3-dbda-401e-ae23-f0db027628bc-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.008</id>
            <id>car.2014-11-003</id>
            <id>car.2014-11-008</id>
        </mitre>
        <description>Sticky Key Like Backdoor Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\winlogon\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sethc\.exe|utilman\.exe|osk\.exe|Magnify\.exe|Narrator\.exe|DisplaySwitch\.exe</field>
    </rule>
    <rule id="113756" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msdeploy.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Detects file execution using the msdeploy.exe lolbin-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 646bc99f-6682-4b47-a73a-17b1b64c9d34-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execute Files with Msdeploy.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)verb:sync</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-source:RunCommand</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-dest:runCommand</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msdeploy\.exe)$</field>
    </rule>
    <rule id="113757" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_redirect_to_stream.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the redirection of an output stream of / within a Windows command line session-->
        <!--Date: 2022/02/04-->
        <!--Status: experimental-->
        <!--ID: 70e68156-6571-427b-a6e9-4476a173a9b6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Cmd Stream Redirection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;.+:</field>
    </rule>
    <rule id="113758" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 9c14c9fa-1a63-4a64-8e57-d19280559490-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\${?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="113759" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_javascript.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Identifies suspicious mshta.exe commands.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 67f113fa-e23d-4271-befa-30113b3e08b1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>Mshta JavaScript Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)javascript</field>
    </rule>
    <rule id="113760" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_radmin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use Radmin Viewer Utility to remotely control Windows device-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 5817e76f-4804-41e6-8f1d-5fa0b3ecae2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1072</id>
        </mitre>
        <description>Use Radmin Viewer Utility</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Radmin\ Viewer</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Radmin\ Viewer</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Radmin\.exe</field>
    </rule>
    <rule id="113761" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_uacme_uac_bypass.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects execution of UACMe (a tool used for UAC bypass) via default PE metadata-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: d38d2fa4-98e6-4a24-aff1-410b0c9ad177-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Tool UACMe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)UACMe</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)REvol\ Corp</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Akagi\.exe</field>
    </rule>
    <rule id="113762" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_write_protect_for_storage_disabled.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.-->
        <!--Date: 2021/06/11-->
        <!--Status: experimental-->
        <!--ID: 75f7a0e2-7154-4c4d-9eae-5cdb4e0a5c13-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Write Protect For Storage Disabled</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hklm\\system\\currentcontrolset\\control</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)write\ protection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)storage|storagedevicepolicies</field>
    </rule>
    <rule id="113763" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_activity.yml</info>
        <!--Sigma Rule Author: juju4, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious process related to rundll32 based on arguments-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: e593cf51-88db-4ee1-b920-37e89012a3c9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Rundll32 Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)javascript:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.RegisterXLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURLA</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)FileProtocolHandler</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)zipfldr\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RouteTheCall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShellExec_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshtml\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)PrintHTML</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchINFSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegisterOCX</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieadvpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchINFSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieadvpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegisterOCX</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieframe\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shdocvw\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)syssetup\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SetupInfObjectInstallAction</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)setupapi\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)InstallHinfSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pcwutl\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchApplication</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dfshim\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShOpenVerbApplication</field>
    </rule>
    <rule id="113764" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shadow_copies_access_symlink.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Shadow Copies storage symbolic link creation using operating systems utilities-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 40b19fa6-d835-400c-b301-41f3a2baacaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Shadow Copies Access via Symlink</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mklink</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="113765" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rasautou_dll_execution.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: cd3d1298-eb3b-476c-ac67-12847de55813-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>DLL Execution via Rasautou.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rasautou\.exe)$</field>
    </rule>
    <rule id="113766" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rasautou_dll_execution.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: cd3d1298-eb3b-476c-ac67-12847de55813-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>DLL Execution via Rasautou.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)rasdlui\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-d</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-p</field>
    </rule>
    <rule id="113767" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_msoffice.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Downloads payload from remote server-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 0c79148b-118e-472b-bdb7-9b57b444cc19-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Malicious Payload Download via Office Binaries</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powerpnt\.exe|\\winword\.exe|\\excel\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="113768" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_amsi_bypass.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects Request to amsiInitFailed that can be used to disable AMSI Scanning-->
        <!--Date: 2018/08/17-->
        <!--Status: test-->
        <!--ID: 30edb182-aa75-42c0-b0a9-e998bb29067c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell AMSI Bypass via .NET Reflection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)System\.Management\.Automation\.AmsiUtils</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)amsiInitFailed</field>
    </rule>
    <rule id="113769" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_reg_disable_sec_services.yml</info>
        <!--Sigma Rule Author: Florian Roth, John Lambert (idea)-->
        <!--Description: Detects a suspicious reg.exe invocation that looks as if it would disable an important security service-->
        <!--Date: 2021/07/14-->
        <!--Status: experimental-->
        <!--ID: 5e95028c-5229-4214-afae-d653d573d0ec-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Reg Disable Security Service</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /d\ 4</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /v\ Start</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\Sense\ |\\WinDefend|\\MsMpSvc|\\NisSrv|\\WdBoot\ |\\WdNisDrv|\\WdNisSvc|\\wscsvc\ |\\SecurityHealthService|\\wuauserv|\\UsoSvc\ )</field>
    </rule>
    <rule id="113770" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gotoopener.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: b6d98a4f-cef0-4abf-bbf6-24132854a83d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of GoToAssist Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)GoTo\ Opener</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)GoTo\ Opener</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)LogMeIn,\ Inc\.</field>
    </rule>
    <rule id="113771" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_dll_execution.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects PowerShell Strings applied to rundll as seen in PowerShdll.dll-->
        <!--Date: 2018/08/25-->
        <!--Status: test-->
        <!--ID: 6812a10b-60ea-420c-832f-dfcc33b646ba-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Detection of PowerShell Execution via DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(Default\.GetString|FromBase64String)</field>
    </rule>
    <rule id="113772" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_dll_execution.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects PowerShell Strings applied to rundll as seen in PowerShdll.dll-->
        <!--Date: 2018/08/25-->
        <!--Status: test-->
        <!--ID: 6812a10b-60ea-420c-832f-dfcc33b646ba-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Detection of PowerShell Execution via DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Windows\-Hostprozess\ \(Rundll32\)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Default\.GetString|FromBase64String</field>
    </rule>
    <rule id="113773" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dxcap.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Detects execution of of Dxcap.exe-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 60f16a96-db70-42eb-8f76-16763e333590-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Application Whitelisting Bypass via Dxcap.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dxcap\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="113774" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system32.yml</info>
        <!--Sigma Rule Author: Florian Roth, Markus Neis, Tim Shelton (HAWK.IO)-->
        <!--Description: Detects a suspicious copy command that copies a system program from System32 to another directory on disk - sometimes used to use LOLBINs like certutil or desktopimgdownldr to a different location with a different name-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fff9d2b7-e11c-4a69-93d3-40ef66189767-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Copy From or To System32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)xcopy.+\\System32\\|cmd\.exe.+/c.+copy.+\\System32\\</field>
    </rule>
    <rule id="113775" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_tracker_execution.yml</info>
        <!--Sigma Rule Author: Avneet Singh @v3t0_, oscd.community-->
        <!--Description: This rule detects DLL injection and execution via LOLBAS - Tracker.exe-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 148431ce-4b70-403d-8525-fcc2993f29ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>DLL Injection with Tracker.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tracker\.exe)$</field>
    </rule>
    <rule id="113776" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_tracker_execution.yml</info>
        <!--Sigma Rule Author: Avneet Singh @v3t0_, oscd.community-->
        <!--Description: This rule detects DLL injection and execution via LOLBAS - Tracker.exe-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 148431ce-4b70-403d-8525-fcc2993f29ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>DLL Injection with Tracker.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Tracker</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /c\ )</field>
    </rule>
    <rule id="113777" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_cmds.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>UNC2452 Process Creation Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)7z\.exe\ a\ \-v500m\ \-mx9\ \-r0\ \-p</field>
    </rule>
    <rule id="113778" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_cmds.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>UNC2452 Process Creation Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)wscript\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Windows</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll,Tk_</field>
    </rule>
    <rule id="113779" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_cmds.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>UNC2452 Process Creation Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\Windows</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\.exe\ /C\ )</field>
    </rule>
    <rule id="113780" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_cmds.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>UNC2452 Process Creation Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\ c:\\\\Windows\\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dll\ )</field>
    </rule>
    <rule id="113781" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_cmds.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries-->
        <!--Date: 2021/01/22-->
        <!--Status: experimental-->
        <!--ID: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>UNC2452 Process Creation Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dllhost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ |</field>
    </rule>
    <rule id="113782" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bypass_squiblytwo.yml</info>
        <!--Sigma Rule Author: Markus Neis / Florian Roth-->
        <!--Description: Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for imphash-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8d63dadf-b91b-4187-87b6-34a1114577ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1047</id>
            <id>attack.t1220</id>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>SquiblyTwo</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wmic</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)format</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="113783" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bypass_squiblytwo.yml</info>
        <!--Sigma Rule Author: Markus Neis / Florian Roth-->
        <!--Description: Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for imphash-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8d63dadf-b91b-4187-87b6-34a1114577ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1047</id>
            <id>attack.t1220</id>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>SquiblyTwo</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)1B1A3F43BF37B5BFE60751F2EE2F326E|37777A96245A3C74EB217308F3546F4C|9D87C9D67CE724033C0B40CC4CA1B206</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E|IMPHASH=37777A96245A3C74EB217308F3546F4C|IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)format:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="113784" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_audio_capture.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detects audio capture via PowerShell Cmdlet.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 932fb0d8-692b-4b0f-a26e-5643a50fe7d6-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Audio Capture via PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WindowsAudioDevice\-Powershell\-Cmdlet</field>
    </rule>
    <rule id="113785" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_rundll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 056a7ee1-4853-4e67-86a0-3fd9ceed7555-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="113786" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration-->
        <!--Date: 2021/07/20-->
        <!--Status: experimental-->
        <!--ID: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Compress\-Archive\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-DestinationPath\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$env:TEMP\\</field>
    </rule>
    <rule id="113787" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mal_lockergoga_ransomware.yml</info>
        <!--Sigma Rule Author: Vasiliy Burov, oscd.community-->
        <!--Description: Detects LockerGoga Ransomware command line.-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 74db3488-fd28-480a-95aa-b7af626de068-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>LockerGoga Ransomware</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-i\ SM\-tgytutrc\ \-s</field>
    </rule>
    <rule id="113788" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_fwd.yml</info>
        <!--Sigma Rule Author: Florian Roth, omkar72, oscd.community-->
        <!--Description: Detects netsh commands that configure a port forwarding (PortProxy)-->
        <!--Date: 2019/01/29-->
        <!--Status: experimental-->
        <!--ID: 322ed9ec-fcab-4f67-9a34-e7c6aef43614-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>Netsh Port Forwarding</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)interface</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)portproxy</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)v4tov4</field>
    </rule>
    <rule id="113789" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_fwd.yml</info>
        <!--Sigma Rule Author: Florian Roth, omkar72, oscd.community-->
        <!--Description: Detects netsh commands that configure a port forwarding (PortProxy)-->
        <!--Date: 2019/01/29-->
        <!--Status: experimental-->
        <!--ID: 322ed9ec-fcab-4f67-9a34-e7c6aef43614-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>Netsh Port Forwarding</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)connectp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)listena</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)c=</field>
    </rule>
    <rule id="113790" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_msconfig_gui.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)-->
        <!--Date: 2021/08/30-->
        <!--Status: experimental-->
        <!--ID: ad92e3f9-7eb6-460e-96b1-582b0ccbb980-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using MSConfig Token Modification - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\AppData\\Local\\Temp\\pkgmgr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"C:\\\\Windows\\\\system32\\msconfig\.exe"\ \-5</field>
    </rule>
    <rule id="113791" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_trickbot_wermgr.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Trickbot malware process tree pattern in which rundll32.exe is parent of wermgr.exe-->
        <!--Date: 2020/11/26-->
        <!--Status: test-->
        <!--ID: 58bf96d9-ff5f-44bd-8dcc-1c4f79bf3a27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559</id>
        </mitre>
        <description>Trickbot Malware Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wermgr\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)DllRegisterServer</field>
    </rule>
    <rule id="113792" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmi_spwns_powershell.yml</info>
        <!--Sigma Rule Author: Markus Neis / @Karneades-->
        <!--Description: Detects WMI spawning PowerShell-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 692f0bec-83ba-4d04-af7e-e884a96059b6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>WMI Spawning Windows PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wmiprvse\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)null</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="113793" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_hostname.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of hostname to get information-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 7be5fb68-f9ef-476d-8b51-0256ebece19e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Execution of Hostname</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\HOSTNAME\.EXE)$</field>
    </rule>
    <rule id="113794" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_webdav_client_execution.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for svchost.exe spawning rundll32.exe with command arguments like C:\windows\system32\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>Suspicious WebDav Client Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\davclnt\.dll,DavSetCookie</field>
    </rule>
    <rule id="113795" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_encode.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Commandline to lauch powershell with a base64 payload-->
        <!--Date: 2022/01/02-->
        <!--Status: experimental-->
        <!--ID: fb843269-508c-4b76-8b8d-88679db22ce7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Execution of Powershell with Base64</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-e\ |\ \-en\ |\ \-enc\ |\ \-enco|\ \-ec\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-Encoding\ )</field>
    </rule>
    <rule id="113796" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_c3_load_by_rundll32.yml</info>
        <!--Sigma Rule Author: Alfie Champion (ajpc500)-->
        <!--Description: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.-->
        <!--Date: 2021/06/02-->
        <!--Status: test-->
        <!--ID: b18c9d4c-fac9-4708-bd06-dd5bfacf200f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>F-Secure C3 Load by Rundll32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)StartNodeRelay</field>
    </rule>
    <rule id="113797" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_pandemic.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Pandemic Windows Implant-->
        <!--Date: 2017/06/01-->
        <!--Status: experimental-->
        <!--ID: 9fefd33c-339d-4495-9cba-b96ca006f512-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Pandemic Registry Key</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:loaddll\ \-a\ )</field>
    </rule>
    <rule id="113798" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_whoami_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of whoami with suspicious parents or parameters-->
        <!--Date: 2021/08/12-->
        <!--Status: experimental-->
        <!--ID: 8de1cbe8-d6f5-496d-8237-5f44a721c7a0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Whoami Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\Program\ Files\\Microsoft\ Monitoring\ Agent\\Agent\\MonitoringHost\.exe|</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="113799" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_whoami_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of whoami with suspicious parents or parameters-->
        <!--Date: 2021/08/12-->
        <!--Status: experimental-->
        <!--ID: 8de1cbe8-d6f5-496d-8237-5f44a721c7a0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Whoami Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)whoami\ \-all|whoami\ /all|whoami\.exe\ \-all|whoami\.exe\ /all</field>
    </rule>
    <rule id="113800" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wsreset_uac_bypass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a method that uses Wsreset.exe tool that can be used to reset the Windows Store to bypass UAC-->
        <!--Date: 2020/01/30-->
        <!--Status: test-->
        <!--ID: bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Wsreset UAC Bypass</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WSreset\.exe)$</field>
    </rule>
    <rule id="113801" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hh_chm.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community-->
        <!--Description: Identifies usage of hh.exe executing recently modified .chm files.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 68c8acb4-1b60-4890-8e82-3ddf7a6dba84-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.001</id>
        </mitre>
        <description>HH.exe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\hh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.chm</field>
    </rule>
    <rule id="113802" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ditsnap.yml</info>
        <!--Sigma Rule Author: Furkan Caliskan (@caliskanfurkan_)-->
        <!--Description: Detects the use of Ditsnap tool. Seems to be a tool for ransomware groups.-->
        <!--Date: 2020/07/04-->
        <!--Status: test-->
        <!--ID: d3b70aad-097e-409c-9df2-450f80dc476b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>DIT Snapshot Viewer Use</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\ditsnap\.exe)$</field>
    </rule>
    <rule id="113803" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ditsnap.yml</info>
        <!--Sigma Rule Author: Furkan Caliskan (@caliskanfurkan_)-->
        <!--Description: Detects the use of Ditsnap tool. Seems to be a tool for ransomware groups.-->
        <!--Date: 2020/07/04-->
        <!--Status: test-->
        <!--ID: d3b70aad-097e-409c-9df2-450f80dc476b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>DIT Snapshot Viewer Use</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ditsnap\.exe</field>
    </rule>
    <rule id="113804" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_parent_process.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Harish Segar (rule)-->
        <!--Description: Detects a suspicious parents of powershell.exe-->
        <!--Date: 2020/03/20-->
        <!--Status: test-->
        <!--ID: 754ed792-634f-40ae-b3bc-e0448d33f695-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Parent Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\mshta\.exe|\\rundll32\.exe|\\regsvr32\.exe|\\services\.exe|\\winword\.exe|\\wmiprvse\.exe|\\powerpnt\.exe|\\excel\.exe|\\msaccess\.exe|\\mspub\.exe|\\visio\.exe|\\outlook\.exe|\\amigo\.exe|\\chrome\.exe|\\firefox\.exe|\\iexplore\.exe|\\microsoftedgecp\.exe|\\microsoftedge\.exe|\\browser\.exe|\\vivaldi\.exe|\\safari\.exe|\\sqlagent\.exe|\\sqlserver\.exe|\\sqlservr\.exe|\\w3wp\.exe|\\httpd\.exe|\\nginx\.exe|\\php\-cgi\.exe|\\jbosssvc\.exe|MicrosoftEdgeSH\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)tomcat</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|pwsh</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Windows\ PowerShell</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PowerShell\ Core\ 6</field>
    </rule>
    <rule id="113805" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cipher.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.
Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives
-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: 4b046706-5789-4673-b111-66f25fe99534-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1485</id>
        </mitre>
        <description>Overwrite Deleted Data with Cipher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cipher\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /w:</field>
    </rule>
    <rule id="113806" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_anydesk.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: b52e84a3-029e-4529-b09b-71d19dd27e94-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of Anydesk Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)AnyDesk\ Software\ GmbH</field>
    </rule>
    <rule id="113807" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_runonce_execution.yml</info>
        <!--Sigma Rule Author: Avneet Singh @v3t0_, oscd.community-->
        <!--Description: This rule detects the execution of Run Once task as configured in the registry-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 198effb6-6c98-4d0c-9ea3-451fa143c45c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Run Once Task Execution as Configured in Registry</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\runonce\.exe)$</field>
    </rule>
    <rule id="113808" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_runonce_execution.yml</info>
        <!--Sigma Rule Author: Avneet Singh @v3t0_, oscd.community-->
        <!--Description: This rule detects the execution of Run Once task as configured in the registry-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 198effb6-6c98-4d0c-9ea3-451fa143c45c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Run Once Task Execution as Configured in Registry</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Run\ Once\ Wrapper</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /AlternateShellStartup</field>
    </rule>
    <rule id="113809" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mavinject_proc_inj.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects process injection using the signed Windows tool Mavinject32.exe-->
        <!--Date: 2018/12/12-->
        <!--Status: test-->
        <!--ID: 17eb8e57-9983-420d-ad8a-2c4976c22eb8-->
        <mitre>
            <id>attack.t1055.001</id>
            <id>attack.t1218</id>
        </mitre>
        <description>MavInject Process Injection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /INJECTRUNNING\ )</field>
    </rule>
    <rule id="113810" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_attrib_hiding_files.yml</info>
        <!--Sigma Rule Author: Sami Ruohonen-->
        <!--Description: Detects usage of attrib.exe to hide files from users.-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 4281cb20-2994-4580-aa63-c8b86d019934-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.001</id>
        </mitre>
        <description>Hiding Files with Attrib.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\attrib\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \+h\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\desktop\.ini\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\+R\ \+H\ \+S\ \+A\ \\\\.+\.cui</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\system32\\\\.+\.bat</field>
    </rule>
    <rule id="113811" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_enumeration_for_credentials_in_registry.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search the Registry on compromised systems for insecurely stored credentials.
The Windows Registry stores configuration information that can be used by the system or other programs.
Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services
-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: e0b0c2ab-3d52-46d9-8cb7-049dc775fbd1-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
        </mitre>
        <description>Enumeration for Credentials in Registry</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ query\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU\\Software\\SimonTatham\\PuTTY\\Sessions</field>
    </rule>
    <rule id="113812" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmiprvse_spawning_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects wmiprvse spawning processes-->
        <!--Date: 2019/08/15-->
        <!--Status: experimental-->
        <!--ID: d21374ff-f574-44a7-9998-4a8c8bf33d7d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Wmiprvse Spawning Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WmiPrvSe\.exe)$</field>
        <field name="win.eventdata.logonId" negate="yes" type="pcre2">(?i)0x3e7|null</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\WmiPrvSE\.exe|\\WerFault\.exe)$</field>
        <field name="win.eventdata.logonId" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)TEMP\\\\nessus_\S+\.TMP</field>
    </rule>
    <rule id="113813" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_empire_uac_bypass.yml</info>
        <!--Sigma Rule Author: Ecco-->
        <!--Description: Detects some Empire PowerShell UAC bypass methods-->
        <!--Date: 2019/08/30-->
        <!--Status: test-->
        <!--ID: 3268b746-88d8-4cd3-bffc-30077d02c787-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>Empire PowerShell UAC Bypass</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-NoP\ \-NonI\ \-w\ Hidden\ \-c\ \$x=\$\(\(gp\ HKCU:Software\\\\Microsoft\\\\Windows\ Update\)\.Update\)|\ \-NoP\ \-NonI\ \-c\ \$x=\$\(\(gp\ HKCU:Software\\\\Microsoft\\\\Windows\ Update\)\.Update\);</field>
    </rule>
    <rule id="113814" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_comsvcs_procdump.yml</info>
        <!--Sigma Rule Author: Modexp (idea)-->
        <!--Description: Detects process memory dump via comsvcs.dll and rundll32-->
        <!--Date: 2019/09/02-->
        <!--Status: test-->
        <!--ID: 09e6d5c0-05b8-4ff8-9eeb-043046ec774c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Dump via Comsvcs DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(comsvcs|MiniDump|full)</field>
    </rule>
    <rule id="113815" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_comsvcs_procdump.yml</info>
        <!--Sigma Rule Author: Modexp (idea)-->
        <!--Description: Detects process memory dump via comsvcs.dll and rundll32-->
        <!--Date: 2019/09/02-->
        <!--Status: test-->
        <!--ID: 09e6d5c0-05b8-4ff8-9eeb-043046ec774c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Dump via Comsvcs DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MiniDump</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)full</field>
    </rule>
    <rule id="113816" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_dragonfly.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects CrackMapExecWin Activity as Described by NCSC-->
        <!--Date: 2018/04/08-->
        <!--Status: test-->
        <!--ID: 04d9079e-3905-4b70-ad37-6bdf11304965-->
        <mitre>
            <id>attack.g0035</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1110</id>
            <id>attack.t1087</id>
        </mitre>
        <description>CrackMapExecWin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\crackmapexec\.exe)$</field>
    </rule>
    <rule id="113817" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_delete_systemstatebackup.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deletes the Windows systemstatebackup using wbadmin.exe.
This technique is used by numerous ransomware families.
This may only be successful on server platforms that have Windows Backup enabled.
-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 89f75308-5b1b-4390-b2d8-d6b2340efaf8-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Wbadmin Delete Systemstatebackup</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wbadmin\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wbadmin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:delete\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:systemstatebackup\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-keepVersions:0</field>
    </rule>
    <rule id="113818" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uninstall_sysmon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the uninstallation of Sysinternals Sysmon, which could be the result of legitimate administration or a manipulation for defense evasion-->
        <!--Date: 2022/01/12-->
        <!--Status: experimental-->
        <!--ID: 6a5f68d1-c4b5-46b9-94ee-5324892ea939-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Uninstall Sysinternals Sysmon</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Sysmon64\.exe|\\Sysmon\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-u</field>
    </rule>
    <rule id="113819" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_abusing_debug_privilege.yml</info>
        <!--Sigma Rule Author: Semanur Guneysu @semanurtg, oscd.community-->
        <!--Description: Detection of unusual child processes by different system processes-->
        <!--Date: 2020/10/28-->
        <!--Status: test-->
        <!--ID: d522eca2-2973-4391-a3e0-ef0374321dae-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Abused Debug Privilege by Arbitrary Parent Processes</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\winlogon\.exe|\\services\.exe|\\lsass\.exe|\\csrss\.exe|\\smss\.exe|\\wininit\.exe|\\spoolsv\.exe|\\searchindexer\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\cmd\.exe)$</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ route\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ ADD\ )</field>
    </rule>
    <rule id="113820" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_renamed_debugview.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious renamed SysInternals DebugView execution-->
        <!--Date: 2020/05/28-->
        <!--Status: test-->
        <!--ID: cd764533-2e07-40d6-a718-cfeec7f2da7f-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Renamed SysInternals Debug View</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Sysinternals\ DebugView|Sysinternals\ Debugview</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)Dbgview\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\Dbgview\.exe)$</field>
    </rule>
    <rule id="113821" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_download_office_domain.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents-->
        <!--Date: 2021/12/27-->
        <!--Status: experimental-->
        <!--ID: 00d49ed5-4491-4271-a8db-650a4ef6f8c1-->
        <description>Suspicious Download from Office Domain</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\curl\.exe|\\wget\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Start\-BitsTransfer|\.DownloadFile\(|\.DownloadString\(</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https://attachment\.outlook\.live\.net/owa/|https://onenoteonlinesync\.onenote\.com/onenoteonlinesync/</field>
    </rule>
    <rule id="113822" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_enable_rdp.yml</info>
        <!--Sigma Rule Author: @Kostastsale, @TheDFIRReport, slightly modified by pH-T-->
        <!--Description: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: 0d5675be-bc88-4172-86d3-1e96a4476536-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Enabling RDP Service via Reg.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\SYSTEM\\CurrentControlSet\\Control\\Terminal\ Server</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_DWORD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Licensing\ Core</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EnableConcurrentSessions</field>
    </rule>
    <rule id="113823" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_enable_rdp.yml</info>
        <!--Sigma Rule Author: @Kostastsale, @TheDFIRReport, slightly modified by pH-T-->
        <!--Description: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: 0d5675be-bc88-4172-86d3-1e96a4476536-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Enabling RDP Service via Reg.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\SYSTEM\\CurrentControlSet\\Control\\Terminal\ Server</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_DWORD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WinStations\\RDP\-Tcp|MaxInstanceCount|fEnableWinStation|TSUserEnabled|TSEnabled|TSAppCompat|IdleWinStationPoolCount|TSAdvertise|AllowTSConnections|fSingleSessionPerUser</field>
    </rule>
    <rule id="113824" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_download_cradles.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious ways to download files or content using PowerShell-->
        <!--Date: 2022/03/24-->
        <!--Status: experimental-->
        <!--ID: 6e897651-f157-4d8f-aaeb-df8151488385-->
        <description>PowerShell Web Download</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.DownloadString\(|\.DownloadFile\(</field>
    </rule>
    <rule id="113825" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_gup.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks-->
        <!--Date: 2019/02/06-->
        <!--Status: test-->
        <!--ID: 0a4f6091-223b-41f6-8743-f322ec84930b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Suspicious GUP Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\GUP\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\Users\\\\.+\\AppData\\Local\\Notepad\+\+\\updater\\GUP\.exe|\\Users\\\\.+\\AppData\\Roaming\\Notepad\+\+\\updater\\GUP\.exe|\\Program\ Files\\Notepad\+\+\\updater\\GUP\.exe|\\Program\ Files\ \(x86\)\\Notepad\+\+\\updater\\GUP\.exe)$</field>
    </rule>
    <rule id="113826" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_http_logging.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)-->
        <!--Date: 2022/01/09-->
        <!--Status: experimental-->
        <!--ID: e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Disable Windows IIS HTTP Logging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\appcmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/section:httplogging</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/dontLog:true</field>
    </rule>
    <rule id="113827" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pktmon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Tools to Capture Network Packets on the windows 10 with October 2018 Update or later.-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Use of PktMon.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:PktMon\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PktMon\.exe</field>
    </rule>
    <rule id="113828" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_time_discovery.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b243b280-65fe-48df-ba07-6ddea7646427-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1124</id>
        </mitre>
        <description>Discovery of a System Time</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)time</field>
    </rule>
    <rule id="113829" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lobas_bash.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Performs execution of specified file, can be used as a defensive evasion.-->
        <!--Date: 2021/11/24-->
        <!--Status: experimental-->
        <!--ID: 5edc2273-c26f-406c-83f3-f4d948e740dd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Subsystem for Linux Bash Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bash\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-c\ )</field>
    </rule>
    <rule id="113830" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_run_folder.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects process start from rare or uncommon folders like temporary folder or folders that usually don't contain executable files-->
        <!--Date: 2022/02/11-->
        <!--Status: experimental-->
        <!--ID: dca91cfd-d7ab-4c66-8da7-ee57d487b35b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
        </mitre>
        <description>Process Start From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Desktop\\|\\Temp\\|\\Temporary\ Internet</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\cleanmgr\.exe|C:\\Program\ Files\ \(x86\)\\Microsoft\ Visual\ Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft\.VisualStudio\.Setup\.Service\\BackgroundDownload\.exe</field>
    </rule>
    <rule id="113831" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_char_in_cmd.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.-->
        <!--Date: 2022/01/15-->
        <!--Status: experimental-->
        <!--ID: e0552b19-5a83-4222-b141-b36184bb8d79-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Obfuscated Command Line Using Special Unicode Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)â|€|£|¯|®|µ|¶</field>
    </rule>
    <rule id="113832" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_apt29_thinktanks.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: This method detects a suspicious PowerShell command line combination as used by APT29 in a campaign against U.S. think tanks.-->
        <!--Date: 2018/12/04-->
        <!--Status: test-->
        <!--ID: 033fe7d6-66d1-4240-ac6b-28908009c71f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.g0016</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>APT29</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-noni</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ep</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="113833" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntdll_type_redirect.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection-->
        <!--Date: 2022/03/05-->
        <!--Status: experimental-->
        <!--ID: bbc865e4-7fcd-45a6-8ff1-95ced28ec5b2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Ntdll Pipe Redirection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)type\ %windir%\\system32\\ntdll\.dll|type\ %systemroot%\\system32\\ntdll\.dll|type\ c:\\\\Windows\\\\system32\\ntdll\.dll|\\\\ntdll\.dll\ &gt;\ \\\\\\\\\.\\\\pipe\\\\</field>
    </rule>
    <rule id="113834" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_recon_activity.yml</info>
        <!--Sigma Rule Author: Florian Roth, omkar72-->
        <!--Description: Detects suspicious command line activity on Windows systems-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: d95de845-b83c-4a9a-8a6a-4fc802ebf6c0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>Suspicious Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net\ group\ "domain\ admins"\ /dom|net\ localgroup\ administrators|net\ group\ "enterprise\ admins"\ /dom|net\ accounts\ /dom</field>
    </rule>
    <rule id="113835" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_psexec.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: fa91cc36-24c9-41ce-b3c8-3bbc3f2f67ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\PSEXESVC\.exe)$</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM)</field>
    </rule>
    <rule id="113836" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_regsvr32_http_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a certain command line flag combination used by regsvr32 when used to download and register a DLL from a remote address which uses HTTP (not HTTPS) and a IP address and not FQDN-->
        <!--Date: 2022/01/11-->
        <!--Status: experimental-->
        <!--ID: 2dd2c217-bf68-437a-b57c-fe9fd01d5de8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious Regsvr32 HTTP IP Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /u</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i:http://1|\ /i:http://2|\ /i:http://3|\ /i:http://4|\ /i:http://5|\ /i:http://6|\ /i:http://7|\ /i:http://8|\ /i:http://9</field>
    </rule>
    <rule id="113837" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_network_listing_connections.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: 1c67a717-32ba-409b-a45d-0fb704a73a81-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Suspicious Listing of Network Connections</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)netstat</field>
    </rule>
    <rule id="113838" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_network_listing_connections.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: 1c67a717-32ba-409b-a45d-0fb704a73a81-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Suspicious Listing of Network Connections</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:net\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ use|\ sessions)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ use\ |\ sessions\ )</field>
    </rule>
    <rule id="113839" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_emissarypanda_sep19.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of DLL side-loading malware used by threat group Emissary Panda aka APT27-->
        <!--Date: 2018/09/03-->
        <!--Status: test-->
        <!--ID: 9aa01d62-7667-4d3b-acb8-8cb5103e2014-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Emissary Panda Malware SLLauncher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\sllauncher\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
    </rule>
    <rule id="113840" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_vsjitdebugger_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev), Ensar &#350;amil (@sblmsrsn), oscd.community-->
        <!--Description: There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger. This option may be used adversaries to execute malicious code by signed verified binary. The debugger is installed alongside with Microsoft Visual Studio package.-->
        <!--Date: 2020/10/14-->
        <!--Status: experimental-->
        <!--ID: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Malicious PE Execution by Microsoft Visual Studio Debugger</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\vsjitdebugger\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\vsimmersiveactivatehelper.+\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\devenv\.exe)$</field>
    </rule>
    <rule id="113841" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_certoc_execution.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.-->
        <!--Date: 2021/10/23-->
        <!--Status: experimental-->
        <!--ID: 242301bc-f92f-4476-8718-78004a6efd9f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Load DLL via CertOC.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\certoc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-LoadDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="113842" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_service_execution.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects manual service execution (start) via system utilities.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 2a072a96-a086-49fa-bcb5-15cc5a619093-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Service Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ start\ )</field>
    </rule>
    <rule id="113843" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_as_priv_user.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a whoami.exe executed by privileged accounts that are often misused by threat actors-->
        <!--Date: 2022/01/28-->
        <!--Status: experimental-->
        <!--ID: 79ce34ca-af29-4d0e-b832-fc1b377020db-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Run Whoami as Privileged User</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)TrustedInstaller</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
    </rule>
    <rule id="113844" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_remote_service.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary might use WMI to check if a certain Remote Service is running on a remote device.
When the test completes, a service information will be displayed on the screen if it exists.
A common feedback message is that "No instance(s) Available" if the service queried is not running.
A common error message is "Node - (provided IP or default) ERROR Description =The RPC server is unavailable" if the provided remote host is unreacheable
-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 09af397b-c5eb-4811-b2bb-08b3de464ebf-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMI Reconnaissance List Remote Services</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\WMIC\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/node:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)service</field>
    </rule>
    <rule id="113845" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rdp_hijack_shadowing.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects RDP session hijacking by using MSTSC shadowing-->
        <!--Date: 2020/01/24-->
        <!--Status: test-->
        <!--ID: 6ba5a05f-b095-4f0a-8654-b825f4f16334-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1563.002</id>
        </mitre>
        <description>MSTSC Shadowing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)noconsentprompt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shadow:</field>
    </rule>
    <rule id="113846" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_splwow64.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious Splwow64.exe process without any command line parameters-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 1f1a8509-2cbb-44f5-8751-8e1571518ce2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Splwow64 Without Params</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\splwow64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:splwow64\.exe)$</field>
    </rule>
    <rule id="113847" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tool_runx_as_system.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of RunXCmd tool for command execution-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 93199800-b52a-4dec-b762-75212c196542-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>RunXCmd Tool Execution As System</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /account=system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/exec=</field>
    </rule>
    <rule id="113848" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_adcspwn.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service-->
        <!--Date: 2021/07/31-->
        <!--Status: test-->
        <!--ID: cd8c163e-a19b-402e-bdd5-419ff5859f12-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>ADCSPwn Hack Tool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-adcs\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-port\ )</field>
    </rule>
    <rule id="113849" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_cscript_gathernetworkinfo.yml</info>
        <!--Sigma Rule Author: blueteamer8699-->
        <!--Description: Adversaries can abuse of C:\Windows\System32\gatherNetworkInfo.vbs script along with cscript.exe to gather information about the target-->
        <!--Date: 2022/01/03-->
        <!--Status: experimental-->
        <!--ID: 575dce0c-8139-4e30-9295-1ee75969f7fe-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.group_policy_discovery</id>
            <id>attack.execution</id>
            <id>attack.command_and_scripting_interpreter</id>
            <id>attack.visual_basic</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>GatherNetworkInfo.vbs Script Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cscript\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)gatherNetworkInfo\.vbs</field>
    </rule>
    <rule id="113850" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_non_interactive_powershell.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)-->
        <!--Description: Detects non-interactive PowerShell activity by looking at powershell.exe with not explorer.exe as a parent.-->
        <!--Date: 2019/09/12-->
        <!--Status: experimental-->
        <!--ID: f4bbd493-b796-416e-bbf2-121235348529-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Non Interactive PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\explorer\.exe|\\CompatTelRunner\.exe)$</field>
    </rule>
    <rule id="113851" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_manage_bde_lolbas.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects a usage of the manage-bde.wsf script that may indicate an attempt of proxy execution from script-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: c363385c-f75d-4753-a108-c1a8e28bdbda-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Suspicious Usage of the Manage-bde.wsf Script</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cscript</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)manage\-bde\.wsf</field>
    </rule>
    <rule id="113852" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_class_exec_xwizard.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects the execution of Xwizard tool with specific arguments which utilized to run custom class properties.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 53d4bb30-3f36-4e8a-b078-69d36c4a79ff-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Custom Class Execution via Xwizard</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\xwizard\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i){[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}}</field>
    </rule>
    <rule id="113853" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_visual_basic_compiler.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 7b10f171-7f04-47c7-9fa2-5be43c76e535-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Visual Basic Command Line Compiler Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\vbc\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cvtres\.exe)$</field>
    </rule>
    <rule id="113854" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_detecting_fake_instances_of_hxtsr.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: HxTsr.exe is a Microsoft compressed executable file called Microsoft Outlook Communications.HxTsr.exe is part of Outlook apps, because it resides in a hidden "WindowsApps" subfolder of "C:\Program Files". Its path includes a version number, e.g., "C:\Program Files\WindowsApps\microsoft.windowscommunicationsapps_17.7466.41167.0_x64__8wekyb3d8bbwe\HxTsr.exe". Any instances of hxtsr.exe not in this folder may be malware camouflaging itself as HxTsr.exe-->
        <!--Date: 2020/04/17-->
        <!--Status: experimental-->
        <!--ID: 4e762605-34a8-406d-b72e-c1a089313320-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Detecting Fake Instances Of Hxtsr.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)hxtsr\.exe</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)^(?:C:\\program\ files\\windowsapps\\microsoft\.windowscommunicationsapps_)</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)(?:\\hxtsr\.exe)$</field>
    </rule>
    <rule id="113855" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_configsecuritypolicy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Upload file, credentials or data exfiltration with Binary part of Windows Defender-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: 1f0f6176-6482-4027-b151-00071af39d7e-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567</id>
        </mitre>
        <description>Suspicious ConfigSecurityPolicy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ConfigSecurityPolicy\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https://|http://|ftp://</field>
    </rule>
    <rule id="113856" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter ' -ma ' and ' -accepteula' in a single step. This way we're also able to catch cases in which the attacker has renamed the procdump executable.-->
        <!--Date: 2021/02/02-->
        <!--Status: experimental-->
        <!--ID: 03795938-1387-481b-9f4c-3f6241e604fe-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious Use of Procdump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-accepteula\ )</field>
    </rule>
    <rule id="113857" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_sys.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452-->
        <!--Date: 2021/03/05-->
        <!--Status: experimental-->
        <!--ID: 731231b9-0b5d-4219-94dd-abb6959aa7ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Rundll32 Activity Invoking Sys File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.sys,|\.sys\ )</field>
    </rule>
    <rule id="113858" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_advancedrun.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of AdvancedRun utitlity-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: d2b749ee-4225-417e-b20e-a8d2193cbb84-->
        <description>Suspicious AdvancedRun Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\AdvancedRun\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /EXEFilename\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /Run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /WindowState\ 0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /RunAs\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /CommandLine\ )</field>
    </rule>
    <rule id="113859" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_headless_browser_file_download.yml</info>
        <!--Sigma Rule Author: Sreeman, Florian Roth-->
        <!--Description: This is an unusual method to download files. It starts a browser headless and downloads a file from a location. This can be used by threat actors to download files.-->
        <!--Date: 2022/01/04-->
        <!--ID: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>File Download with Headless Browser</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msedge\.exe|\\chrome\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-headless</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dump\-dom</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="113860" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_parent_combo.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious powershell invocations from interpreters or unusual programs-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 95eadcb2-92e4-4ed1-9031-92547773a6db-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocation Based on Parent Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)\\Health\ Service\ State\\</field>
    </rule>
    <rule id="113861" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_te_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces). Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b-->
        <mitre>
            <id>attack.t1218</id>
        </mitre>
        <description>Malicious Windows Script Components File Execution by TAEF Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\te\.exe)$</field>
    </rule>
    <rule id="113862" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_te_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces). Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b-->
        <mitre>
            <id>attack.t1218</id>
        </mitre>
        <description>Malicious Windows Script Components File Execution by TAEF Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\te\.exe)$</field>
    </rule>
    <rule id="113863" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_te_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces). Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b-->
        <mitre>
            <id>attack.t1218</id>
        </mitre>
        <description>Malicious Windows Script Components File Execution by TAEF Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\te\.exe</field>
    </rule>
    <rule id="113864" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_encoded_iex.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a base64 encoded IEX command string in a process command line-->
        <!--Date: 2019/08/23-->
        <!--Status: test-->
        <!--ID: 88f680b8-070e-402c-ae11-d2914f2257f1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded IEX</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">SUVYIChb|aWV4IChb|aWV4IChOZXc|SUVYIChOZXc|lFWCAoWw|IGlleCAoWw|IGlleCAoTmV3|IElFWCAoTmV3|JRVggKFs|ICBpZXggKFs|ICBpZXggKE5ldw|ICBJRVggKE5ldw</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SQBFAFgAIAAoAFsA|kARQBYACAAKABbA|JAEUAWAAgACgAWw|aQBlAHgAIAAoAFsA|kAZQB4ACAAKABbA|pAGUAeAAgACgAWw|aQBlAHgAIAAoAE4AZQB3A|kAZQB4ACAAKABOAGUAdw|pAGUAeAAgACgATgBlAHcA|SQBFAFgAIAAoAE4AZQB3A|kARQBYACAAKABOAGUAdw|JAEUAWAAgACgATgBlAHcA</field>
    </rule>
    <rule id="113865" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_curl_fileupload.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious curl process start the adds a file to a web request-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: 00bca14a-df4e-4649-9054-3f2aa676bc04-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl File Upload</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\curl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-F\ |\ \-T\ |\ \-\-upload\-file\ |\ \-d\ |\ \-\-data\ )</field>
    </rule>
    <rule id="113866" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ping_hex_ip.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a ping command that uses a hex encoded IP address-->
        <!--Date: 2018/03/23-->
        <!--Status: test-->
        <!--ID: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Ping Hex IP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\ping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0x</field>
    </rule>
    <rule id="113867" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_silenttrinity_stage_use.yml</info>
        <!--Sigma Rule Author: Aleksey Potapov, oscd.community-->
        <!--Description: Detects SILENTTRINITY stager use-->
        <!--Date: 2019/10/22-->
        <!--Status: experimental-->
        <!--ID: 03552375-cc2c-4883-bbe4-7958d5a980be-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>SILENTTRINITY Stager Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)st2stager</field>
    </rule>
    <rule id="113868" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_automated_collection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: f576a613-2392-4067-9d1a-9345fb58d8d1-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Automated Collection Command Prompt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.doc|\.docx|\.xls|\.xlsx|\.ppt|\.pptx|\.rtf|\.pdf|\.txt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /b\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /s\ )</field>
    </rule>
    <rule id="113869" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_automated_collection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: f576a613-2392-4067-9d1a-9345fb58d8d1-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Automated Collection Command Prompt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.doc|\.docx|\.xls|\.xlsx|\.ppt|\.pptx|\.rtf|\.pdf|\.txt</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FINDSTR\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /e\ |\ /si\ )</field>
    </rule>
    <rule id="113870" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_mounted_share_deletion.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: cb7c4a03-2871-43c0-9bbb-18bbdb079896-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.005</id>
        </mitre>
        <description>Mounted Share Deleted</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\net\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)share</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/delete</field>
    </rule>
    <rule id="113871" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_discover_private_keys.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credential-->
        <!--Date: 2021/07/20-->
        <!--Status: experimental-->
        <!--ID: 213d6a77-3d55-4ce8-ba74-fcfef741974e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Discover Private Keys</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ |findstr\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.key|\.pgp|\.gpg|\.ppk|\.p12|\.pem|\.pfx|\.cer|\.p7b|\.asc</field>
    </rule>
    <rule id="113872" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cl_mutexverifiers_lolscript.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1 module-->
        <!--Date: 2020/10/14-->
        <!--Status: experimental-->
        <!--ID: 99465c8f-f102-4157-b11c-b0cddd53b79a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execution via CL_Mutexverifiers.ps1</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)CL_Mutexverifiers\.ps1</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)runAfterCancelProcess</field>
    </rule>
    <rule id="113873" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_accesschk_usage_after_priv_escalation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: Accesschk is an access and privilege audit tool developed by SysInternal and often being used by attacker to verify if a privilege escalation process successful or not-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: c625d754-6a3d-4f65-9c9a-536aea960d37-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Accesschk Usage After Privilege Escalation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)(?:AccessChk)$</field>
    </rule>
    <rule id="113874" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_accesschk_usage_after_priv_escalation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: Accesschk is an access and privilege audit tool developed by SysInternal and often being used by attacker to verify if a privilege escalation process successful or not-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: c625d754-6a3d-4f65-9c9a-536aea960d37-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Accesschk Usage After Privilege Escalation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Reports\ effective\ permissions</field>
    </rule>
    <rule id="113875" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_wocao.yml</info>
        <!--Sigma Rule Author: Florian Roth, frack113-->
        <!--Description: Detects activity mentioned in Operation Wocao report-->
        <!--Date: 2019/12/20-->
        <!--Status: experimental-->
        <!--ID: 1cfac73c-be78-4f9a-9b08-5bde0c3953ab-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.004</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Operation Wocao Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)checkadmin\.exe\ 127\.0\.0\.1\ \-all|netsh\ advfirewall\ firewall\ add\ rule\ name=powershell\ dir=in|cmd\ /c\ powershell\.exe\ \-ep\ bypass\ \-file\ c:\\s\.ps1|/tn\ win32times\ /f|create\ win32times\ binPath=|\\c\$\\\\Windows\\\\system32\\devmgr\.dll|\ \-exec\ bypass\ \-enc\ JgAg|type\ .+keepass\\KeePass\.config\.xml|iie\.exe\ iie\.txt|reg\ query\ HKEY_CURRENT_USER\\Software\\\\.+\\PuTTY\\Sessions\\</field>
    </rule>
    <rule id="113876" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_outlook_shell.yml</info>
        <!--Sigma Rule Author: Michael Haag, Florian Roth, Markus Neis, Elastic, FPT.EagleEye Team-->
        <!--Description: Detects a Windows command and scripting interpreter executable started from Microsoft Outlook-->
        <!--Date: 2022/02/28-->
        <!--Status: test-->
        <!--ID: 208748f7-881d-47ac-a29c-07ea84bf691d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>Microsoft Outlook Product Spawning Windows Shell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\OUTLOOK\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\sh\.exe|\\bash\.exe|\\scrcons\.exe|\\schtasks\.exe|\\regsvr32\.exe|\\hh\.exe|\\wmic\.exe|\\mshta\.exe|\\msiexec\.exe|\\forfiles\.exe|\\scriptrunner\.exe|\\mftrace\.exe|\\AppVLP\.exe|\\svchost\.exe|\\msbuild\.exe)$</field>
    </rule>
    <rule id="113877" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uninstall_crowdstrike_falcon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon-->
        <!--Date: 2021/07/12-->
        <!--Status: experimental-->
        <!--ID: f0f7be61-9cf5-43be-9836-99d6ef448a18-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Uninstall Crowdstrike Falcon</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\WindowsSensor\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /uninstall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /quiet</field>
    </rule>
    <rule id="113878" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_system_user_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), David ANDRE (additional keywords)-->
        <!--Description: Detects a suspicious process creation as SYSTEM user (suspicious program or command line parameter)-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: 2617e7ed-adb7-40ba-b0f3-8f9945fe6c09-->
        <description>Suspicious SYSTEM User Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\calc\.exe|\\wscript\.exe|\\cscript\.exe|\\hh\.exe|\\mshta\.exe|\\forfiles\.exe|\\ping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:sc\ stop\ |\ \-NoP\ |\ \-W\ Hidden\ |\ \-decode\ |\ /decode\ |\ /urlcache\ |\ \-urlcache\ |\ \-e.+\ JAB|\ \-e.+\ SUVYI|\ \-e.+\ SQBFAFgA|\ \-e.+\ aWV4I|\ \-e.+\ IAB|\ \-e.+\ PAA|\ \-e.+\ aQBlAHgA|vssadmin\ delete\ shadows|reg\ SAVE\ HKLM|\ \-ma\ |Microsoft\\\\Windows\\\\CurrentVersion\\Run|\.downloadstring\(|\.downloadfile\(|\ /ticket:|dpapi::|event::clear|event::drop|id::modify|kerberos::|lsadump::|misc::|privilege::|rpc::|sekurlsa::|sid::|token::|vault::cred|vault::list|\ p::d\ |;iex\(|MiniDump|net\ user\ )</field>
    </rule>
    <rule id="113879" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_non_priv_reg_or_ps.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Ryan Plas (rule), oscd.community-->
        <!--Description: Search for usage of reg or Powershell by non-priveleged users to modify service configuration in registry-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 8f02c935-effe-45b3-8fc9-ef8696a9e41d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Non-privileged Usage of Reg or Powershell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
    </rule>
    <rule id="113880" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_non_priv_reg_or_ps.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Ryan Plas (rule), oscd.community-->
        <!--Description: Search for usage of reg or Powershell by non-priveleged users to modify service configuration in registry-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 8f02c935-effe-45b3-8fc9-ef8696a9e41d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Non-privileged Usage of Reg or Powershell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set\-itemproperty|\ sp\ |new\-itemproperty</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Services</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ImagePath|FailureCommand|ServiceDLL</field>
    </rule>
    <rule id="113881" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdclt_child_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: da2738f2-fadb-4394-afa7-0a0674885afa-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Sdclt Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\sdclt\.exe)$</field>
    </rule>
    <rule id="113882" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_schtask_creation_temp_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of scheduled tasks that involves a temporary folder and runs only once-->
        <!--Date: 2021/03/11-->
        <!--Status: experimental-->
        <!--ID: 39019a4e-317f-4ce3-ae63-309a8c6b53c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Scheduled Task Creation Involving Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /sc\ once\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Temp\\</field>
    </rule>
    <rule id="113883" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_run_from_zip.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Payloads may be compressed, archived, or encrypted in order to avoid detection-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: 1a70042a-6622-4a2b-8958-267625349abf-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1485</id>
        </mitre>
        <description>Run from a Zip File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\.zip\\</field>
    </rule>
    <rule id="113884" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_applications_spawning_wmi_commandline.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: Initial execution of malicious document calls wmic to execute the file with regsvr32-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 518643ba-7d9c-4fa5-9f37-baed36059f6a-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Office Applications Spawning Wmi Cli</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\wbem\\WMIC\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:wmic\ )</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wmic\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)WMI\ Commandline\ Utility</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:winword\.exe|excel\.exe|powerpnt\.exe)$</field>
    </rule>
    <rule id="113885" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_from_proxy_executing_regsvr32_payload2.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: Excel called wmic to finally proxy execute regsvr32 with the payload. An attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).But we have command-line in the event which allow us to "restore" this suspicious parent-child chain and detect it. Monitor process creation with "wmic process call create" and LOLBins in command-line with parent Office application processes.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: c0e1c3d5-4381-4f18-8145-2583f06a1fe5-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Excel Proxy Executing Regsvr32 With Payload</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)regsvr32|rundll32|msiexec|mshta|verclsid</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wbem\\WMIC\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:wmic\ )</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:winword\.exe|excel\.exe|powerpnt\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)process</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)call</field>
    </rule>
    <rule id="113886" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_certutil_command.yml</info>
        <!--Sigma Rule Author: Florian Roth, juju4, keepwatch-->
        <!--Description: Detects a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code with the built-in certutil utility-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: e011a729-98a6-4139-b5c4-bf6f6dd8239a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
            <id>attack.s0160</id>
            <id>attack.g0007</id>
            <id>attack.g0010</id>
            <id>attack.g0045</id>
            <id>attack.g0049</id>
            <id>attack.g0075</id>
            <id>attack.g0096</id>
        </mitre>
        <description>Suspicious Certutil Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-decode\ |\ \-decodehex\ |\ \-urlcache\ |\ \-verifyctl\ |\ \-encode\ |\ /decode\ |\ /decodehex\ |\ /urlcache\ |\ /verifyctl\ |\ /encode\ )</field>
    </rule>
    <rule id="113887" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_certutil_command.yml</info>
        <!--Sigma Rule Author: Florian Roth, juju4, keepwatch-->
        <!--Description: Detects a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code with the built-in certutil utility-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: e011a729-98a6-4139-b5c4-bf6f6dd8239a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
            <id>attack.s0160</id>
            <id>attack.g0007</id>
            <id>attack.g0010</id>
            <id>attack.g0045</id>
            <id>attack.g0049</id>
            <id>attack.g0075</id>
            <id>attack.g0096</id>
        </mitre>
        <description>Suspicious Certutil Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\certutil\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)URL|ping</field>
    </rule>
    <rule id="113888" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msedge_minimized_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the suspicious minimized start of MsEdge browser, which can be used to download files from the Internet-->
        <!--Date: 2022/01/11-->
        <!--ID: 94771a71-ba41-4b6e-a757-b531372eaab6-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Minimized MSEdge Start</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start\ /min\ msedge</field>
    </rule>
    <rule id="113889" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_export_critical_keys.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Detects the export of a crital Registry key to a file.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 82880171-b475-4201-b811-e9c826cd5eaa-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Exports Critical Registry Keys To a File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /E\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hklm|hkey_local_machine</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\system|\\sam|\\security)$</field>
    </rule>
    <rule id="113890" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdelete.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of SDelete to erase a file not the free space-->
        <!--Date: 2021/06/03-->
        <!--Status: experimental-->
        <!--ID: a4824fca-976f-4964-b334-0621379e84c4-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1485</id>
        </mitre>
        <description>Sysinternals SDelete Delete File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sdelete\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-h|\ \-c|\ \-z|\ /\?</field>
    </rule>
    <rule id="113891" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_adfind.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye Team, omkar72, oscd.community-->
        <!--Description: Detects the execution of a AdFind for Active Directory enumeration-->
        <!--Date: 2020/09/26-->
        <!--Status: experimental-->
        <!--ID: 75df3b17-8bcc-4565-b89b-c9898acef911-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Suspicious AdFind Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)objectcategory|trustdmp|dcmodes|dclist|computers_pwdnotreqd</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\adfind\.exe)$</field>
    </rule>
    <rule id="113892" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_emotet.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects all Emotet like process executions that are not covered by the more generic rules-->
        <!--Date: 2019/09/30-->
        <!--Status: test-->
        <!--ID: d02e8cf5-6099-48cf-9bfc-1eec2d0c7b18-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Emotet Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-e.+\ PAA|JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ|QAZQBuAHYAOgB1AHMAZQByAHAAcgBvAGYAaQBsAGUA|kAGUAbgB2ADoAdQBzAGUAcgBwAHIAbwBmAGkAbABlA|IgAoACcAKgAnACkAOwAkA|IAKAAnACoAJwApADsAJA|iACgAJwAqACcAKQA7ACQA|JABGAGwAeAByAGgAYwBmAGQ|PQAkAGUAbgB2ADoAdABlAG0AcAArACgA|0AJABlAG4AdgA6AHQAZQBtAHAAKwAoA|9ACQAZQBuAHYAOgB0AGUAbQBwACsAKA</field>
    </rule>
    <rule id="113893" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_finger_usage.yml</info>
        <!--Sigma Rule Author: Florian Roth, omkar72, oscd.community-->
        <!--Description: Detects suspicious aged finger.exe tool execution often used in malware attacks nowadays-->
        <!--Date: 2021/02/24-->
        <!--Status: experimental-->
        <!--ID: af491bca-e752-4b44-9c86-df5680533dbc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Finger.exe Suspicious Invocation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\finger\.exe)$</field>
    </rule>
    <rule id="113894" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_codepage_switch.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a code page switch in command line or batch scripts to a rare language-->
        <!--Date: 2019/10/14-->
        <!--Status: test-->
        <!--ID: c7942406-33dd-4377-a564-0f62db0593a3-->
        <mitre>
            <id>attack.t1036</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Code Page Switch</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\chcp\.com)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ 936|\ 1258)$</field>
    </rule>
    <rule id="113895" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml</info>
        <!--Sigma Rule Author: Michael Haag, Mark Woan (improvements), James Pemberton / @4A616D6573 / oscd.community (improvements)-->
        <!--Description: Detects execution of Net.exe, whether suspicious or benign.-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 183e7ea8-ac4b-4c23-9aec-b3dac4e401ac-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1007</id>
            <id>attack.t1049</id>
            <id>attack.t1018</id>
            <id>attack.t1135</id>
            <id>attack.t1201</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.s0039</id>
        </mitre>
        <description>Net.exe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ group|\ localgroup|\ user|\ view|\ share|\ accounts|\ stop\ |\ start</field>
    </rule>
    <rule id="113896" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_mshta_execution.yml</info>
        <!--Sigma Rule Author: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)-->
        <!--Description: Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism-->
        <!--Date: 2019/02/22-->
        <!--Status: test-->
        <!--ID: cc7abbd0-762b-41e3-8a26-57ad50d2eea3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1218.005</id>
            <id>attack.execution</id>
            <id>attack.t1059.007</id>
            <id>cve.2020.1599</id>
        </mitre>
        <description>MSHTA Suspicious Execution 01</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)vbscript|\.jpg|\.png|\.lnk|\.xls|\.doc|\.zip|\.dll|\.exe</field>
    </rule>
    <rule id="113897" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dir.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use dir to collect information-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1217</id>
        </mitre>
        <description>Suspicious DIR Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /b</field>
    </rule>
    <rule id="113898" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bitstransfer.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects transferring files from system on a server bitstransfer Powershell cmdlets-->
        <!--Date: 2021/08/19-->
        <!--Status: experimental-->
        <!--ID: cd5c8085-4070-4e22-908d-a5b3342deb74-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Suspicious Bitstransfer via PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\powershell_ise\.exe|\\pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-BitsTransfer|Add\-BitsFile</field>
    </rule>
    <rule id="113899" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lsass_dump.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community-->
        <!--Description: Detect creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials. Identifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: ffa6861c-4461-4f59-8a41-578c39f3f23e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Memory Dumping</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lsass</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\werfault\.exe)$</field>
    </rule>
    <rule id="113900" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lsass_dump.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community-->
        <!--Description: Detect creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials. Identifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: ffa6861c-4461-4f59-8a41-578c39f3f23e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Memory Dumping</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\procdump</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lsass</field>
    </rule>
    <rule id="113901" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_redmimicry_winnti_proc.yml</info>
        <!--Sigma Rule Author: Alexander Rausch-->
        <!--Description: Detects actions caused by the RedMimicry Winnti playbook-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: 95022b85-ff2a-49fa-939a-d7b8f56eeb9b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1106</id>
            <id>attack.t1059.003</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>RedMimicry Winnti Playbook Execute</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)rundll32\.exe|cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)gthread\-3\.6\.dll|\\\\Windows\\\\Temp\\tmp\.bat|sigcmm\-2\.4\.dll</field>
    </rule>
    <rule id="113902" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lobas_aspnet_compiler.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Execute C# code with the Build Provider and proper folder structure in place.-->
        <!--Date: 2021/11/24-->
        <!--Status: experimental-->
        <!--ID: a01b8329-5953-4f73-ae2d-aa01e1f35f00-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Suspicious aspnet_compiler.exe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Microsoft\.NET\\Framework</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)aspnet_compiler\.exe</field>
    </rule>
    <rule id="113903" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_slingshot.yml</info>
        <!--Sigma Rule Author: Florian Roth, Bartlomiej Czyz (@bczyz1)-->
        <!--Description: Detects the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group-->
        <!--Date: 2019/03/04-->
        <!--Status: experimental-->
        <!--ID: 958d81aa-8566-4cea-a565-59ccd4df27b0-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
        </mitre>
        <description>Defrag Deactivation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/delete|/change</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TN</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\Defrag\\ScheduledDefrag</field>
    </rule>
    <rule id="113904" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_esentutl_params.yml</info>
        <!--Sigma Rule Author: sam0x90-->
        <!--Description: Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.-->
        <!--Date: 2021/08/06-->
        <!--Status: experimental-->
        <!--ID: 7df1713a-1a5b-4a4b-a071-dc83b144a101-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Esentutl Gather Credentials</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)esentutl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /p</field>
    </rule>
    <rule id="113905" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_regedit_trustedinstaller.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe-->
        <!--Date: 2021/05/27-->
        <!--Status: experimental-->
        <!--ID: 883835a7-df45-43e4-bf1d-4268768afda4-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Regedit as Trusted Installer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\TrustedInstaller\.exe|\\ProcessHacker\.exe)$</field>
    </rule>
    <rule id="113906" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_from_proxy_executing_regsvr32_payload.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: Excel called wmic to finally proxy execute regsvr32 with the payload. An attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).But we have command-line in the event which allow us to "restore" this suspicious parent-child chain and detect it. Monitor process creation with "wmic process call create" and LOLBins in command-line with parent Office application processes.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 9d1c72f5-43f0-4da5-9320-648cf2099dd0-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Excel Proxy Executing Regsvr32 With Payload</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wbem\\WMIC\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:wmic\ )</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wmic\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)WMI\ Commandline\ Utility</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)regsvr32|rundll32|msiexec|mshta|verclsid</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:winword\.exe|excel\.exe|powerpnt\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)process</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)call</field>
    </rule>
    <rule id="113907" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exfiltration_and_tunneling_tools_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Execution of well known tools for data exfiltration and tunneling-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: c75309a3-59f8-4a8d-9c2c-4c927ad50555-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.command_and_control</id>
            <id>attack.t1041</id>
            <id>attack.t1572</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Exfiltration and Tunneling Tools Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\plink\.exe|\\socat\.exe|\\stunnel\.exe|\\httptunnel\.exe)$</field>
    </rule>
    <rule id="113908" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cscript_vbs.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse Visual Basic (VB) for execution-->
        <!--Date: 2022/01/02-->
        <!--Status: experimental-->
        <!--ID: 23250293-eed5-4c39-b57a-841c8933a57d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>Cscript Visual Basic Script Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.vbs</field>
    </rule>
    <rule id="113909" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_service_stop.yml</info>
        <!--Sigma Rule Author: Jakob Weinzettl, oscd.community-->
        <!--Description: Detects a windows service to be stopped-->
        <!--Date: 2019/10/23-->
        <!--Status: experimental-->
        <!--ID: eb87818d-db5d-49cc-a987-d5da331fbd90-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Stop Windows Service</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe|\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)stop</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)sc\ \ stop\ KSCWebConsoleMessageQueue</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
    </rule>
    <rule id="113910" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_explorer_nouaccheck.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks-->
        <!--Date: 2022/02/23-->
        <!--Status: test-->
        <!--ID: 534f2ef7-e8a2-4433-816d-c91bccde289b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Explorer NOUACCHECK Flag</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\explorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/NOUACCHECK</field>
    </rule>
    <rule id="113911" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_hurricane_panda.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Hurricane Panda Activity-->
        <!--Date: 2019/03/04-->
        <!--Status: test-->
        <!--ID: 0eb2107b-a596-422e-b123-b389d5594ed7-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.g0009</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Hurricane Panda Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)localgroup</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)admin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Win64\.exe</field>
    </rule>
    <rule id="113912" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_install_reg_debugger_backdoor.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Jonhnathan Ribeiro-->
        <!--Description: Detects the registration of a debugger for a program that is available in the logon screen (sticky key backdoor).-->
        <!--Date: 2019/09/06-->
        <!--Status: test-->
        <!--ID: ae215552-081e-44c7-805f-be16f975c8a2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.008</id>
        </mitre>
        <description>Suspicious Debugger Registration Cmdline</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\CurrentVersion\\Image\ File\ Execution\ Options\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sethc\.exe|utilman\.exe|osk\.exe|magnify\.exe|narrator\.exe|displayswitch\.exe|atbroker\.exe</field>
    </rule>
    <rule id="113913" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysmon_driver_unload.yml</info>
        <!--Sigma Rule Author: Kirill Kiryanov, oscd.community-->
        <!--Description: Detect possible Sysmon driver unload-->
        <!--Date: 2019/10/23-->
        <!--Status: experimental-->
        <!--ID: 4d7cda18-1b12-4e52-b45c-d28653210df8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Sysmon Driver Unload</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\fltmc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)unload</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sys</field>
    </rule>
    <rule id="113914" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_servu_process_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service-->
        <!--Date: 2021/07/14-->
        <!--Status: experimental-->
        <!--ID: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
            <id>cve.2021.35211</id>
        </mitre>
        <description>Suspicious Serv-U Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\Serv\-U\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\sh\.exe|\\bash\.exe|\\schtasks\.exe|\\regsvr32\.exe|\\wmic\.exe|\\mshta\.exe|\\rundll32\.exe|\\msiexec\.exe|\\forfiles\.exe|\\scriptrunner\.exe)$</field>
    </rule>
    <rule id="113915" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 7eedcc9d-9fdb-4d94-9c54-474e8affc0c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:readtoend)$</field>
    </rule>
    <rule id="113916" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_openwith.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community (rule), @harr0ey (idea)-->
        <!--Description: The OpenWith.exe executes other binary-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>OpenWith.exe Executes Specified Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\OpenWith\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
    </rule>
    <rule id="113917" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_wce.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: experimental-->
        <!--ID: 7aa7009a-28b9-4344-8c1f-159489a390df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Windows Credential Editor</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)a53a02b997935fd8eedcb5f7abab9b9f|e96a73c7bf33a464c510ede582318bf2</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=a53a02b997935fd8eedcb5f7abab9b9f|IMPHASH=e96a73c7bf33a464c510ede582318bf2</field>
    </rule>
    <rule id="113918" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hack_wce.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: experimental-->
        <!--ID: 7aa7009a-28b9-4344-8c1f-159489a390df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Windows Credential Editor</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ \-S)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\services\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\clussvc\.exe)$</field>
    </rule>
    <rule id="113919" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_data_compressed_with_rar.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, E.M. Anhaus, oscd.community-->
        <!--Description: An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 6f3e2987-db24-4c78-a860-b4f4095a7095-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Data Compressed - rar.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rar\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ a\ )</field>
    </rule>
    <rule id="113920" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_powershell.yml</info>
        <!--Sigma Rule Author: Florian Roth, frack113-->
        <!--Description: Detects the execution of a renamed PowerShell often used by attackers or malware-->
        <!--Date: 2019/08/22-->
        <!--Status: test-->
        <!--ID: d178a2d7-129a-4ba4-8ee6-d6e1fecd5d20-->
        <mitre>
            <id>car.2013-05-009</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)^(?:Windows\ PowerShell|pwsh)</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)Microsoft\ Corporation</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\powershell\.exe|\\powershell_ise\.exe|\\pwsh\.exe)$</field>
    </rule>
    <rule id="113921" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cdb.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Launch 64-bit shellcode from a debugger script file using cdb.exe.-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: b5c7395f-e501-4a08-94d4-57fe7a9da9d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Possible App Whitelisting Bypass via WinDbg/CDB as a Shellcode Runner</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cdb\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-cf</field>
    </rule>
    <rule id="113922" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_disable_eventlog.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects command that is used to disable or delete Windows eventlog via logman Windows utility-->
        <!--Date: 2021/02/11-->
        <!--Status: experimental-->
        <!--ID: cd1f961e-0b96-436b-b7c6-38da4583ec00-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.t1070.001</id>
        </mitre>
        <description>Disable or Delete Windows Eventlog</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:logman\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:stop\ |delete\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EventLog\-System</field>
    </rule>
    <rule id="113923" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shell_spawn_mshta.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious child process of a mshta.exe process-->
        <!--Date: 2021/06/28-->
        <!--Status: experimental-->
        <!--ID: 772bb24c-8df2-4be0-9157-ae4dfa794037-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.001</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Mshta Spawning Windows Shell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe|\\cmd\.exe|\\WScript\.exe)$</field>
    </rule>
    <rule id="113924" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_replace.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Replace.exe is used to replace file with another file-->
        <!--Date: 2022/03/06-->
        <!--Status: experimental-->
        <!--ID: 9292293b-8496-4715-9db6-37028dcda4b3-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Replace.exe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:replace\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/A</field>
    </rule>
    <rule id="113925" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sus_auditpol_usage.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe (https://github.com/blueteam0ps)-->
        <!--Description: Threat actors can use auditpol binary to change audit policy configuration to impair detection capability. This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.-->
        <!--Date: 2021/02/02-->
        <!--Status: experimental-->
        <!--ID: 0a13e132-651d-11eb-ae93-0242ac130002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Suspicious Auditpol Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\auditpol\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)disable|clear|remove|restore</field>
    </rule>
    <rule id="113926" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st-->
        <!--Description: Detects a suspicious copy command to or from an Admin share-->
        <!--Date: 2019/12/30-->
        <!--Status: test-->
        <!--ID: 855bc8b5-2ae8-402e-a9ed-b889e6df1900-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.collection</id>
            <id>attack.exfiltration</id>
            <id>attack.t1039</id>
            <id>attack.t1048</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Copy from Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\robocopy\.exe|\\xcopy\.exe)$</field>
    </rule>
    <rule id="113927" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st-->
        <!--Description: Detects a suspicious copy command to or from an Admin share-->
        <!--Date: 2019/12/30-->
        <!--Status: test-->
        <!--ID: 855bc8b5-2ae8-402e-a9ed-b889e6df1900-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.collection</id>
            <id>attack.exfiltration</id>
            <id>attack.t1039</id>
            <id>attack.t1048</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Copy from Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy</field>
    </rule>
    <rule id="113928" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st-->
        <!--Description: Detects a suspicious copy command to or from an Admin share-->
        <!--Date: 2019/12/30-->
        <!--Status: test-->
        <!--ID: 855bc8b5-2ae8-402e-a9ed-b889e6df1900-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.collection</id>
            <id>attack.exfiltration</id>
            <id>attack.t1039</id>
            <id>attack.t1048</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Copy from Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\-item|copy|cpi\ |\ cp\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\\\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="113929" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_renamed_paexec.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious renamed PAExec execution as often used by attackers-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: c4e49831-1496-40cf-8ce1-b53f942b02f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Renamed PAExec</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)PAExec\ Application</field>
    </rule>
    <rule id="113930" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_renamed_paexec.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious renamed PAExec execution as often used by attackers-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: c4e49831-1496-40cf-8ce1-b53f942b02f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Renamed PAExec</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PAExec\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\PAexec\.exe|\\paexec\.exe)$</field>
    </rule>
    <rule id="113931" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_fodhelper.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community-->
        <!--Description: Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 7f741dcf-fc22-4759-87b4-9ae8376676a2-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC via Fodhelper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\fodhelper\.exe)$</field>
    </rule>
    <rule id="113932" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2019_1378.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Jonhnathan Ribeiro-->
        <!--Description: Detects exploitation attempt of privilege escalation vulnerability via SetupComplete.cmd and PartnerSetupComplete.cmd described in CVE-2019-1378-->
        <!--Date: 2019/11/15-->
        <!--Status: test-->
        <!--ID: 1c373b6d-76ce-4553-997d-8c1da9a6b5f5-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.t1574</id>
            <id>cve.2019.1378</id>
        </mitre>
        <description>Exploiting SetupComplete.cmd CVE-2019-1378</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\cmd\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\Setup\\Scripts\\</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:SetupComplete\.cmd|PartnerSetupComplete\.cmd)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\SysWOW64\\|C:\\\\Windows\\\\WinSxS\\|C:\\\\Windows\\\\Setup\\)</field>
    </rule>
    <rule id="113933" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_tasklist_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network-->
        <!--Date: 2021/12/11-->
        <!--Status: experimental-->
        <!--ID: 63332011-f057-496c-ad8d-d2b6afb27f96-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Suspicious Tasklist Discovery Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tasklist</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\tasklist\.exe</field>
    </rule>
    <rule id="113934" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_taidoor.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects specific process characteristics of Chinese TAIDOOR RAT malware load-->
        <!--Date: 2020/07/30-->
        <!--Status: test-->
        <!--ID: d1aa3382-abab-446f-96ea-4de52908210b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>TAIDOOR RAT DLL Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dll,MyStart|dll\ MyStart</field>
    </rule>
    <rule id="113935" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_taidoor.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects specific process characteristics of Chinese TAIDOOR RAT malware load-->
        <!--Date: 2020/07/30-->
        <!--Status: test-->
        <!--ID: d1aa3382-abab-446f-96ea-4de52908210b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>TAIDOOR RAT DLL Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ MyStart)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
    </rule>
    <rule id="113936" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_path_webserver.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious program execution in a web service root folder (filter out false positives)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 35efb964-e6a5-47ad-bbcd-19661854018d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Execution in Webserver Root Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\wwwroot\\|\\wmpub\\|\\htdocs\\</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)bin\\|\\Tools\\|\\SMSComponent\\</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\services\.exe)$</field>
    </rule>
    <rule id="113937" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_certutil_encode.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious a certutil command that used to encode files, which is sometimes used for data exfiltration-->
        <!--Date: 2019/02/24-->
        <!--Status: test-->
        <!--ID: e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Certutil Encode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\certutil\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-encode</field>
    </rule>
    <rule id="113938" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_qbot.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects QBot like process executions-->
        <!--Date: 2019/10/01-->
        <!--Status: experimental-->
        <!--ID: 4fcac6eb-0287-4090-8eea-2602e4c20040-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>QBot Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WinRAR\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wscript\.exe)$</field>
    </rule>
    <rule id="113939" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_qbot.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects QBot like process executions-->
        <!--Date: 2019/10/01-->
        <!--Status: experimental-->
        <!--ID: 4fcac6eb-0287-4090-8eea-2602e4c20040-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>QBot Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /c\ ping\.exe\ \-n\ 6\ 127\.0\.0\.1\ \&amp;\ type\ )</field>
    </rule>
    <rule id="113940" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_qbot.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects QBot like process executions-->
        <!--Date: 2019/10/01-->
        <!--Status: experimental-->
        <!--ID: 4fcac6eb-0287-4090-8eea-2602e4c20040-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>QBot Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)regsvr32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\ProgramData</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.tmp</field>
    </rule>
    <rule id="113941" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mal_blue_mockingbird.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick)-->
        <!--Description: Attempts to detect system changes made by Blue Mockingbird-->
        <!--Date: 2020/05/14-->
        <!--Status: experimental-->
        <!--ID: c3198a27-23a0-4c2c-af19-e5328d49680e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Blue Mockingbird</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sc\ config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wercplsupporte\.dll</field>
    </rule>
    <rule id="113942" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mal_blue_mockingbird.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick)-->
        <!--Description: Attempts to detect system changes made by Blue Mockingbird-->
        <!--Date: 2020/05/14-->
        <!--Status: experimental-->
        <!--ID: c3198a27-23a0-4c2c-af19-e5328d49680e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Blue Mockingbird</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:COR_PROFILER)$</field>
    </rule>
    <rule id="113943" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_ryuk.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Ryuk ransomware activity-->
        <!--Date: 2019/12/16-->
        <!--Status: test-->
        <!--ID: c37510b8-2107-4b78-aa32-72f251e7a844-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Ryuk Ransomware</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Microsoft\\\\Windows\\\\CurrentVersion\\Run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\users\\Public\\</field>
    </rule>
    <rule id="113944" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_tscon_localsystem.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a tscon.exe start as LOCAL SYSTEM-->
        <!--Date: 2018/03/17-->
        <!--Status: experimental-->
        <!--ID: 9847f263-4a81-424f-970c-875dab15b79b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Suspicious TSCON Start as SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)^(?:NT\ AUTHORITY\\SYSTEM|AUTORITE\ NT\\Sys)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tscon\.exe)$</field>
    </rule>
    <rule id="113945" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of a renamed ProcDump executable often used by attackers or malware-->
        <!--Date: 2019/11/18-->
        <!--Status: experimental-->
        <!--ID: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed ProcDump</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)procdump</field>
    </rule>
    <rule id="113946" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of a renamed ProcDump executable often used by attackers or malware-->
        <!--Date: 2019/11/18-->
        <!--Status: experimental-->
        <!--ID: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed ProcDump</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-accepteula\ )</field>
    </rule>
    <rule id="113947" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of a renamed ProcDump executable often used by attackers or malware-->
        <!--Date: 2019/11/18-->
        <!--Status: experimental-->
        <!--ID: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed ProcDump</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\procdump\.exe|\\procdump64\.exe)$</field>
    </rule>
    <rule id="113948" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sqldumper_activity.yml</info>
        <!--Sigma Rule Author: Kirill Kiryanov, oscd.community-->
        <!--Description: Detects process dump via legitimate sqldumper.exe binary-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 23ceaf5c-b6f1-4a32-8559-f2ff734be516-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Dumping Process via Sqldumper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sqldumper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0x0110|0x01100:40</field>
    </rule>
    <rule id="113949" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_direct_asep_reg_keys_modification.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects direct modification of autostart extensibility point (ASEP) in registry using reg.exe.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 24357373-078f-44ed-9ac4-6d334a668a11-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Direct Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run|\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\RunOnce|\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\RunOnceEx|\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\RunServices|\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\RunServicesOnce|\\software\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\Userinit|\\software\\Microsoft\\Windows\ NT\\CurrentVersion\\Winlogon\\Shell|\\software\\Microsoft\\Windows\ NT\\CurrentVersion\\Windows|\\software\\Microsoft\\\\Windows\\\\CurrentVersion\\Explorer\\User\ Shell\ Folders|\\system\\CurrentControlSet\\Control\\SafeBoot\\AlternateShell</field>
    </rule>
    <rule id="113950" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: e1561947-b4e3-4a74-9bdd-83baed21bdb5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).*</field>
    </rule>
    <rule id="113951" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_ps.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports-->
        <!--Date: 2021/01/20-->
        <!--Status: experimental-->
        <!--ID: b7155193-8a81-4d8f-805d-88de864ca50c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1047</id>
        </mitre>
        <description>UNC2452 PowerShell Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WMIMethod\ win32_process\ \-name\ create\ \-argumentlist</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\ c:\\windows</field>
    </rule>
    <rule id="113952" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_unc2452_ps.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports-->
        <!--Date: 2021/01/20-->
        <!--Status: experimental-->
        <!--ID: b7155193-8a81-4d8f-805d-88de864ca50c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1047</id>
        </mitre>
        <description>UNC2452 PowerShell Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wmic\ /node:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)process\ call\ create\ "rundll32\ c:\\windows</field>
    </rule>
    <rule id="113953" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_soundrec_audio_capture.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detect attacker collecting audio via SoundRecorder application.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 83865853-59aa-449e-9600-74b9d89a6d6e-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Audio Capture via SoundRecorder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\SoundRecorder\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/FILE</field>
    </rule>
    <rule id="113954" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tttracer_mod_load.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 0b4ae027-2a2d-4b93-8c7e-962caaba5b2a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1218</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Time Travel Debugging Utility Usage</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\tttracer\.exe)$</field>
    </rule>
    <rule id="113955" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_remove_application.yml</info>
        <!--Sigma Rule Author: frac113-->
        <!--Description: Uninstall an application with wmic-->
        <!--Date: 2022/01/28-->
        <!--Status: experimental-->
        <!--ID: b53317a0-8acf-4fd1-8de8-a5401e776b96-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMI Uninstall An Application</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\WMIC\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)call\ uninstall</field>
    </rule>
    <rule id="113956" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_recon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: aa2efee7-34dd-446e-8a37-40790a66efd7-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
        </mitre>
        <description>Recon Information for Export with Command Prompt</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\tree\.com|\\WMIC\.exe|\\doskey\.exe|\\sc\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\ &gt;\ %TEMP%\\</field>
    </rule>
    <rule id="113957" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_inline_vbs.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452-->
        <!--Date: 2021/03/05-->
        <!--Status: experimental-->
        <!--ID: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspicious Rundll32 Invoking Inline VBScript</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Execute</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegRead</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)window\.close</field>
    </rule>
    <rule id="113958" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_path.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious execution from an uncommon folder-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 3dfd06d2-eaf4-4532-9555-68aca59f57c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Execution from Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\\$Recycle\.bin\\|\\config\\systemprofile\\|\\Intel\\Logs\\|\\RSA\\MachineKeys\\|\\Users\\All\ Users\\|\\Users\\Default\\|\\Users\\NetworkService\\|\\Users\\Public\\|\\\\Windows\\\\addins\\|\\\\Windows\\\\debug\\|\\\\Windows\\\\Fonts\\|\\\\Windows\\\\Help\\|\\\\Windows\\\\IME\\|\\\\Windows\\\\Media\\|\\\\Windows\\\\repair\\|\\\\Windows\\\\security\\|\\\\Windows\\\\System32\\Tasks\\|\\\\Windows\\\\Tasks\\</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\Perflogs\\)</field>
    </rule>
    <rule id="113959" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_execution.yml</info>
        <!--Sigma Rule Author: Michael Haag-->
        <!--Description: Detects suspicious file execution by wscript and cscript-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 1e33157c-53b1-41ad-bbcc-780b80b58288-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>WSF/JSE/JS/VBA/VBE File Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.jse|\.vbe|\.js|\.vba</field>
    </rule>
    <rule id="113960" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_pkgmgr_dism.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: a743ceba-c771-4d75-97eb-8a90f7f4844c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using PkgMgr and DISM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\pkgmgr\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dism\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="113961" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_ta505_dropper.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects mshta loaded by wmiprvse as parent as used by TA505 malicious documents-->
        <!--Date: 2020/12/08-->
        <!--Status: test-->
        <!--ID: 18cf6cf0-39b0-4c22-9593-e244bdc9a2d4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.g0092</id>
            <id>attack.t1106</id>
        </mitre>
        <description>TA505 Dropper Load Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\mshta\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wmiprvse\.exe)$</field>
    </rule>
    <rule id="113962" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_shell.yml</info>
        <!--Sigma Rule Author: Michael Haag, Florian Roth, Markus Neis, Elastic, FPT.EagleEye Team-->
        <!--Description: Detects a Windows command and scripting interpreter executable started from Microsoft Word, Excel, Powerpoint, Publisher and Visio-->
        <!--Date: 2018/04/06-->
        <!--Status: test-->
        <!--ID: 438025f9-5856-4663-83f7-52f878a70a50-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>Microsoft Office Product Spawning Windows Shell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WINWORD\.EXE|\\EXCEL\.EXE|\\POWERPNT\.exe|\\MSPUB\.exe|\\VISIO\.exe|\\MSACCESS\.EXE|\\EQNEDT32\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\sh\.exe|\\bash\.exe|\\scrcons\.exe|\\schtasks\.exe|\\regsvr32\.exe|\\hh\.exe|\\wmic\.exe|\\mshta\.exe|\\rundll32\.exe|\\msiexec\.exe|\\forfiles\.exe|\\scriptrunner\.exe|\\mftrace\.exe|\\AppVLP\.exe|\\svchost\.exe|\\msbuild\.exe)$</field>
    </rule>
    <rule id="113963" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_netsh_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/07-->
        <!--Status: experimental-->
        <!--ID: 0e4164da-94bc-450d-a7be-a4b176179f1f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
        </mitre>
        <description>Suspicious Netsh Discovery Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:netsh\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:advfirewall\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:firewall\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:show\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:rule\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)name=all</field>
    </rule>
    <rule id="113964" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmstp_com_object_access.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman, Christian Burkard-->
        <!--Description: Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)-->
        <!--Date: 2021/08/31-->
        <!--Status: stable-->
        <!--ID: 4b60e6f2-bf39-47b4-b4ea-398e33cfe253-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1218.003</id>
            <id>attack.g0069</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP UAC Bypass via COM Object Access</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\DllHost\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\ /Processid:\{3E5FC7F9\-9A51\-4367\-9063\-A120244FBEC7\}|\ /Processid:\{3E000D72\-A845\-4CD9\-BD83\-80C07C3B881F\}|\ /Processid:\{BD54C901\-076B\-434E\-B6C7\-17C531F4AB41\}|\ /Processid:\{D2E7041B\-2927\-42FB\-8E9F\-7CE93B6DC937\}|\ /Processid:\{E9495B87\-D950\-4AB5\-87A5\-FF6D70BF3E90\}</field>
    </rule>
    <rule id="113965" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_msiexec_web_install.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious msiexec process starts with web addresses as parameter-->
        <!--Date: 2018/02/09-->
        <!--Status: test-->
        <!--ID: f7b5f842-a6af-4da5-9e95-e32478f3cd2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>MsiExec Web Install</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ msiexec</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://</field>
    </rule>
    <rule id="113966" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_volsnap_disable.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects commands that temporarily turn off Volume Snapshots-->
        <!--Date: 2021/01/28-->
        <!--Status: experimental-->
        <!--ID: dee4af55-1f22-4e1d-a9d2-4bdc7ecb472a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled Volume Snapshots</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Services\\VSS\\Diag</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ Disabled</field>
    </rule>
    <rule id="113967" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_execution_via_winget.yml</info>
        <!--Sigma Rule Author: Sreeman, Florian Roth, Frack113-->
        <!--Description: Adversaries can abuse winget to download payloads remotely and execute them without touching disk. Winget will be included by default in Windows 10 and is already available in Windows 10 insider programs. The manifest option enables you to install an application by passing in a YAML file directly to the client. Winget can be used to download and install exe's, msi, msix files later.-->
        <!--Date: 2020/04/21-->
        <!--Status: experimental-->
        <!--ID: 313d6012-51a0-4d93-8dfc-de8553239e25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Monitoring Winget For LOLbin Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)winget</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)install</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-m\ |\-\-manifest</field>
    </rule>
    <rule id="113968" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_registered_com_objects.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: load malicious registered COM objects-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: f1edd233-30b5-4823-9e6a-c4171b24d316-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Rundll32 Registered COM Objects</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-sta\ |–localserver\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\{</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\}</field>
    </rule>
    <rule id="113969" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_nltest_recon.yml</info>
        <!--Sigma Rule Author: Craig Young, oscd.community, Georg Lauenstein-->
        <!--Description: Detects nltest commands that can be used for information discovery-->
        <!--Date: 2021/07/24-->
        <!--Status: experimental-->
        <!--ID: 5cc90652-4cbd-4241-aa3b-4b462fa5a248-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Recon Activity with NLTEST</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\nltest\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/server</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/query</field>
    </rule>
    <rule id="113970" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_nltest_recon.yml</info>
        <!--Sigma Rule Author: Craig Young, oscd.community, Georg Lauenstein-->
        <!--Description: Detects nltest commands that can be used for information discovery-->
        <!--Date: 2021/07/24-->
        <!--Status: experimental-->
        <!--ID: 5cc90652-4cbd-4241-aa3b-4b462fa5a248-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Recon Activity with NLTEST</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\nltest\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/dclist:|/parentdomain|/domain_trusts|/trusted_domains|/user</field>
    </rule>
    <rule id="113971" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_encoded_param.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious encoded character syntax often used for defense evasion-->
        <!--Date: 2020/07/09-->
        <!--Status: test-->
        <!--ID: e312efd0-35a1-407f-8439-b8d434b438a6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Encoded Character Syntax</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\(WCHAR\)0x</field>
    </rule>
    <rule id="113972" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_indirect_cmd_compatibility_assistant.yml</info>
        <!--Sigma Rule Author: A. Sungurov , oscd.community-->
        <!--Description: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: b97cd4b1-30b8-4a9d-bd72-6293928d52bc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
        </mitre>
        <description>Indirect Command Execution By Program Compatibility Wizard</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\pcwrun\.exe)$</field>
    </rule>
    <rule id="113973" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rundll32_no_params.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious start of rundll32.exe without any parameters as found in CobaltStrike beacon activity-->
        <!--Date: 2021/05/27-->
        <!--Status: experimental-->
        <!--ID: 1775e15e-b61b-4d14-a1a3-80981298085a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Rundll32 Without Any CommandLine Params</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\AppData\\Local\\|\\Microsoft\\Edge\\</field>
    </rule>
    <rule id="113974" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hwp_exploits.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 023394c4-29d5-46ab-92b8-6a534c6f447b-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.t1059.003</id>
            <id>attack.g0032</id>
        </mitre>
        <description>Suspicious HWP Sub Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\Hwp\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\gbb\.exe)$</field>
    </rule>
    <rule id="113975" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_taskmgr_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of a process from Windows task manager-->
        <!--Date: 2018/03/13-->
        <!--Status: test-->
        <!--ID: 3d7679bd-0c00-440c-97b0-3f204273e6c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Taskmgr as Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\taskmgr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\resmon\.exe|\\mmc\.exe|\\taskmgr\.exe)$</field>
    </rule>
    <rule id="113976" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmi_persistence_script_event_consumer.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects WMI script event consumers-->
        <!--Date: 2018/03/07-->
        <!--Status: test-->
        <!--ID: ec1d5e28-8f3b-4188-a6f8-6e8df81dc28e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence - Script Event Consumer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\system32\\wbem\\scrcons\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\svchost\.exe</field>
    </rule>
    <rule id="113977" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_html_help_spawn.yml</info>
        <!--Sigma Rule Author: Maxim Pavlunin-->
        <!--Description: Detects a suspicious child process of a Microsoft HTML Help system when executing compiled HTML files (.chm)-->
        <!--Date: 2020/04/01-->
        <!--Status: test-->
        <!--ID: 52cad028-0ff0-4854-8f67-d25dfcbc78b4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.001</id>
            <id>attack.t1218.010</id>
            <id>attack.t1218.011</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.t1047</id>
        </mitre>
        <description>HTML Help Shell Spawn</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\hh\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\regsvr32\.exe|\\wmic\.exe|\\rundll32\.exe)$</field>
    </rule>
    <rule id="113978" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_covenant.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious command lines used in Covenant luanchers-->
        <!--Date: 2020/06/04-->
        <!--Status: test-->
        <!--ID: c260b6db-48ba-4b4a-a76f-2f67644e99d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>Covenant Launcher Indicators</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Sta</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Nop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Window</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Command|\-EncodedCommand</field>
    </rule>
    <rule id="113979" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_covenant.yml</info>
        <!--Sigma Rule Author: Florian Roth, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious command lines used in Covenant luanchers-->
        <!--Date: 2020/06/04-->
        <!--Status: test-->
        <!--ID: c260b6db-48ba-4b4a-a76f-2f67644e99d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>Covenant Launcher Indicators</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sv\ o\ \(New\-Object\ IO\.MemorySteam\);sv\ d\ |mshta\ file\.hta|GruntHTTP|\-EncodedCommand\ cwB2ACAAbwAgA</field>
    </rule>
    <rule id="113980" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_emotet_rundll32_execution.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye-->
        <!--Description: Detecting Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL-->
        <!--Date: 2020/12/25-->
        <!--Status: experimental-->
        <!--ID: 54e57ce3-0672-46eb-a402-2c0948d5e3e9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Emotet RunDLL32 Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:,RunDLL|,Control_RunDLL)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\tracker\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dll,Control_RunDLL|\.dll",Control_RunDLL|\.dll',Control_RunDLL)$</field>
    </rule>
    <rule id="113981" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_conti.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects a command used by conti to find volume shadow backups-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 7b30e0a7-c675-4b24-8a46-82fa67e2433d-->
        <mitre>
            <id>attack.t1587.001</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>Conti Volume Shadow Listing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)vssadmin\ list\ shadows</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)log\.txt</field>
    </rule>
    <rule id="113982" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sharpview.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: b2317cfa-4a47-4ead-b3ff-297438c0bc2d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
            <id>attack.t1069.002</id>
            <id>attack.t1482</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Suspicious Execution of SharpView Aka PowerView</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SharpView\.exe</field>
    </rule>
    <rule id="113983" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sharpview.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: b2317cfa-4a47-4ead-b3ff-297438c0bc2d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
            <id>attack.t1069.002</id>
            <id>attack.t1482</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Suspicious Execution of SharpView Aka PowerView</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-DomainGPOUserLocalGroupMapping|Find\-GPOLocation|Get\-DomainGPOComputerLocalGroupMapping|Find\-GPOComputerAdmin|Get\-DomainObjectAcl|Get\-ObjectAcl|Add\-DomainObjectAcl|Add\-ObjectAcl|Remove\-DomainObjectAcl|Get\-RegLoggedOn|Get\-LoggedOnLocal|Get\-NetRDPSession|Test\-AdminAccess|Invoke\-CheckLocalAdminAccess|Get\-WMIProcess|Get\-NetProcess|Get\-WMIRegProxy|Get\-Proxy|Get\-WMIRegLastLoggedOn|Get\-LastLoggedOn|Get\-WMIRegCachedRDPConnection|Get\-CachedRDPConnection|Get\-WMIRegMountedDrive|Get\-RegistryMountedDrive|Find\-InterestingDomainAcl|Invoke\-ACLScanner|Get\-NetShare|Get\-NetLoggedon|Get\-NetLocalGroup|Get\-NetLocalGroupMember|Get\-NetSession|Get\-PathAcl|ConvertFrom\-UACValue|Get\-PrincipalContext|New\-DomainGroup|New\-DomainUser|Add\-DomainGroupMember|Set\-DomainUserPassword|Invoke\-Kerberoast|Export\-PowerViewCSV|Find\-LocalAdminAccess|Find\-DomainLocalGroupMember|Find\-DomainShare|Find\-DomainUserEvent|Find\-DomainProcess|Find\-DomainUserLocation|Find\-InterestingFile|Find\-InterestingDomainShareFile|Find\-DomainObjectPropertyOutlier|TestMethod|Get\-Domain|Get\-NetDomain|Get\-DomainComputer|Get\-NetComputer|Get\-DomainController|Get\-NetDomainController|Get\-DomainFileServer|Get\-NetFileServer|Convert\-ADName|Get\-DomainObject|Get\-ADObject|Get\-DomainUser|Get\-NetUser|Get\-DomainGroup|Get\-NetGroup|Get\-DomainDFSShare|Get\-DFSshare|Get\-DomainDNSRecord|Get\-DNSRecord|Get\-DomainDNSZone|Get\-DNSZone|Get\-DomainForeignGroupMember|Find\-ForeignGroup|Get\-DomainForeignUser|Find\-ForeignUser|ConvertFrom\-SID|Convert\-SidToName|Get\-DomainGroupMember|Get\-NetGroupMember|Get\-DomainManagedSecurityGroup|Find\-ManagedSecurityGroups|Get\-DomainOU|Get\-NetOU|Get\-DomainSID|Get\-Forest|Get\-NetForest|Get\-ForestTrust|Get\-NetForestTrust|Get\-DomainTrust|Get\-NetDomainTrust|Get\-ForestDomain|Get\-NetForestDomain|Get\-DomainSite|Get\-NetSite|Get\-DomainSubnet|Get\-NetSubnet|Get\-DomainTrustMapping|Invoke\-MapDomainTrust|Get\-ForestGlobalCatalog|Get\-NetForestCatalog|Get\-DomainUserEvent|Get\-UserEvent|Get\-DomainGUIDMap|Get\-GUIDMap|Resolve\-IPAddress|Get\-IPAddress|ConvertTo\-SID|Invoke\-UserImpersonation|Invoke\-RevertToSelf|Get\-DomainSPNTicket|Request\-SPNTicket|Get\-NetComputerSiteName|Get\-SiteName|Get\-DomainGPO|Get\-NetGPO|Set\-DomainObject|Set\-ADObject|Add\-RemoteConnection|Remove\-RemoteConnection|Get\-IniContent|Get\-GptTmpl|Get\-GroupsXML|Get\-DomainPolicyData|Get\-DomainPolicy|Get\-DomainGPOLocalGroup|Get\-NetGPOGroup</field>
    </rule>
    <rule id="113984" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_certreq_download.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files-->
        <!--Date: 2021/11/24-->
        <!--Status: experimental-->
        <!--ID: 4480827a-9799-4232-b2c4-ccc6c4e9e12b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Certreq Command to Download</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\certreq\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-Post\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-config\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ C:\\\\Windows\\\\win\.ini\ )</field>
    </rule>
    <rule id="113985" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: b222df08-0e07-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+clip(?:\.exe)?.{0,4}&amp;&amp;.+clipboard]::\(\s\\\"\{\d\}.+\-f.+\"</field>
    </rule>
    <rule id="113986" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbas_extexport.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Extexport.exe loads dll and is execute from other folder the original path-->
        <!--Date: 2021/11/26-->
        <!--Status: experimental-->
        <!--ID: fb0b815b-f5f6-4f50-970f-ffe21f253f7a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Extexport Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Extexport\.exe</field>
    </rule>
    <rule id="113987" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_outlook_temp.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious program execution in Outlook temp folder-->
        <!--Date: 2019/10/01-->
        <!--Status: experimental-->
        <!--ID: a018fdc3-46a3-44e5-9afb-2cd4af1d4b39-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Execution in Outlook Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Temporary\ Internet\ Files\\Content\.Outlook\\</field>
    </rule>
    <rule id="113988" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sqlcmd_veeam_dump.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects dump of credentials in VeeamBackup dbo-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: b57ba453-b384-4ab9-9f40-1038086b4e53-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1005</id>
        </mitre>
        <description>VeeamBackup Database Credentials Dump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sqlcmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SELECT</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)TOP</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\[VeeamBackup\]\.\[dbo\]\.\[Credentials\]</field>
    </rule>
    <rule id="113989" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2020_1048.yml</info>
        <!--Sigma Rule Author: EagleEye Team, Florian Roth-->
        <!--Description: Detects new commands that add new printer port which point to suspicious file-->
        <!--Date: 2020/05/13-->
        <!--Status: test-->
        <!--ID: cc08d590-8b90-413a-aff6-31d1a99678d7-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PrinterPorts Creation (CVE-2020-1048)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Add\-PrinterPort\ \-Name</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe|\.dll|\.bat</field>
    </rule>
    <rule id="113990" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2020_1048.yml</info>
        <!--Sigma Rule Author: EagleEye Team, Florian Roth-->
        <!--Description: Detects new commands that add new printer port which point to suspicious file-->
        <!--Date: 2020/05/13-->
        <!--Status: test-->
        <!--ID: cc08d590-8b90-413a-aff6-31d1a99678d7-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PrinterPorts Creation (CVE-2020-1048)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Generic\ /\ Text\ Only</field>
    </rule>
    <rule id="113991" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: experimental-->
        <!--ID: 46591fae-7a4c-46ea-aec3-dff5e6d785dc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\certutil\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-addstore</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)root</field>
    </rule>
    <rule id="113992" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: experimental-->
        <!--ID: 46591fae-7a4c-46ea-aec3-dff5e6d785dc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\CertMgr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)root</field>
    </rule>
    <rule id="113993" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mal_adwind.yml</info>
        <!--Sigma Rule Author: Florian Roth, Tom Ueltschi, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects javaw.exe in AppData folder as used by Adwind / JRAT-->
        <!--Date: 2017/11/10-->
        <!--Status: experimental-->
        <!--ID: 1fac1481-2dbc-48b2-9096-753c49b4ec71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Adwind RAT / JRAT</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\Roaming\\Oracle</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\java</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cscript\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Retrive</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.vbs\ )</field>
    </rule>
    <rule id="113994" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_import_keys_ads.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Detects the import of a alternate datastream to the registry with regedit.exe.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 0b80ade5-6997-4b1d-99a1-71701778ea61-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Imports Registry Key From an ADS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i\ |\.reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^ \\\\]</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /e\ |\ /a\ |\ /c\ )</field>
    </rule>
    <rule id="113995" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_conti_shadowcopy.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects a command used by conti to access volume shadow backups-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: f57f8d16-1f39-4dcb-a604-6c73d9b54b3d-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Conti Volume Shadow Listing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\NTDS\.dit|\\\\SYSTEM|\\\\SECURITY|C:\\\\tmp\\\\log</field>
    </rule>
    <rule id="113996" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wmic_security_product_uninstall.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects deinstallation of security products using WMIC utility-->
        <!--Date: 2021/01/30-->
        <!--Status: experimental-->
        <!--ID: 847d5ff3-8a31-4737-a970-aeae8fe21765-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Wmic Uninstall Security Product</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wmic</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)product\ where\ name=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)call\ uninstall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/nointeractive</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Antivirus|AVG\ |Crowdstrike\ Sensor|DLP\ Endpoint|Endpoint\ Detection|Endpoint\ Protection|Endpoint\ Security|Endpoint\ Sensor|ESET\ File\ Security|Malwarebytes|McAfee\ Agent|Microsoft\ Security\ Client|Threat\ Protection|VirusScan|Webroot\ SecureAnywhere|Windows\ Defender</field>
    </rule>
    <rule id="113997" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_priv.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privieleges. This is often used after a privilege escalation attempt.-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: 97a80ec7-0e2f-4d05-9ef4-65760e634f6b-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Run Whoami Showing Privileges</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/priv</field>
    </rule>
    <rule id="113998" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_xordump.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious use of XORDump process memory dumping utility-->
        <!--Date: 2022/01/28-->
        <!--Status: experimental-->
        <!--ID: 66e563f9-1cbd-4a22-a957-d8b7c0f44372-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>XORDump Use</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\xordump\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-process\ lsass\.exe\ |\ \-m\ comsvcs\ |\ \-m\ dbghelp\ |\ \-m\ dbgcore\ )</field>
    </rule>
    <rule id="113999" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cl_invocation_lolscript.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Execution via SyncInvoke in CL_Invocation.ps1 module-->
        <!--Date: 2020/10/14-->
        <!--Status: experimental-->
        <!--ID: a0459f02-ac51-4c09-b511-b8c9203fc429-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execution via CL_Invocation.ps1</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)CL_Invocation\.ps1</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SyncInvoke</field>
    </rule>
    <rule id="114000" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_psr_capture_screenshots.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: The psr.exe captures desktop screenshots and saves them on the local machine-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: 2158f96f-43c2-43cb-952a-ab4580f32382-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1113</id>
        </mitre>
        <description>Psr.exe Capture Screenshots</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Psr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/start</field>
    </rule>
    <rule id="114001" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_uac_bypass_trustedpath.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects indicators of a UAC bypass method by mocking directories-->
        <!--Date: 2021/08/27-->
        <!--Status: test-->
        <!--ID: 4ac47ed3-44c2-4b1f-9d51-bf46e8914126-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>TrustedPath UAC Bypass Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\Windows\ \\System32\\</field>
    </rule>
    <rule id="114002" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmdkey_recon.yml</info>
        <!--Sigma Rule Author: jmallette-->
        <!--Description: Detects usage of cmdkey to look for cached credentials-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: 07f8bdc2-c9b3-472a-9817-5a670b872f53-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.005</id>
        </mitre>
        <description>Cmdkey Cached Credentials Recon</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmdkey\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /list</field>
    </rule>
    <rule id="114003" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conti_cmd_ransomware.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Conti ransomware command line ioc-->
        <!--Date: 2021/10/12-->
        <!--Status: experimental-->
        <!--ID: 689308fc-cfba-4f72-9897-796c1dc61487-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.s0575</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Conti Ransomware Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-m\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-net\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-size\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-nomutex\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-p\ \\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="114004" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mouse_lock.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool "Mouse Lock" as being used for both credential access and collection in security incidents.-->
        <!--Date: 2020/08/13-->
        <!--Status: test-->
        <!--ID: c9192ad9-75e5-43eb-8647-82a0a5b493e3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.collection</id>
            <id>attack.t1056.002</id>
        </mitre>
        <description>Mouse Lock Credential Gathering</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Mouse\ Lock</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)Misc314</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Mouse\ Lock_</field>
    </rule>
    <rule id="114005" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wmic_proc_create_rundll32.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects WMI executing rundll32-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Suspicious WMI Execution Using Rundll32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)process\ call\ create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
    </rule>
    <rule id="114006" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_possible_applocker_bypass.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detects execution of executables that can be used to bypass Applocker whitelisting-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.004</id>
            <id>attack.t1218.009</id>
            <id>attack.t1127.001</id>
            <id>attack.t1218.005</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Possible Applocker Bypass</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\msdt\.exe|\\installutil\.exe|\\regsvcs\.exe|\\regasm\.exe|\\msbuild\.exe|\\ieexec\.exe</field>
    </rule>
    <rule id="114007" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_grabbing_sensitive_hives_via_reg.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Endgame, JHasenbusch, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Dump sam, system or security hives using REG.exe utility-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: fd877b94-9bb5-4191-bb25-d79cbd93c167-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>car.2013-07-001</id>
        </mitre>
        <description>Grabbing Sensitive Hives via Reg Utility</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)save|export|ˢave|eˣport</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hklm|hk˪m|hkey_local_machine|hkey_˪ocal_machine|hkey_loca˪_machine|hkey_˪oca˪_machine</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\system|\\sam|\\security|\\ˢystem|\\syˢtem|\\ˢyˢtem|\\ˢam|\\ˢecurity)$</field>
    </rule>
    <rule id="114008" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_netsh_dll_persistence.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects persitence via netsh helper-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 56321594-9087-49d9-bf10-524fe8479452-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.007</id>
            <id>attack.s0108</id>
        </mitre>
        <description>Suspicious Netsh DLL Persistence</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)helper</field>
    </rule>
    <rule id="114009" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_sam_access.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell scripts accessing SAM hives-->
        <!--Date: 2021/07/29-->
        <!--Status: experimental-->
        <!--ID: 1af57a4b-460a-4738-9034-db68b880c665-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>PowerShell SAM Copy</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\HarddiskVolumeShadowCopy</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ystem32\\config\\sam</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Copy\-Item|cp\ \$_\.|cpi\ \$_\.|copy\ \$_\.|\.File\]::Copy\(</field>
    </rule>
    <rule id="114010" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remove_windows_defender_definition_files.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files-->
        <!--Date: 2021/07/07-->
        <!--Status: experimental-->
        <!--ID: 9719a8aa-401c-41af-8108-ced7ec9cd75c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Remove Windows Defender Definition Files</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)MpCmdRun\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-RemoveDefinitions</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-All</field>
    </rule>
    <rule id="114011" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_changepk_slui.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using ChangePK and SLUI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\changepk\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\slui\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="114012" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_findstr_385201.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).-->
        <!--Date: 2021/12/16-->
        <!--Status: experimental-->
        <!--ID: 37db85d1-b089-490a-a59a-c7b6f984f480-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518.001</id>
        </mitre>
        <description>Suspicious Findstr 385201 Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\findstr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ 385201</field>
    </rule>
    <rule id="114013" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbins_by_office_applications.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: This rule will monitor any office apps that spins up a new LOLBin process. This activity is pretty suspicious and should be investigated.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 23daeb52-e6eb-493c-8607-c4f0246cb7d8-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>New Lolbin Process by Office Applications</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:regsvr32|rundll32|msiexec|mshta|verclsid)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:winword\.exe|excel\.exe|powerpnt\.exe)$</field>
    </rule>
    <rule id="114014" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_atbroker.yml</info>
        <!--Sigma Rule Author: Mateusz Wydra, oscd.community-->
        <!--Description: Atbroker executing non-deafualt Assistive Technology applications-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: f24bcaea-0cd1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Atbroker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:AtBroker\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)animations|audiodescription|caretbrowsing|caretwidth|colorfiltering|cursorscheme|filterkeys|focusborderheight|focusborderwidth|highcontrast|keyboardcues|keyboardpref|magnifierpane|messageduration|minimumhitradius|mousekeys|Narrator|osk|overlappedcontent|showsounds|soundsentry|stickykeys|togglekeys|windowarranging|windowtracking|windowtrackingtimeout|windowtrackingzorder</field>
    </rule>
    <rule id="114015" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_calc.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious use of calc.exe with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion-->
        <!--Date: 2019/02/09-->
        <!--Status: test-->
        <!--ID: 737e618a-a410-49b5-bec3-9e55ff7fbc15-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Calculator Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\calc\.exe\ )</field>
    </rule>
    <rule id="114016" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_calc.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious use of calc.exe with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion-->
        <!--Date: 2019/02/09-->
        <!--Status: test-->
        <!--ID: 737e618a-a410-49b5-bec3-9e55ff7fbc15-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Calculator Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\calc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\\\Windows\\\\Sys</field>
    </rule>
    <rule id="114017" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_reverse_shell_connection.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye, wagga-->
        <!--Description: Detects the Nishang Invoke-PowerShellTcpOneLine reverse shell-->
        <!--Date: 2021/03/03-->
        <!--Status: experimental-->
        <!--ID: edc2f8ae-2412-4dfd-b9d5-0c57727e70be-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Powershell Reverse Shell Connection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-object\ system\.net\.sockets\.tcpclient</field>
    </rule>
    <rule id="114018" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_wsreset.yml</info>
        <!--Sigma Rule Author: Christian Burkard-->
        <!--Description: Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 89a9a0e0-f61a-42e5-8957-b1479565a658-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass WSReset</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wsreset\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="114019" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_judgement_panda_gtr19.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Judgement Panda activity as described in Global Threat Report 2019 by Crowdstrike-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: 03e2746e-2b31-42f1-ab7a-eb39365b2422-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.g0010</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.exfiltration</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Judgement Panda Exfil Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:eprod\.ldf)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\ldifde\.exe\ \-f\ \-n\ |\\7za\.exe\ a\ 1\.7z\ |\\aaaa\\procdump64\.exe|\\aaaa\\netsess\.exe|\\aaaa\\7za\.exe|copy\ \.\\1\.7z\ \\|copy\ \\\\client\\c\$\\aaaa\\</field>
    </rule>
    <rule id="114020" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_judgement_panda_gtr19.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Judgement Panda activity as described in Global Threat Report 2019 by Crowdstrike-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: 03e2746e-2b31-42f1-ab7a-eb39365b2422-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.g0010</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.exfiltration</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Judgement Panda Exfil Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\Users\\Public\\7za\.exe</field>
    </rule>
    <rule id="114021" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_network_scan_loop.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system-->
        <!--Date: 2022/03/12-->
        <!--Status: experimental-->
        <!--ID: f8ad2e2c-40b6-4117-84d7-20b89896ab23-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>Suspicious Scan Loop Network</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:for\ |foreach\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)nslookup|ping</field>
    </rule>
    <rule id="114022" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_task_folder_evasion.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: The Tasks folder in system32 and syswow64 are globally writable paths. Adversaries can take advantage of this and load or influence any script hosts or ANY .NET Application in Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr-->
        <!--Date: 2020/01/13-->
        <!--Status: experimental-->
        <!--ID: cc4e02ba-9c06-48e2-b09e-2500cace9ae0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Tasks Folder Evasion</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo\ |copy\ |type\ |file\ createnew</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ C:\\\\Windows\\\\System32\\Tasks\\|\ C:\\\\Windows\\\\SysWow64\\Tasks\\</field>
    </rule>
    <rule id="114023" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_turla_commands_critical.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects automated lateral movement by Turla group-->
        <!--Date: 2017/11/07-->
        <!--Status: experimental-->
        <!--ID: c601f20d-570a-4cde-a7d6-e17f99cb8e7f-->
        <mitre>
            <id>attack.g0010</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
            <id>attack.t1135</id>
        </mitre>
        <description>Turla Group Lateral Movement</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net\ use\ \\\\%DomainController%\\C\$\ "P@ssw0rd"\ |dir\ c:\\\\.+\.doc.+\ /s|dir\ %TEMP%\\\\.+\.exe</field>
    </rule>
    <rule id="114024" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shell_spawn_from_winrm.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), Markus Neis-->
        <!--Description: Detects suspicious shell spawn from WinRM host process-->
        <!--Date: 2021/05/20-->
        <!--Status: experimental-->
        <!--ID: 5cc2cda8-f261-4d88-a2de-e9e193c86716-->
        <mitre>
            <id>attack.t1190</id>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Shells Spawn by WinRM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\wsmprovhost\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\cmd\.exe|\\sh\.exe|\\bash\.exe|\\powershell\.exe|\\schtasks\.exe|\\certutil\.exe|\\whoami\.exe|\\bitsadmin\.exe</field>
    </rule>
    <rule id="114025" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_vbscript_unc2452.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious inline VBScript keywords as used by UNC2452-->
        <!--Date: 2021/03/05-->
        <!--Status: experimental-->
        <!--ID: 20c3f09d-c53d-4e85-8b74-6aa50e2f1b61-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Suspicious VBScript UN2452 Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Execute</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)CreateObject</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegRead</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)window\.close</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Microsoft\\\\Windows\\\\CurrentVersion</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\Software\\Microsoft\\\\Windows\\\\CurrentVersion\\Run</field>
    </rule>
    <rule id="114026" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a service binary running in a suspicious directory-->
        <!--Date: 2021/03/09-->
        <!--Status: experimental-->
        <!--ID: 883faa95-175a-4e22-8181-e5761aeb373c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Service Binary Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\Users\\Public\\|\\\$Recycle\.bin|\\Users\\All\ Users\\|\\Users\\Default\\|\\Users\\Contacts\\|\\Users\\Searches\\|C:\\Perflogs\\|\\config\\systemprofile\\|\\\\Windows\\\\Fonts\\|\\\\Windows\\\\IME\\|\\\\Windows\\\\addins\\</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\services\.exe|\\svchost\.exe)$</field>
    </rule>
    <rule id="114027" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_redirect.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use ">" to redicrect information in commandline-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 4f4eaa9f-5ad4-410c-a4be-bc6132b0175a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Redirect Output in CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;</field>
    </rule>
    <rule id="114028" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_whoami_as_param.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)-->
        <!--Date: 2021/11/29-->
        <!--Status: experimental-->
        <!--ID: e9142d84-fbe0-401d-ac50-3e519fb00c89-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>WhoAmI as Parameter</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ whoami</field>
    </rule>
    <rule id="114029" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_via_use_rundll32.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2019/10/08-->
        <!--Status: test-->
        <!--ID: 36c5146c-d127-4f85-8e21-01bf62355d5a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="114030" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2017_8759.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Winword starting uncommon sub process csc.exe as used in exploits for CVE-2017-8759-->
        <!--Date: 2017/09/15-->
        <!--Status: test-->
        <!--ID: fdd84c68-a1f6-47c9-9477-920584f94905-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.t1204.002</id>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Exploit for CVE-2017-8759</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\WINWORD\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\csc\.exe)$</field>
    </rule>
    <rule id="114031" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_purplesharp_indicators.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of the PurpleSharp adversary simulation tool-->
        <!--Date: 2021/06/18-->
        <!--Status: experimental-->
        <!--ID: ff23ffbc-3378-435e-992f-0624dcf93ab4-->
        <mitre>
            <id>attack.t1587</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>PurpleSharp Indicator</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)xyz123456\.exe|PurpleSharp</field>
    </rule>
    <rule id="114032" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_purplesharp_indicators.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of the PurpleSharp adversary simulation tool-->
        <!--Date: 2021/06/18-->
        <!--Status: experimental-->
        <!--ID: ff23ffbc-3378-435e-992f-0624dcf93ab4-->
        <mitre>
            <id>attack.t1587</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>PurpleSharp Indicator</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PurpleSharp\.exe</field>
    </rule>
    <rule id="114033" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_whoami.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of whoami that has been renamed to a different name to avoid detection-->
        <!--Date: 2021/08/12-->
        <!--Status: experimental-->
        <!--ID: f1086bf7-a0c4-4a37-9102-01e573caf4a0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Renamed Whoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)whoami\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
    </rule>
    <rule id="114034" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_findstr.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: bf6c39fc-e203-45b9-9538-05397c1b4f3f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusing Findstr for Defense Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)findstr</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/V</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/L</field>
    </rule>
    <rule id="114035" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_findstr.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: bf6c39fc-e203-45b9-9538-05397c1b4f3f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusing Findstr for Defense Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)findstr</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/S</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/I</field>
    </rule>
    <rule id="114036" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_proc_dump_rdrleakdiag.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/01/04-->
        <!--Status: experimental-->
        <!--ID: 6355a919-2e97-4285-a673-74645566340d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>RdrLeakDiag Process Dump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rdrleakdiag\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/fullmemdmp</field>
    </rule>
    <rule id="114037" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_proc_dump_rdrleakdiag.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/01/04-->
        <!--Status: experimental-->
        <!--ID: 6355a919-2e97-4285-a673-74645566340d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>RdrLeakDiag Process Dump</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/fullmemdmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /o\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /p\ )</field>
    </rule>
    <rule id="114038" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_desktopimgdownldr.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: bb58aa4a-b80b-415a-a2c0-2f65a4c81009-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /lockscreenurl:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.jpg|\.jpeg|\.png</field>
    </rule>
    <rule id="114039" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_desktopimgdownldr.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: bb58aa4a-b80b-415a-a2c0-2f65a4c81009-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\PersonalizationCSP</field>
    </rule>
    <rule id="114040" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_possible_privilege_escalation_via_service_reg_perm.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level-->
        <!--Date: 2019/10/26-->
        <!--Status: experimental-->
        <!--ID: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Possible Privilege Escalation via Service Permissions Weakness</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)services</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\ImagePath|\\FailureCommand|\\ServiceDll</field>
    </rule>
    <rule id="114041" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_pester.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execute Code with Pester.bat</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Pester</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Help</field>
    </rule>
    <rule id="114042" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_pester.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execute Code with Pester.bat</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pester</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i);</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)help|\?</field>
    </rule>
    <rule id="114043" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_dridex.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community-->
        <!--Description: Detects typical Dridex process patterns-->
        <!--Date: 2019/01/10-->
        <!--Status: test-->
        <!--ID: e6eb5a96-9e6f-4a18-9cdd-642cfda21c8e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.discovery</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Dridex Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\Users\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\Desktop\\</field>
    </rule>
    <rule id="114044" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_dridex.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community-->
        <!--Description: Detects typical Dridex process patterns-->
        <!--Date: 2019/01/10-->
        <!--Status: test-->
        <!--ID: e6eb5a96-9e6f-4a18-9cdd-642cfda21c8e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.discovery</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Dridex Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)all</field>
    </rule>
    <rule id="114045" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_dridex.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community-->
        <!--Description: Detects typical Dridex process patterns-->
        <!--Date: 2019/01/10-->
        <!--Status: test-->
        <!--ID: e6eb5a96-9e6f-4a18-9cdd-642cfda21c8e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.discovery</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Dridex Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)view</field>
    </rule>
    <rule id="114046" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_xsl_script_processing.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 05c36dd6-79d6-4a9a-97da-3db20298ab2d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1220</id>
        </mitre>
        <description>XSL Script Processing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/format</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/Format:List|/Format:htable|/Format:hform|/Format:table|/Format:mof|/Format:value|/Format:rawxml|/Format:xml|/Format:csv</field>
    </rule>
    <rule id="114047" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vmtoolsd_susp_child_process.yml</info>
        <!--Sigma Rule Author: behops, Bhabesh Raj-->
        <!--Description: Detects suspicious child process creations of VMware Tools process which may indicate persistence setup-->
        <!--Date: 2021/10/08-->
        <!--Status: experimental-->
        <!--ID: 5687f942-867b-4578-ade7-1e341c46e99a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1059</id>
        </mitre>
        <description>VMToolsd Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\vmtoolsd\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\rundll32\.exe|\\regsvr32\.exe|\\wscript\.exe|\\cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\VMware\\VMware\ Tools\\poweron\-vm\-default\.bat|\\VMware\\VMware\ Tools\\poweroff\-vm\-default\.bat|\\VMware\\VMware\ Tools\\resume\-vm\-default\.bat|\\VMware\\VMware\ Tools\\suspend\-vm\-default\.bat</field>
    </rule>
    <rule id="114048" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_wmic_eventconsumer_create.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects WMIC executions in which a event consumer gets created in order to establish persistence-->
        <!--Date: 2021/06/25-->
        <!--Status: experimental-->
        <!--ID: ebef4391-1a81-4761-a40a-1db446c0e625-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Suspicious WMIC ActiveScriptEventConsumer Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ActiveScriptEventConsumer</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ CREATE\ )</field>
    </rule>
    <rule id="114049" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_winrar_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth, Tigzy-->
        <!--Description: Detects a suspicious winrar execution in a folder which is not the default installation folder-->
        <!--Date: 2021/11/17-->
        <!--Status: experimental-->
        <!--ID: 4ede543c-e098-43d9-a28f-dd784a13132f-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Winrar Execution in Non-Standard Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rar\.exe|\\winrar\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\ line\ RAR</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\WinRAR|C:\\\\Windows\\\\Temp|\\UnRAR\.exe</field>
    </rule>
    <rule id="114050" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_coti_sqlcmd.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a command used by conti to dump database-->
        <!--Date: 2021/08/16-->
        <!--Status: experimental-->
        <!--ID: 2f47f1fd-0901-466e-a770-3b7092834a1b-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1005</id>
        </mitre>
        <description>Conti Backup Database</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sqlcmd\ |sqlcmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-S\ localhost\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sys\.sysprocesses|master\.dbo\.sysdatabases|BACKUP\ DATABASE</field>
    </rule>
    <rule id="114051" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_using_sc_to_hide_sevices.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detection of sc.exe utility adding a new service with special permission which hides that service.-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: a537cfc3-4297-4789-92b5-345bfd845ad0-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Abuse of Service Permissions to Hide Services in Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sdset</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DCLCWPDTSD</field>
    </rule>
    <rule id="114052" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cmdl32_lolbas.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: lolbas Cmdl32 is use to download a payload to evade antivirus-->
        <!--Date: 2021/11/03-->
        <!--Status: experimental-->
        <!--ID: f37aba28-a9e6-4045-882c-d5004043b337-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Cmdl32 Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmdl32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)CMDL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/vpn\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/lan\ )</field>
    </rule>
    <rule id="114053" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_esentutl_webcache.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe-->
        <!--Date: 2022/02/13-->
        <!--Status: experimental-->
        <!--ID: 6a69f62d-ce75-4b57-8dce-6351eb55b362-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1005</id>
        </mitre>
        <description>Esentutl Steals Browser Information</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\esentutl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/r\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\Windows\\\\WebCache</field>
    </rule>
    <rule id="114054" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cmd_shadowcopy_access.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects a command used by conti to access volume shadow backups-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: c73124a7-3e89-44a3-bdc1-25fe4df754b1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Conti Volume Shadow Listing</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy\ \\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="114055" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_export_keys.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Detects the export of the target Registry key to a file.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: f0e53e89-8d22-46ea-9db5-9d4796ee2f8a-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Exports Registry Key To a File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /E\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)hklm|hkey_local_machine</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\system|\\sam|\\security)$</field>
    </rule>
    <rule id="114056" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sysprep_appdata.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)-->
        <!--Date: 2018/06/22-->
        <!--Status: test-->
        <!--ID: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Sysprep on AppData Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\sysprep\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\AppData\\</field>
    </rule>
    <rule id="114057" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_etw_modification_cmdline.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 41421f44-58f9-455d-838a-c398859841d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>COMPlus_ETWEnabled Command Line Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)COMPlus_ETWEnabled=0</field>
    </rule>
    <rule id="114058" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_conhost.yml</info>
        <!--Sigma Rule Author: omkar72-->
        <!--Description: Detects the conhost execution as parent process. Can be used to evaded defense mechanism.-->
        <!--Date: 2020/10/25-->
        <!--Status: experimental-->
        <!--ID: 7dc2dedd-7603-461a-bc13-15803d132355-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Conhost Parent Process Executions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\conhost\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)SystemTraceProvider\-Process</field>
    </rule>
    <rule id="114059" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dctask64_proc_inject.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious process injection using ZOHO's dctask64.exe-->
        <!--Date: 2020/01/28-->
        <!--Status: test-->
        <!--ID: 6345b048-8441-43a7-9bed-541133633d7a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>ZOHO Dctask64 Process Injection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dctask64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)DesktopCentral_Agent\\agent</field>
    </rule>
    <rule id="114060" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_expand_cabinet_files.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Adversaries can use the inbuilt expand utility to decompress cab files as seen in recent Iranian MeteorExpress attack-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: 9f107a84-532c-41af-b005-8d12a607639f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Cabinet File Expansion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\expand\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab|/F:|\-F:|C:\\ProgramData\\|C:\\Public\\|\\AppData\\Local\\Temp\\|\\AppData\\Roaming\\Temp\\</field>
    </rule>
    <rule id="114061" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_import_keys.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Detects the import of the specified file to the registry with regedit.exe.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 73bba97f-a82d-42ce-b315-9182e76c57b1-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Imports Registry Key From a File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\regedit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i\ |\ /s\ |\.reg</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /e\ |\ /a\ |\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):[^ \\\\]</field>
    </rule>
    <rule id="114062" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_psexec.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the execution of a renamed PsExec often used by attackers or malware-->
        <!--Date: 2019/05/21-->
        <!--Status: test-->
        <!--ID: a7a7e0e5-1d57-49df-9c58-9fe5bc0346a2-->
        <mitre>
            <id>car.2013-05-009</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed PsExec</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Execute\ processes\ remotely</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Sysinternals\ PsExec</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\PsExec\.exe|\\PsExec64\.exe)$</field>
    </rule>
    <rule id="114063" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mal_ryuk.yml</info>
        <!--Sigma Rule Author: Vasiliy Burov-->
        <!--Description: Detects Ryuk Ransomware command lines-->
        <!--Date: 2019/08/06-->
        <!--Status: test-->
        <!--ID: 0acaad27-9f02-4136-a243-c357202edd74-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204</id>
        </mitre>
        <description>Ryuk Ransomware</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\net\.exe|\\net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)stop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)samss|audioendpointbuilder|unistoresvc_\?\?\?\?\?</field>
    </rule>
    <rule id="114064" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_as_system.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Florian Roth-->
        <!--Description: Detects a whoami.exe executed by LOCAL SYSTEM. This may be a sign of a successful local privilege escalation.-->
        <!--Date: 2019/10/23-->
        <!--Status: experimental-->
        <!--ID: 80167ada-7a12-41ed-b8e9-aa47195c66a1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Run Whoami as SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\whoami\.exe)$</field>
    </rule>
    <rule id="114065" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_crackmapexec_powershell_obfuscation.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.-->
        <!--Date: 2020/05/22-->
        <!--Status: test-->
        <!--ID: 6f8b3439-a203-45dc-a88b-abf57ea15ccf-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.005</id>
        </mitre>
        <description>CrackMapExec PowerShell Obfuscation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)join.+split|\(\ \$ShellId\[1\]\+\$ShellId\[13\]\+'x'\)|\(\ \$PSHome\[.+\]\+\$PSHOME\[.+\]\+|\(\ \$env:Public\[13\]\+\$env:Public\[5\]\+'x'\)|\(\ \$env:ComSpec\[4,.+,25\]\-Join''\)|\[1,3\]\+'x'\-Join''\)</field>
    </rule>
    <rule id="114066" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_add_user_remote_desktop.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious command line in which a user gets added to the local Remote Desktop Users group-->
        <!--Date: 2021/12/06-->
        <!--Status: experimental-->
        <!--ID: ffa28e60-bdb1-46e0-9f82-05f7a61cc06e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1133</id>
            <id>attack.t1136.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>Suspicious Add User to Remote Desktop Users Group</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:net\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)localgroup</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Remote\ Desktop\ Users</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/add</field>
    </rule>
    <rule id="114067" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_set_policies_to_unsecure_level.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects use of executionpolicy option to set a unsecure policies-->
        <!--Date: 2021/11/01-->
        <!--Status: experimental-->
        <!--ID: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Change PowerShell Policies to an Unsecure Level</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-executionpolicy\ |\ \-ep\ |\ \-exec\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Unrestricted|bypass|RemoteSigned</field>
    </rule>
    <rule id="114068" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dns_exfiltration_tools_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Well-known DNS Exfiltration tools execution-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 98a96a5a-64a0-4c42-92c5-489da3866cb0-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
            <id>attack.t1132.001</id>
        </mitre>
        <description>DNS Exfiltration and Tunneling Tools Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\iodine\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\dnscat2</field>
    </rule>
    <rule id="114069" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_outlook.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects EnableUnsafeClientMailRules used for Script Execution from Outlook-->
        <!--Date: 2018/12/27-->
        <!--Status: test-->
        <!--ID: e212d415-0e93-435f-9e1a-f29005bb4723-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Execution from Outlook</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EnableUnsafeClientMailRules</field>
    </rule>
    <rule id="114070" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_outlook.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects EnableUnsafeClientMailRules used for Script Execution from Outlook-->
        <!--Date: 2018/12/27-->
        <!--Status: test-->
        <!--ID: e212d415-0e93-435f-9e1a-f29005bb4723-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Execution from Outlook</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\outlook\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\\\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\\\</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="114071" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_obfuscated_iex_commandline.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block-->
        <!--Date: 2019/11/08-->
        <!--Status: test-->
        <!--ID: 4bf943c6-5146-4273-98dd-e958fd1e3abf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
    </rule>
    <rule id="114072" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_acccheckconsole.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL-->
        <!--Date: 2022/01/06-->
        <!--Status: experimental-->
        <!--ID: 0f6da907-5854-4be6-859a-e9958747b0aa-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious LOLBIN AccCheckConsole</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\AccCheckConsole\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-window\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="114073" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2020_10189.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189-->
        <!--Date: 2020/03/25-->
        <!--Status: test-->
        <!--ID: 846b866e-2a57-46ee-8e16-85fa92759be7-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1059.003</id>
            <id>attack.s0190</id>
            <id>cve.2020.10189</id>
        </mitre>
        <description>Exploited CVE-2020-10189 Zoho ManageEngine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:DesktopCentral_Server\\jre\\bin\\java\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\bitsadmin\.exe)$</field>
    </rule>
    <rule id="114074" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_sourgrum.yml</info>
        <!--Sigma Rule Author: MSTIC, FPT.EagleEye-->
        <!--Description: Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM-->
        <!--Date: 2021/06/15-->
        <!--Status: experimental-->
        <!--ID: 7ba08e95-1e0b-40cd-9db5-b980555e42fd-->
        <mitre>
            <id>attack.t1546</id>
            <id>attack.t1546.015</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>SOURGUM Actor Behaviours</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)windows\\system32\\Physmem\.sys</field>
    </rule>
    <rule id="114075" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_sourgrum.yml</info>
        <!--Sigma Rule Author: MSTIC, FPT.EagleEye-->
        <!--Description: Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM-->
        <!--Date: 2021/06/15-->
        <!--Status: experimental-->
        <!--ID: 7ba08e95-1e0b-40cd-9db5-b980555e42fd-->
        <mitre>
            <id>attack.t1546</id>
            <id>attack.t1546.015</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>SOURGUM Actor Behaviours</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)Windows\\system32\\ime\\SHARED\\WimBootConfigurations\.ini|Windows\\system32\\ime\\IMEJP\\WimBootConfigurations\.ini|Windows\\system32\\ime\\IMETC\\WimBootConfigurations\.ini</field>
    </rule>
    <rule id="114076" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_sourgrum.yml</info>
        <!--Sigma Rule Author: MSTIC, FPT.EagleEye-->
        <!--Description: Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM-->
        <!--Date: 2021/06/15-->
        <!--Status: experimental-->
        <!--ID: 7ba08e95-1e0b-40cd-9db5-b980555e42fd-->
        <mitre>
            <id>attack.t1546</id>
            <id>attack.t1546.015</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>SOURGUM Actor Behaviours</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)windows\\system32\\filepath2|windows\\system32\\ime</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKEY_LOCAL_MACHINE\\software\\classes\\clsid\\\{7c857801\-7381\-11cf\-884d\-00aa004b2e24\}\\inprocserver32|HKEY_LOCAL_MACHINE\\software\\classes\\clsid\\\{cf4cc405\-e2c5\-4ddd\-b3ce\-5e7582d8c9fa\}\\inprocserver32</field>
    </rule>
    <rule id="114077" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_run_powershell_script_from_input_stream.yml</info>
        <!--Sigma Rule Author: Moriarty Meng (idea), Anton Kutepov (rule), oscd.community-->
        <!--Description: Detects PowerShell script execution via input stream redirect-->
        <!--Date: 2020/10/17-->
        <!--Status: test-->
        <!--ID: c83bf4b5-cdf0-437c-90fa-43d734f7c476-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Run PowerShell Script from Redirected Input Stream</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\s-\s*&lt;</field>
    </rule>
    <rule id="114078" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_wifi_credential_harvesting.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), oscd.community-->
        <!--Description: Detect the harvesting of wifi credentials using netsh.exe-->
        <!--Date: 2020/04/20-->
        <!--Status: test-->
        <!--ID: 42b1a5b8-353f-4f10-b256-39de4467faff-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Harvesting of Wifi Credentials Using netsh.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wlan</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ p</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ k</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)=clear</field>
    </rule>
    <rule id="114079" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_suspicious_ad_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
-->
        <!--Date: 2021/12/12-->
        <!--Status: experimental-->
        <!--ID: 164eda96-11b2-430b-85ff-6a265c15bf32-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Local Groups Information with WMIC</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ group</field>
    </rule>
    <rule id="114080" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_dosfuscation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Posssible Payload Obfuscation-->
        <!--Date: 2022/02/15-->
        <!--Status: experimental-->
        <!--ID: a77c1610-fc73-4019-8e29-0f51efc04a51-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Dosfuscation Character in Commandline</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\^\^|,;,|%COMSPEC:\~|\ s\^et\ |\ s\^e\^t\ |\ se\^t\ )</field>
    </rule>
    <rule id="114081" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exploit_cve_2017_11882.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe-->
        <!--Date: 2017/11/23-->
        <!--Status: test-->
        <!--ID: 678eb5f4-8597-4be6-8be7-905e4234b53a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.t1204.002</id>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Droppers Exploiting CVE-2017-11882</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\EQNEDT32\.EXE)$</field>
    </rule>
    <rule id="114082" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_runscripthelper.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects execution of powershell scripts via Runscripthelper.exe-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: eca49c87-8a75-4f13-9c73-a5a29e845f03-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Runscripthelper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\Runscripthelper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)surfacecheck</field>
    </rule>
    <rule id="114083" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_tropictrooper.yml</info>
        <!--Sigma Rule Author: @41thexplorer, Microsoft Defender ATP-->
        <!--Description: Detects TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia-->
        <!--Date: 2019/11/12-->
        <!--Status: stable-->
        <!--ID: 8c7090c3-e0a0-4944-bd08-08c3a0cecf79-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>TropicTrooper Campaign November 2018</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc</field>
    </rule>
    <rule id="114084" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mmc_spawn_shell.yml</info>
        <!--Sigma Rule Author: Karneades, Swisscom CSIRT-->
        <!--Description: Detects a Windows command line executable started from MMC-->
        <!--Date: 2019/08/05-->
        <!--Status: test-->
        <!--ID: 05a2ab7e-ce11-4b63-86db-ab32e763e11d-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>MMC Spawning Windows Shell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\mmc\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\cmd\.exe|\\powershell\.exe|\\wscript\.exe|\\cscript\.exe|\\sh\.exe|\\bash\.exe|\\reg\.exe|\\regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\BITSADMIN</field>
    </rule>
    <rule id="114085" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_fsutil_symlinkevaluation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: A symbolic link is a type of file that contains a reference to another file.
This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt
-->
        <!--Date: 2022/03/02-->
        <!--Status: experimental-->
        <!--ID: c0b2768a-dd06-4671-8339-b16ca8d1f27f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Fsutil Behavior Set SymlinkEvaluation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:fsutil\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:behavior\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:set\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SymlinkEvaluation</field>
    </rule>
    <rule id="114086" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_invoke_obfuscation_stdin.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 6c96fc76-0eb1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"</field>
    </rule>
    <rule id="114087" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_stordiag_execution.yml</info>
        <!--Sigma Rule Author: Austin Songer (@austinsonger)-->
        <!--Description: Detects the use of stordiag.exe to execute schtasks.exe systeminfo.exe and fltmc.exe-->
        <!--Date: 2021/10/21-->
        <!--Status: experimental-->
        <!--ID: 961e0abb-1b1e-4c84-a453-aafe56ad0d34-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution via stordiag.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\stordiag\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\schtasks\.exe|\\systeminfo\.exe|\\fltmc\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:c:\\\\Windows\\\\system32\\|c:\\\\Windows\\\\syswow64\\)</field>
    </rule>
    <rule id="114088" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_crypto_mining_monero.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects command line parameters or strings often used by crypto miners-->
        <!--Date: 2021/10/26-->
        <!--Status: stable-->
        <!--ID: 66c3b204-9f88-4d0a-a7f7-8a57d521ca55-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1496</id>
        </mitre>
        <description>Windows Crypto Mining Indicators</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-cpu\-priority=|\-\-donate\-level=0|\ \-o\ pool\.|\ \-\-nicehash|\ \-\-algo=rx/0\ |stratum\+tcp://|stratum\+udp://|LS1kb25hdGUtbGV2ZWw9|0tZG9uYXRlLWxldmVsP|tLWRvbmF0ZS1sZXZlbD|c3RyYXR1bSt0Y3A6Ly|N0cmF0dW0rdGNwOi8v|zdHJhdHVtK3RjcDovL|c3RyYXR1bSt1ZHA6Ly|N0cmF0dW0rdWRwOi8v|zdHJhdHVtK3VkcDovL</field>
    </rule>
    <rule id="114089" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_renamed_dctask64.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation-->
        <!--Date: 2020/01/28-->
        <!--Status: test-->
        <!--ID: 340a090b-c4e9-412e-bb36-b4b16fe96f9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1055.001</id>
            <id>attack.t1202</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Renamed ZOHO Dctask64</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)6834B1B94E49701D77CCB3C0895E1AFD</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\dctask64\.exe)$</field>
    </rule>
    <rule id="114090" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_interactive_at.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detect an interactive AT job, which may be used as a form of privilege escalation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 60fc936d-2eb0-4543-8a13-911c750a1dfc-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1053.002</id>
        </mitre>
        <description>Interactive AT Job</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\at\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)interactive</field>
    </rule>
    <rule id="114091" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_attrib_system.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Marks a file as a system file using the attrib.exe utility-->
        <!--Date: 2022/02/04-->
        <!--Status: experimental-->
        <!--ID: bb19e94c-59ae-4c15-8c12-c563d23fe52b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.001</id>
        </mitre>
        <description>Set Windows System File with Attrib</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\attrib\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \+s\ )</field>
    </rule>
    <rule id="114092" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_powershell_hidden_b64_cmd.yml</info>
        <!--Sigma Rule Author: John Lambert (rule)-->
        <!--Description: Detects base64 encoded strings used in hidden malicious PowerShell command lines-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: f26c6093-6f14-4b12-800f-0fcb46f5ffd0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious Base64 Encoded PowerShell Keywords in Command Lines</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ hidden\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA|aXRzYWRtaW4gL3RyYW5zZmVy|IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA|JpdHNhZG1pbiAvdHJhbnNmZX|YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg|Yml0c2FkbWluIC90cmFuc2Zlc|AGMAaAB1AG4AawBfAHMAaQB6AGUA|JABjAGgAdQBuAGsAXwBzAGkAegBlA|JGNodW5rX3Npem|QAYwBoAHUAbgBrAF8AcwBpAHoAZQ|RjaHVua19zaXpl|Y2h1bmtfc2l6Z|AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A|kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg|lPLkNvbXByZXNzaW9u|SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA|SU8uQ29tcHJlc3Npb2|Ty5Db21wcmVzc2lvb|AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ|kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA|lPLk1lbW9yeVN0cmVhb|SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A|SU8uTWVtb3J5U3RyZWFt|Ty5NZW1vcnlTdHJlYW|4ARwBlAHQAQwBoAHUAbgBrA|5HZXRDaHVua|AEcAZQB0AEMAaAB1AG4Aaw|LgBHAGUAdABDAGgAdQBuAGsA|LkdldENodW5r|R2V0Q2h1bm|AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A|QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA|RIUkVBRF9JTkZPNj|SFJFQURfSU5GTzY0|VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA|VEhSRUFEX0lORk82N|AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA|cmVhdGVSZW1vdGVUaHJlYW|MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA|NyZWF0ZVJlbW90ZVRocmVhZ|Q3JlYXRlUmVtb3RlVGhyZWFk|QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA|0AZQBtAG0AbwB2AGUA|1lbW1vdm|AGUAbQBtAG8AdgBlA|bQBlAG0AbQBvAHYAZQ|bWVtbW92Z|ZW1tb3Zl</field>
    </rule>
    <rule id="114093" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_rar_flags.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.-->
        <!--Date: 2020/05/12-->
        <!--Status: experimental-->
        <!--ID: faa48cae-6b25-4f00-a094-08947fef582f-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Rar Usage with Password and Compression Level</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-hp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-m|\ a\ )</field>
    </rule>
    <rule id="114094" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_apt_zxshell.yml</info>
        <!--Sigma Rule Author: Florian Roth, oscd.community, Jonhnathan Ribeiro-->
        <!--Description: Detects a ZxShell start by the called and well-known function name-->
        <!--Date: 2017/07/20-->
        <!--Status: test-->
        <!--ID: f0b70adb-0075-43b0-9745-e82a1c608fcc-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.s0412</id>
            <id>attack.g0001</id>
        </mitre>
        <description>ZxShell Malware</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)zxFunction|RemoteDiskXXXXX</field>
    </rule>
    <rule id="114095" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_crime_fireball.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Archer malware invocation via rundll32-->
        <!--Date: 2017/06/03-->
        <!--Status: test-->
        <!--ID: 3d4aebe0-6d29-45b2-a8a4-3dfde586a26d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Fireball Archer Install</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)InstallArcherSvc</field>
    </rule>
    <rule id="114096" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_razorinstaller_explorer.yml</info>
        <!--Sigma Rule Author: Florian Roth, Maxime Thiebaut-->
        <!--Description: Detects a explorer.exe sub process of the RazerInstaller software which can be invoked from the installer to select a different installation folder but can also be exploited to escalate privileges to LOCAL SYSTEM-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: a4eaf250-7dc1-4842-862a-5e71cd59a167-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1553</id>
        </mitre>
        <description>Suspicious RazerInstaller Explorer Subprocess</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\RazerInstaller\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Installer\\Razer\\Installer\\)</field>
    </rule>
    <rule id="114097" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_dump_sam.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 038cd51c-3ad8-41c5-ba8f-5d1c92f3cc1e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Registry Dump of SAM Creds and Secrets</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ save\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\sam|HKLM\\system|HKLM\\security</field>
    </rule>
    <rule id="114098" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_specific_comb_methods.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community-->
        <!--Description: Detects specific combinations of encoding methods in the PowerShell command lines-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToInt|ToDecimal|ToByte|ToUint|ToSingle|ToSByte</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToChar|ToString|String</field>
    </rule>
    <rule id="114099" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_specific_comb_methods.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community-->
        <!--Description: Detects specific combinations of encoding methods in the PowerShell command lines-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)char</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)join</field>
    </rule>
    <rule id="114100" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_specific_comb_methods.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community-->
        <!--Description: Detects specific combinations of encoding methods in the PowerShell command lines-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)split</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)join</field>
    </rule>
    <rule id="114101" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_specific_comb_methods.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community-->
        <!--Description: Detects specific combinations of encoding methods in the PowerShell command lines-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ForEach</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Xor</field>
    </rule>
    <rule id="114102" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_specific_comb_methods.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community-->
        <!--Description: Detects specific combinations of encoding methods in the PowerShell command lines-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cOnvErTTO\-SECUreStRIng</field>
    </rule>
    <rule id="114103" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_jusched.yml</info>
        <!--Sigma Rule Author: Markus Neis, Swisscom-->
        <!--Description: Detects renamed jusched.exe used by cobalt group-->
        <!--Date: 2019/06/04-->
        <!--Status: test-->
        <!--ID: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed jusched.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Java\ Update\ Scheduler</field>
    </rule>
    <rule id="114104" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_jusched.yml</info>
        <!--Sigma Rule Author: Markus Neis, Swisscom-->
        <!--Description: Detects renamed jusched.exe used by cobalt group-->
        <!--Date: 2019/06/04-->
        <!--Status: test-->
        <!--ID: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed jusched.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Java\(TM\)\ Update\ Scheduler</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\jusched\.exe)$</field>
    </rule>
    <rule id="114105" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_binary_highly_relevant.yml</info>
        <!--Sigma Rule Author: Matthew Green - @mgreen27, Florian Roth-->
        <!--Description: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.-->
        <!--Date: 2019/06/15-->
        <!--Status: test-->
        <!--ID: 0ba1da6d-b6ce-4366-828c-18826c9de23e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Highly Relevant Renamed Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)powershell\.exe|powershell_ise\.exe|psexec\.exe|psexec\.c|cscript\.exe|wscript\.exe|mshta\.exe|regsvr32\.exe|wmic\.exe|certutil\.exe|rundll32\.exe|cmstp\.exe|msiexec\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\powershell\.exe|\\powershell_ise\.exe|\\psexec\.exe|\\psexec64\.exe|\\cscript\.exe|\\wscript\.exe|\\mshta\.exe|\\regsvr32\.exe|\\wmic\.exe|\\certutil\.exe|\\rundll32\.exe|\\cmstp\.exe|\\msiexec\.exe)$</field>
    </rule>
    <rule id="114106" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbins_with_wmiprvse_parent_process.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)-->
        <!--Description: This rule will monitor LOLBin process creations by wmiprvse. Add more LOLBins to rule logic if needed.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 8a582fe2-0882-4b89-a82a-da6b2dc32937-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.t1047</id>
            <id>attack.t1218.010</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Lolbins Process Creation with WmiPrvse</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:regsvr32|rundll32|msiexec|mshta|verclsid)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\wbem\\WmiPrvSE\.exe)$</field>
    </rule>
    <rule id="114107" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_proxy_execution_wuauclt.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), Florian Roth-->
        <!--Description: Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: af77cf95-c469-471c-b6a0-946c685c4798-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Proxy Execution via Wuauclt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)wuauclt</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wuauclt\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)UpdateDeploymentProvider</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RunHandlerComServer</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /UpdateDeploymentProvider\ UpdateDeploymentProvider\.dll\ |\ wuaueng\.dll\ )</field>
    </rule>
    <rule id="114108" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_taskkill.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: 86085955-ea48-42a2-9dd3-85d4c36b167d-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Suspicious Execution of Taskkill</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\taskkill\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/im</field>
    </rule>
    <rule id="114109" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_tool_psexec.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects PsExec service installation and execution events (service and Sysmon)-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: f3f3a972-f982-40ad-b63c-bca6afdfad7c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Tool Execution</description>
        <options>no_full_log</options>
        <group>pipe_created,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\PSEXESVC</field>
    </rule>
    <rule id="114110" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_powershell_execution_pipe.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects execution of PowerShell-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: ac7102b4-9e1e-4802-9b4f-17c5524c015c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>T1086 PowerShell Execution</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)^(?:\\PSHost)</field>
    </rule>
    <rule id="114111" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_efspotato_namedpipe.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the pattern of a pipe name as used by the tool EfsPotato-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: 637f689e-b4a5-4a86-be0e-0100a0a33ba2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>EfsPotato Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\pipe\\|\\pipe\\srvsvc</field>
    </rule>
    <rule id="114112" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_mal_cobaltstrike_re.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: 0e7163d4-9e19-4fa7-9be6-000c61aad77a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>CobaltStrike Named Pipe Pattern Regex</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\\\mojo\.5688\.8052\.(?:183894939787088877|35780273329370473)[0-9a-f]{2}</field>
    </rule>
    <rule id="114113" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_psexec_pipes_artifacts.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detecting use PsExec via Pipe Creation/Access to pipes-->
        <!--Date: 2020/05/10-->
        <!--Status: test-->
        <!--ID: 9e77ed63-2ecf-4c7b-b09d-640834882028-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>PsExec Pipes Artifacts</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)^(?:psexec|paexec|remcom|csexec)</field>
    </rule>
    <rule id="114114" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_mal_namedpipes.yml</info>
        <!--Sigma Rule Author: Florian Roth, blueteam0ps, elhoim-->
        <!--Description: Detects the creation of a named pipe used by known APT malware-->
        <!--Date: 2017/11/06-->
        <!--Status: experimental-->
        <!--ID: fe3ac066-98bb-432a-b1e7-a5229cb39d4a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Malicious Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\isapi_http|\\isapi_dg|\\isapi_dg2|\\sdlrpc|\\ahexec|\\winsession|\\lsassw|\\46a676ab7f179e511e30dd2dc41bd388|\\9f81f59bc58452127884ce513865ed20|\\e710f28d59aa529d6792ca6ff0ca1b34|\\rpchlp_3|\\NamePipe_MoreWindows|\\pcheap_reuse|\\gruntsvc|\\583da945\-62af\-10e8\-4902\-a8f205c72b2e|\\bizkaz|\\svcctl|\\Posh|\\jaccdpqnvbrrxlaf|\\csexecsvc|\\6e7645c4\-32c5\-4fe3\-aabf\-e94c2f4370e7|\\adschemerpc|\\AnonymousPipe|\\bc367|\\bc31a7|\\testPipe|\\dce_3d</field>
    </rule>
    <rule id="114115" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_apt_turla_namedpipes.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects a named pipe used by Turla group samples-->
        <!--Date: 2017/11/06-->
        <!--Status: test-->
        <!--ID: 739915e4-1e70-4778-8b8a-17db02f66db1-->
        <mitre>
            <id>attack.g0010</id>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Turla Group Named Pipes</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\atctl|\\userpipe|\\iehelper|\\sdlrpc|\\comnap</field>
    </rule>
    <rule id="114116" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_susp_adfs_namedpipe_connection.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database). Used to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.-->
        <!--Date: 2021/10/08-->
        <!--Status: experimental-->
        <!--ID: 1ea13e8c-03ea-409b-877d-ce5c3d2c1cb3-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1005</id>
        </mitre>
        <description>ADFS Database Named Pipe Connection</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\MICROSOFT\#\#WID\\tsql\\query</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\Microsoft\.IdentityServer\.ServiceHost\.exe|\\Microsoft\.Identity\.Health\.Adfs\.PshSurrogate\.exe|\\AzureADConnect\.exe|\\Microsoft\.Tri\.Sensor\.exe|\\wsmprovhost\.exe|\\mmc\.exe|\\sqlservr\.exe|\\tssdis\.exe)$</field>
    </rule>
    <rule id="114117" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_susp_wmi_consumer_namedpipe.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the WMI Event Consumer service scrcons.exe creating a named pipe-->
        <!--Date: 2021/09/01-->
        <!--Status: experimental-->
        <!--ID: 493fb4ab-cdcc-4c4f-818c-0e363bd1e4bb-->
        <mitre>
            <id>attack.t1047</id>
            <id>attack.execution</id>
        </mitre>
        <description>WMI Event Consumer Created Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\scrcons\.exe)$</field>
    </rule>
    <rule id="114118" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/pipe_created/pipe_created_cred_dump_tools_named_pipes.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via specific named pipes-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 961d0ba2-3eea-4303-a930-2cf78bbfcc5e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
        </mitre>
        <description>Cred Dump-Tools Named Pipes</description>
        <options>no_full_log</options>
        <group>windows,pipe_created,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.pipeName" negate="no" type="pcre2">(?i)\\lsadump|\\cachedump|\\wceservicepipe</field>
    </rule>
    <rule id="114119" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_uipromptforcreds_dlls.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects potential use of UIPromptForCredentials functions by looking for some of the DLLs needed for it.-->
        <!--Date: 2020/10/20-->
        <!--Status: experimental-->
        <!--ID: 9ae01559-cf7e-4f8e-8e14-4c290a1b4784-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.collection</id>
            <id>attack.t1056.002</id>
        </mitre>
        <description>UIPromptForCredentials DLLs</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\credui\.dll|\\wincredui\.dll)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)credui\.dll|wincredui\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\System32\\|C:\\\\Windows\\\\explorer\.exe|C:\\Program\ Files\\|C:\\Users\\\\.+\\AppData\\Local\\Microsoft\\OneDrive\\\\.+\\Microsoft\.SharePoint\.exe|C:\\Program\ Files\ \(x86\)\\|C:\\\\Windows\\\\ImmersiveControlPanel\\SystemSettings\.exe|C:\\Users\\\\.+\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive\.exe|C:\\Users\\\\.+\\AppData\\Roaming\\Spotify\\Spotify\.exe)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\opera_autoupdate\.exe)$</field>
    </rule>
    <rule id="114120" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_winword_wmidll_load.yml</info>
        <!--Sigma Rule Author: Michael R. (@nahamike01)-->
        <!--Description: Detects DLL's Loaded Via Word Containing VBA Macros Executing WMI Commands-->
        <!--Date: 2019/12/26-->
        <!--Status: deprecated-->
        <!--ID: a457f232-7df9-491d-898f-b5aabd2cbe2f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Windows Management Instrumentation DLL Loaded Via Microsoft Word</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\wmiutils\.dll|\\wbemcomn\.dll|\\wbemprox\.dll|\\wbemdisp\.dll)$</field>
    </rule>
    <rule id="114121" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_suspicious_vss_ps_load.yml</info>
        <!--Sigma Rule Author: Markus Neis, @markus_neis-->
        <!--Description: Detects the image load of vss_ps.dll by uncommon executables using OriginalFileName datapoint-->
        <!--Date: 2021/07/07-->
        <!--Status: experimental-->
        <!--ID: 333cdbe8-27bb-4246-bf82-b41a0dca4b70-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Image Load of VSS_PS.dll by Uncommon Executable</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\vss_ps\.dll)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\svchost\.exe|\\msiexec\.exe|\\vssvc\.exe|\\srtasks\.exe|\\tiworker\.exe|\\dllhost\.exe|\\searchindexer\.exe|dismhost\.exe|taskhostw\.exe|\\clussvc\.exe|\\thor64\.exe|\\thor\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)c:\\\\Windows\\\\</field>
    </rule>
    <rule id="114122" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_wmiprvse_wbemcomn_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\Windows\System32\wbem\` directory over the network and loading it for a WMI DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 7707a579-e0d8-4886-a853-ce47e4575aaa-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Wmiprvse Wbemcomn DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,image_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmiprvse\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\wbem\\wbemcomn\.dll)$</field>
    </rule>
    <rule id="114123" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_wmic_remote_xsl_scripting_dlls.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).-->
        <!--Date: 2020/10/17-->
        <!--Status: test-->
        <!--ID: 06ce37c2-61ab-4f05-9ff5-b1a96d18ae32-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1220</id>
        </mitre>
        <description>WMIC Loading Scripting Libraries</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wmic\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\jscript\.dll|\\vbscript\.dll)$</field>
    </rule>
    <rule id="114124" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_pcre_net_load.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects processes loading modules related to PCRE.NET package-->
        <!--Date: 2020/10/29-->
        <!--Status: experimental-->
        <!--ID: 84b0a8f3-680b-4096-a45b-e9a89221727c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>PCRE.NET Package Image Load</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\</field>
    </rule>
    <rule id="114125" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_fax_dll.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.-->
        <!--Date: 2020/05/04-->
        <!--Status: test-->
        <!--ID: 828af599-4c53-4ed2-ba4a-a9f835c434ea-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.001</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Fax Service DLL Search Order Hijack</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:fxssvc\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:ualapi\.dll)$</field>
        <field name="win.eventdata.imageLoaded" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\WinSxS\\)</field>
    </rule>
    <rule id="114126" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_svchost_dll_search_order_hijack.yml</info>
        <!--Sigma Rule Author: SBousseaden-->
        <!--Description: IKEEXT and SessionEnv service, as they call LoadLibrary on files that do not exist within C:\Windows\System32\ by default. An attacker can place their malicious logic within the PROCESS_ATTACH block of their library and restart the aforementioned services "svchost.exe -k netsvcs" to gain code execution on a remote machine.-->
        <!--Date: 2019/10/28-->
        <!--Status: test-->
        <!--ID: 602a1f13-c640-4d73-b053-be9a2fa58b77-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Svchost DLL Search Order Hijack</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\tsmsisrv\.dll|\\tsvipsrv\.dll|\\wlbsctrl\.dll)$</field>
        <field name="win.eventdata.imageLoaded" negate="yes" type="pcre2">(?i)^(?:C:\\\\Windows\\\\WinSxS\\)</field>
    </rule>
    <rule id="114127" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_silenttrinity_stage_use.yml</info>
        <!--Sigma Rule Author: Aleksey Potapov, oscd.community-->
        <!--Description: Detects SILENTTRINITY stager use-->
        <!--Date: 2019/10/22-->
        <!--Status: experimental-->
        <!--ID: 75c505b1-711d-4f68-a357-8c3fe37dbf2d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>SILENTTRINITY Stager Execution</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)st2stager</field>
    </rule>
    <rule id="114128" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_suspicious_dbghelp_dbgcore_load.yml</info>
        <!--Sigma Rule Author: Perez Diego (@darkquassar), oscd.community, Ecco-->
        <!--Description: Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes. Tools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll. As an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.-->
        <!--Date: 2019/10/27-->
        <!--Status: test-->
        <!--ID: 0e277796-5f23-4e49-a490-483131d4f6e1-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Load of dbghelp/dbgcore DLL from Suspicious Process</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\dbghelp\.dll|\\dbgcore\.dll)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\msbuild\.exe|\\cmd\.exe|\\rundll32\.exe|\\word\.exe|\\excel\.exe|\\powerpnt\.exe|\\outlook\.exe|\\monitoringhost\.exe|\\wmic\.exe|\\bash\.exe|\\wscript\.exe|\\cscript\.exe|\\mshta\.exe|\\schtasks\.exe|\\dnx\.exe|\\regsvcs\.exe|\\sc\.exe|\\scriptrunner\.exe)$</field>
    </rule>
    <rule id="114129" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_suspicious_dbghelp_dbgcore_load.yml</info>
        <!--Sigma Rule Author: Perez Diego (@darkquassar), oscd.community, Ecco-->
        <!--Description: Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes. Tools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll. As an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.-->
        <!--Date: 2019/10/27-->
        <!--Status: test-->
        <!--ID: 0e277796-5f23-4e49-a490-483131d4f6e1-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Load of dbghelp/dbgcore DLL from Suspicious Process</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\dbghelp\.dll|\\dbgcore\.dll)$</field>
        <field name="win.eventdata.signed" negate="no" type="pcre2">(?i)FALSE</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Visual\ Studio</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-k\ LocalSystemNetworkRestricted|\-k\ UnistackSvcGroup\ \-s\ WpnUserService</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\winsxs\\.+\\TiWorker\.exe\ \-Embedding|C:\\\\Windows\\\\system32\\svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ wuauserv|C:\\\\Windows\\\\System32\\svchost\.exe\ \-k\ WerSvcGroup</field>
    </rule>
    <rule id="114130" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_unsigned_image_loaded_into_lsass.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Loading unsigned image (DLL, EXE) into LSASS process-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 857c8db3-c89b-42fb-882b-f681c7cf4da2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Unsigned Image Loaded Into LSASS Process</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.signed" negate="no" type="pcre2">(?i)false</field>
    </rule>
    <rule id="114131" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_usp_svchost_clfsw32.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances-->
        <!--Date: 2021/09/07-->
        <!--Status: experimental-->
        <!--ID: 33a2d1dd-f3b0-40bd-8baf-7974468927cc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>APT PRIVATELOG Image Load Pattern</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\svchost\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\clfsw32\.dll)$</field>
    </rule>
    <rule id="114132" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_uac_bypass_via_dism.yml</info>
        <!--Sigma Rule Author: oscd.community, Dmitry Uchakin-->
        <!--Description: Attempts to load dismcore.dll after dropping it-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: a5ea83a7-05a5-44c1-be2e-addccbbd8c03-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>UAC Bypass With Fake DLL</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\dism\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\dismcore\.dll)$</field>
        <field name="win.eventdata.imageLoaded" negate="yes" type="pcre2">(?i)C:\\\\Windows\\\\System32\\Dism\\dismcore\.dll</field>
    </rule>
    <rule id="114133" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_pingback_backdoor.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: 35a7dc42-bc6f-46e0-9f83-81f8e56c8d4b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Pingback Backdoor</description>
        <options>no_full_log</options>
        <group>windows,image_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:msdtc\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\oci\.dll</field>
    </rule>
    <rule id="114134" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_foggyweb_nobelium.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects DLL image load activity as used by FoggyWeb backdoor loader-->
        <!--Date: 2021/09/27-->
        <!--Status: experimental-->
        <!--ID: 640dc51c-7713-4faa-8a0e-e7c0d9d4654c-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587</id>
        </mitre>
        <description>FoggyWeb Backdoor DLL Loading</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\ADFS\\version\.dll</field>
    </rule>
    <rule id="114135" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_tttracer_mod_load.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: e76c8240-d68f-4773-8880-5c6f63595aaf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1218</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Time Travel Debugging Utility Usage</description>
        <options>no_full_log</options>
        <group>windows,image_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\ttdrecord\.dll|\\ttdwriter\.dll|\\ttdloader\.dll)$</field>
    </rule>
    <rule id="114136" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_wmi_module_load.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects non wmiprvse loading WMI modules-->
        <!--Date: 2019/08/10-->
        <!--Status: experimental-->
        <!--ID: 671bb7e3-a020-4824-a00e-2ee5b55f385e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMI Modules Loaded</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\wmiclnt\.dll|\\WmiApRpl\.dll|\\wmiprov\.dll|\\wmiutils\.dll|\\wbemcomn\.dll|\\wbemprox\.dll|\\WMINet_Utils\.dll|\\wbemsvc\.dll|\\fastprox\.dll)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\WmiPrvSE\.exe|\\WmiApSrv\.exe|\\svchost\.exe|\\DeviceCensus\.exe|\\CompatTelRunner\.exe|\\sdiagnhost\.exe|\\SIHClient\.exe|\\ngentask\.exe|\\\\Windows\\\\system32\\taskhostw\.exe|\\\\Windows\\\\system32\\MoUsoCoreWorker\.exe|\\\\Windows\\\\system32\\wbem\\WMIADAP\.exe|C:\\\\Windows\\\\Sysmon64\.exe|C:\\\\Windows\\\\Sysmon\.exe|C:\\\\Windows\\\\System32\\wbem\\unsecapp\.exe|\\logman\.exe|\\systeminfo\.exe|\\nvcontainer\.exe|C:\\\\Windows\\\\System32\\wbem\\WMIC\.exe|\\explorer\.exe|\\opera_autoupdate\.exe|\\MsMpEng\.exe|\\thor64\.exe|\\thor\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files\\|C:\\Program\ Files\ \(x86\)\\)</field>
    </rule>
    <rule id="114137" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_wmi_persistence_commandline_event_consumer.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects WMI command line event consumers-->
        <!--Date: 2018/03/07-->
        <!--Status: test-->
        <!--ID: 05936ce2-ee05-4dae-9d03-9a391cf2d2c6-->
        <mitre>
            <id>attack.t1546.003</id>
            <id>attack.persistence</id>
        </mitre>
        <description>WMI Persistence - Command Line Event Consumer</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\\\Windows\\\\System32\\wbem\\WmiPrvSE\.exe</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\wbemcons\.dll)$</field>
    </rule>
    <rule id="114138" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_spoolsv_dll_load.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye, Thomas Patzke (improvements)-->
        <!--Description: Detect DLL Load from Spooler Service backup folder-->
        <!--Date: 2021/06/29-->
        <!--Status: experimental-->
        <!--ID: 02fb90de-c321-4e63-a6b9-25f4b03dfd14-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574</id>
            <id>cve.2021.1675</id>
            <id>cve.2021.34527</id>
        </mitre>
        <description>Windows Spooler Service Suspicious Binary Load</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:spoolsv\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\\\Windows\\\\System32\\spool\\drivers\\x64\\3\\|\\\\Windows\\\\System32\\spool\\drivers\\x64\\4\\</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
    </rule>
    <rule id="114139" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_scrcons_imageload_wmi_scripteventconsumer.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects signs of the WMI script host process %SystemRoot%\system32\wbem\scrcons.exe functionality being used via images being loaded by a process.-->
        <!--Date: 2020/09/02-->
        <!--Status: test-->
        <!--ID: b439f47d-ef52-4b29-9a2f-57d8a96cb6b8-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Script Host Process Image Loaded</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\scrcons\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\vbscript\.dll|\\wbemdisp\.dll|\\wshom\.ocx|\\scrrun\.dll)$</field>
    </rule>
    <rule id="114140" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_python_image_load.yml</info>
        <!--Sigma Rule Author: Patrick St. John, OTR (Open Threat Research)-->
        <!--Description: Detects the image load of Python Core indicative of a Python script bundled with Py2Exe.-->
        <!--Date: 2020/05/03-->
        <!--Status: experimental-->
        <!--ID: cbb56d62-4060-40f7-9466-d8aaf3123f83-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.002</id>
        </mitre>
        <description>Python Py2Exe Image Load</description>
        <options>no_full_log</options>
        <group>windows,image_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Python\ Core</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Python</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files\\|C:\\Program\ Files\ \(x86\)\\)</field>
    </rule>
    <rule id="114141" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_abusing_azure_browser_sso.yml</info>
        <!--Sigma Rule Author: Den Iuzvyk-->
        <!--Description: Detects abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user.-->
        <!--Date: 2020/07/15-->
        <!--Status: test-->
        <!--ID: 50f852e6-af22-4c78-9ede-42ef36aa3453-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Abusing Azure Browser SSO</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:MicrosoftAccountTokenProvider\.dll)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\BackgroundTaskHost\.exe|\\devenv\.exe|\\iexplore\.exe|\\MicrosoftEdge\.exe|\\Microsoft\\Edge\\Application\\msedge\.exe|\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive\.exe|\\msedgewebview2\.exe|\\OneDrive\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files\ \(x86\)\\Microsoft\\EdgeWebView\\Application\\)</field>
    </rule>
    <rule id="114142" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_winword_vbadll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects DLL's Loaded Via Word Containing VBA Macros-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: e6ce8457-68b1-485b-9bdd-3c2b5d679aa9-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>VBA DLL Loaded Via Microsoft Word</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\VBE7\.DLL|\\VBEUI\.DLL|\\VBE7INTL\.DLL)$</field>
    </rule>
    <rule id="114143" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_script_dotnet_clr_dll_load.yml</info>
        <!--Sigma Rule Author: omkar72, oscd.community-->
        <!--Description: Detects CLR DLL being loaded by an scripting applications-->
        <!--Date: 2020/10/14-->
        <!--Status: test-->
        <!--ID: 4508a70e-97ef-4300-b62b-ff27992990ea-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>CLR DLL Loaded Via Scripting Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\wscript\.exe|\\cscript\.exe|\\mshta\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\clr\.dll|\\mscoree\.dll|\\mscorlib\.dll)$</field>
    </rule>
    <rule id="114144" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_alternate_powershell_hosts_moduleload.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe-->
        <!--Date: 2019/09/12-->
        <!--Status: experimental-->
        <!--ID: fe6e002f-f244-4278-9263-20e4b593827f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Alternate PowerShell Hosts</description>
        <options>no_full_log</options>
        <group>windows,image_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)System\.Management\.Automation</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)System\.Management\.Automation</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\powershell\.exe|\\mscorsvw\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\Program\ Files\ \(x86\)\\Microsoft\ Visual\ Studio\\|C:\\Program\ Files\\Microsoft\ Visual\ Studio\\|C:\\\\Windows\\\\System32\\|C:\\Program\ Files\\Citrix\\ConfigSync\\)</field>
    </rule>
    <rule id="114145" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_office_kerberos_dll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects Kerberos DLL being loaded by an Office Product-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: 7417e29e-c2e7-4cf6-a2e8-767228c64837-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>Active Directory Kerberos DLL Loaded Via Office Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\kerberos\.dll)$</field>
    </rule>
    <rule id="114146" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_office_dotnet_clr_dll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects CLR DLL being loaded by an Office Product-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: d13c43f0-f66b-4279-8b2c-5912077c1780-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>CLR DLL Loaded Via Office Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\clr\.dll</field>
    </rule>
    <rule id="114147" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_office_dotnet_gac_dll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects any GAC DLL being loaded by an Office Product-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: 90217a70-13fc-48e4-b3db-0d836c5824ac-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>GAC DLL Loaded Via Office Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\Microsoft\.NET\\assembly\\GAC_MSIL)</field>
    </rule>
    <rule id="114148" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_office_dotnet_assembly_dll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects any assembly DLL being loaded by an Office Product-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: ff0f2b05-09db-4095-b96d-1b75ca24894a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>dotNET DLL Loaded Via Office Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)^(?:C:\\\\Windows\\\\assembly\\)</field>
    </rule>
    <rule id="114149" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_image_load.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects Loading of samlib.dll, WinSCard.dll from untypical process e.g. through process hollowing by Mimikatz-->
        <!--Date: 2018/01/07-->
        <!--Status: test-->
        <!--ID: e32ce4f5-46c6-4c47-ba69-5de3c9193cd7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Possible Process Hollowing Image Loading</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\notepad\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\samlib\.dll|\\WinSCard\.dll)$</field>
    </rule>
    <rule id="114150" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/image_load/image_load_susp_office_dsparse_dll_load.yml</info>
        <!--Sigma Rule Author: Antonlovesdnb-->
        <!--Description: Detects DSParse DLL being loaded by an Office Product-->
        <!--Date: 2020/02/19-->
        <!--Status: test-->
        <!--ID: a2a3b925-7bb0-433b-b508-db9003263cc4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>Active Directory Parsing DLL Loaded Via Office Applications</description>
        <options>no_full_log</options>
        <group>image_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\winword\.exe|\\powerpnt\.exe|\\excel\.exe|\\outlook\.exe)$</field>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\dsparse\.dll</field>
    </rule>
    <rule id="114151" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_vuln_dell_driver.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the load of the vulnerable Dell BIOS update driver as reported in CVE-2021-21551-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: 21b23707-60d6-41bb-96e3-0f0481b0fed9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>cve.2021.21551</id>
            <id>attack.t1543</id>
        </mitre>
        <description>Vulnerable Dell BIOS Update Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\DBUtil_2_3\.Sys</field>
    </rule>
    <rule id="114152" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_vuln_dell_driver.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the load of the vulnerable Dell BIOS update driver as reported in CVE-2021-21551-->
        <!--Date: 2021/05/05-->
        <!--Status: experimental-->
        <!--ID: 21b23707-60d6-41bb-96e3-0f0481b0fed9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>cve.2021.21551</id>
            <id>attack.t1543</id>
        </mitre>
        <description>Vulnerable Dell BIOS Update Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)0296e2ce999e67c76352613a718e11516fe1b0efc3ffdb8918fc999dd76a73a5|c948ae14761095e4d76b55d9de86412258be7afd|c996d7971c49252c582171d9380360f2|ddbf5ecca5c8086afde1fb4f551e9e6400e94f4428fe7fb5559da5cffa654cc1|10b30bdee43b3a2ec4aa63375577ade650269d25|d2fd132ab7bbc6bbb87a84f026fa0244</field>
    </rule>
    <rule id="114153" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_susp_temp_use.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a driver load from a temporary directory-->
        <!--Date: 2017/02/12-->
        <!--Status: test-->
        <!--ID: 2c4523d5-d481-4ed0-8ec3-7fbf0cb41a75-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Driver Load from Temp</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_group>sysmon_event6</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\Temp\\</field>
    </rule>
    <rule id="114154" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 46deb5e1-28c9-4905-b2df-51cdcc9e6073-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Run by a Services</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="114155" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_meterpreter_or_cobaltstrike_getsystem_service_installation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation-->
        <!--Date: 2019/10/26-->
        <!--Status: experimental-->
        <!--ID: d585ab5a-6a69-49a8-96e8-4a726a54de46-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Installation</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\pipe\\</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/p:</field>
    </rule>
    <rule id="114156" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_windivert.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: 679085d5-f427-4484-9f58-1dc30a7c426d-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1599.001</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>WinDivert Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\WinDivert\.sys|\\WinDivert64\.sys</field>
    </rule>
    <rule id="114157" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth, Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)fgexec|dumpsvc|cachedump|mimidrv|gsecdump|servpw|pwdump</field>
    </rule>
    <rule id="114158" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_password_dumper_lsass.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage. The process in field Process is the malicious program. A single execution can lead to hundreds of events.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: f239b326-2f41-4d6b-9dfa-c846a60ef505-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.s0005</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Password Dumper Remote Thread in LSASS</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\lsass\.exe)$</field>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)</field>
    </rule>
    <rule id="114159" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_createremotethread_loadlibrary.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: 052ec6f6-1adc-41e6-907a-f1c813478bee-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>CreateRemoteThread API and LoadLibrary</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)(?:\\kernel32\.dll)$</field>
        <field name="win.eventdata.startFunction" negate="no" type="pcre2">(?i)LoadLibraryA</field>
    </rule>
    <rule id="114160" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_susp_powershell_rundll32.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects PowerShell remote thread creation in Rundll32.exe-->
        <!--Date: 2018/06/25-->
        <!--Status: experimental-->
        <!--ID: 99b97608-3e21-4bfe-8217-2a127c396a0e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Rundll32 Remote Thread Creation</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\rundll32\.exe)$</field>
    </rule>
    <rule id="114161" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_cobaltstrike_process_injection.yml</info>
        <!--Sigma Rule Author: Olaf Hartong, Florian Roth, Aleksey Potapov, oscd.community-->
        <!--Description: Detects a possible remote threat creation with certain characteristics which are typical for Cobalt Strike beacons-->
        <!--Date: 2018/11/30-->
        <!--Status: experimental-->
        <!--ID: 6309645e-122d-4c5b-bb2b-22e4f9c2fa42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>CobaltStrike Process Injection</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:0B80|0C7C|0C88)</field>
    </rule>
    <rule id="114162" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_powershell_code_injection.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detecting Code injection with PowerShell in another process-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Accessing WinAPI in PowerShell. Code Injection.</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon_event8</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\powershell\.exe)$</field>
    </rule>
    <rule id="114163" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_cactustorch.yml</info>
        <!--Sigma Rule Author: @SBousseaden (detection), Thomas Patzke (rule)-->
        <!--Description: Detects remote thread creation from CACTUSTORCH as described in references.-->
        <!--Date: 2019/02/01-->
        <!--Status: experimental-->
        <!--ID: 2e4e488a-6164-4811-9ea1-f960c7359c40-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.012</id>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>CACTUSTORCH Remote Thread Creation</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\System32\\cscript\.exe|\\System32\\wscript\.exe|\\System32\\mshta\.exe|\\winword\.exe|\\excel\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)\\SysWOW64\\</field>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)None</field>
    </rule>
    <rule id="114164" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/sysmon_suspicious_remote_thread.yml</info>
        <!--Sigma Rule Author: Perez Diego (@darkquassar), oscd.community-->
        <!--Description: Offensive tradecraft is switching away from using APIs like "CreateRemoteThread", however, this is still largely observed in the wild. This rule aims to detect suspicious processes (those we would not expect to behave in this way like word.exe or outlook.exe) creating remote threads on other processes. It is a generalistic rule, but it should have a low FP ratio due to the selected range of processes.-->
        <!--Date: 2019/10/27-->
        <!--Status: experimental-->
        <!--ID: 66d31e5f-52d6-40a4-9615-002d3789a119-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspicious Remote Thread Created</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon_event8</if_group>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\bash\.exe|\\cvtres\.exe|\\defrag\.exe|\\dnx\.exe|\\esentutl\.exe|\\excel\.exe|\\expand\.exe|\\find\.exe|\\findstr\.exe|\\forfiles\.exe|\\git\.exe|\\gpupdate\.exe|\\hh\.exe|\\iexplore\.exe|\\installutil\.exe|\\lync\.exe|\\makecab\.exe|\\mDNSResponder\.exe|\\monitoringhost\.exe|\\msbuild\.exe|\\mshta\.exe|\\msiexec\.exe|\\mspaint\.exe|\\outlook\.exe|\\ping\.exe|\\powerpnt\.exe|\\powershell\.exe|\\provtool\.exe|\\python\.exe|\\regsvr32\.exe|\\robocopy\.exe|\\runonce\.exe|\\sapcimc\.exe|\\schtasks\.exe|\\smartscreen\.exe|\\spoolsv\.exe|\\tstheme\.exe|\\userinit\.exe|\\vssadmin\.exe|\\vssvc\.exe|\\w3wp\.exe|\\winlogon\.exe|\\winscp\.exe|\\wmic\.exe|\\word\.exe|\\wscript\.exe)$</field>
    </rule>
    <!-- <rule id="114165" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_suspicious_targets.yml</info>
        Sigma Rule Author: Florian Roth
        Description: Detects a remote thread creation in suspicious taregt images
        Date: 2022/03/16
        Status: experimental
        ID: a1a144b7-5c9b-4853-a559-2172be8d4a03
        <description>Remote Thread Creation in Suspicious Targets</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\mspaint\.exe|\\calc\.exe|\\notepad\.exe|\\sethc\.exe|\\write\.exe|\\wordpad\.exe)$</field>
    </rule> -->
    <rule id="114166" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_tamper_with_windows_defender.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Attempting to disable scheduled scanning and other parts of windows defender atp.-->
        <!--Date: 2021/06/07-->
        <!--Status: experimental-->
        <!--ID: ec19ebab-72dc-40e1-9728-4c0b805d722c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Tamper Windows Defender</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_provider_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Set\-MpPreference</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-DisableRealtimeMonitoring\ 1|\-DisableBehaviorMonitoring\ 1|\-DisableScriptScanning\ 1|\-DisableBlockAtFirstSeen\ 1</field>
    </rule>
    <rule id="114167" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_powercat.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: c5b20776-639a-49bf-94c7-84f912b91c15-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>Netcat The Powershell Version</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)powercat\ |powercat\.ps1</field>
    </rule>
    <rule id="114168" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_downgrade_attack.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule), Lee Holmes (idea), Harish Segar (improvements)-->
        <!--Description: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0-->
        <!--Date: 2017/03/22-->
        <!--Status: experimental-->
        <!--ID: 6331d09b-4785-4c13-980f-f96661356249-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Downgrade Attack</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.engineVersion" negate="no" type="pcre2">(?i)^(?:2\.)</field>
        <field name="win.eventdata.hostVersion" negate="yes" type="pcre2">(?i)^(?:2\.)</field>
    </rule>
    <rule id="114169" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_renamed_powershell.yml</info>
        <!--Sigma Rule Author: Harish Segar, frack113-->
        <!--Description: Detects renamed powershell-->
        <!--Date: 2020/06/29-->
        <!--Status: test-->
        <!--ID: 30a8cb77-8eb3-4cfb-8e79-ad457c5a4592-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Renamed Powershell Under Powershell Channel</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)ConsoleHost</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:powershell\.exe|C:\\\\Windows\\\\System32\\WindowsPowerShell\\v1\.0\\powershell\.exe)</field>
    </rule>
    <rule id="114170" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_susp_athremotefxvgpudisablementcommand.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: f65e22f9-819e-4f96-9c7b-498364ae7a25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusable Invoke-ATHRemoteFXvGPUDisablementCommand</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Invoke\-ATHRemoteFXvGPUDisablementCommand\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-ModuleName\ |\-ModulePath\ |\-ScriptBlock\ |\-RemoteFXvGPUDisablementFilePath</field>
    </rule>
    <rule id="114171" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_alternate_powershell_hosts.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: d7326048-328b-4d5e-98af-86e84b17c765-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Alternate PowerShell Hosts</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i).+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\\\Windows\\\\System32\\WindowsPowerShell\\v1\.0\\powershell\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)Citrix\\ConfigSync\\ConfigSync\.ps1</field>
    </rule>
    <rule id="114172" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_delete_volume_shadow_copies.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Shadow Copies deletion using operating systems utilities via PowerShell-->
        <!--Date: 2021/06/03-->
        <!--Status: stable-->
        <!--ID: 87df9ee1-5416-453a-8a08-e8d4a51e9ce1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Delete Volume Shadow Copies Via WMI With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Get\-WmiObject</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\ Win32_Shadowcopy</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Delete\(\)|Remove\-WmiObject</field>
    </rule>
    <rule id="114173" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration-->
        <!--Date: 2021/07/20-->
        <!--Status: experimental-->
        <!--ID: 71ff406e-b633-4989-96ec-bc49d825a412-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Compress\-Archive\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-DestinationPath\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\$env:TEMP\\</field>
    </rule>
    <rule id="114174" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_susp_get_nettcpconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: b366adb4-d63d-422d-8a2c-186463b5ded0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Use Get-NetTCPConnection</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Get\-NetTCPConnection</field>
    </rule>
    <rule id="114175" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_xor_commandline.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Harish Segar (rule)-->
        <!--Description: Detects suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.-->
        <!--Date: 2020/06/29-->
        <!--Status: experimental-->
        <!--ID: 812837bb-b17f-45e9-8bd0-0ec35d2e3bd6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious XOR Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)ConsoleHost</field>
        <field name="full_log" negate="no" type="pcre2">(?i)bxor|join|char</field>
    </rule>
    <rule id="114176" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_wsman_com_provider_no_powershell.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.-->
        <!--Date: 2020/06/24-->
        <!--Status: experimental-->
        <!--ID: df9a0e0e-fedb-4d6c-8668-d765dfc92aa7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>Suspicious Non PowerShell WSMAN COM Provider</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)WSMan</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="114177" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_exe_calling_ps.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (rule)-->
        <!--Description: Detects PowerShell called from an executable by the version mismatch method-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: c70e019b-1479-4b65-b0cc-cd0c6093a599-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Called from an Executable Version Mismatch</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.engineVersion" negate="no" type="pcre2">(?i)^(?:2\.|4\.|5\.)</field>
        <field name="win.eventdata.hostVersion" negate="no" type="pcre2">(?i)^(?:3\.)</field>
    </rule>
    <rule id="114178" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_suspicious_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell download command-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: 3236fcd0-b7e3-4433-b4f8-86ad61a9af2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.DownloadFile\(</field>
    </rule>
    <rule id="114179" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_suspicious_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell download command-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: 3236fcd0-b7e3-4433-b4f8-86ad61a9af2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.DownloadString\(</field>
    </rule>
    <rule id="114180" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_remote_powershell_session.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell sessions-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 60167e5c-84b2-4c95-a7ac-86281f27c445-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)ServerRemoteHost</field>
        <field name="full_log" negate="no" type="pcre2">(?i)wsmprovhost\.exe</field>
    </rule>
    <rule id="114181" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_dnsexfiltration.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel-->
        <!--Date: 2022/01/07-->
        <!--Status: experimental-->
        <!--ID: d59d7842-9a21-4bc6-ba98-64bfe0091355-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Powershell DNSExfiltration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-DNSExfiltrator</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-i\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-d\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-doh\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-t\ )</field>
    </rule>
    <rule id="114182" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_remove_item_path.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Powershell Remove-Item  with -Path to delete a file or a folder with "-Recurse"-->
        <!--Date: 2022/01/15-->
        <!--Status: experimental-->
        <!--ID: b8af5f36-1361-4ebe-9e76-e36128d947bf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Use Remove-Item to Delete File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)HKCU:\\|HKLM:\\</field>
    </rule>
    <rule id="114183" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_localuser.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may manipulate accounts to maintain access to victim systems.
Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups
-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: 4fdc44df-bfe9-4fcc-b041-68f5a2d3031c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Powershell LocalAccount Manipulation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Disable\-LocalUser|Enable\-LocalUser|Get\-LocalUser|Set\-LocalUser|New\-LocalUser|Rename\-LocalUser|Remove\-LocalUser</field>
    </rule>
    <rule id="114184" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: e54f5149-6ba3-49cf-b153-070d24679126-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\\"\s+?\-f.*&amp;&amp;.*cmd.*\/c</field>
    </rule>
    <rule id="114185" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_upload.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of various web request POST or PUT methods (including aliases) via Windows PowerShell command-->
        <!--Date: 2022/01/07-->
        <!--Status: experimental-->
        <!--ID: d2e3f2f6-7e09-4bf2-bc5d-90186809e7fb-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1020</id>
        </mitre>
        <description>Windows PowerShell Upload Web Request</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Invoke\-WebRequest|iwr\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Method\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ Put\ |\ Post\ )</field>
    </rule>
    <rule id="114186" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_detect_vm_env.yml</info>
        <!--Sigma Rule Author: frack113, Duc.Le-GTSC-->
        <!--Description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox-->
        <!--Date: 2021/08/03-->
        <!--Status: experimental-->
        <!--ID: d93129cd-1ee0-479f-bc03-ca6f129882e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1497.001</id>
        </mitre>
        <description>Powershell Detect Virtualization Environment</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WmiObject|gwmi</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)MSAcpi_ThermalZoneTemperature|Win32_ComputerSystem</field>
    </rule>
    <rule id="114187" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_mail_acces.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user&#8217;s local system, such as Outlook storage or cache files.-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: 2837e152-93c8-43d2-85ba-c3cd3c2ae614-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1114.001</id>
        </mitre>
        <description>Powershell Local Email Collection</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Inbox\.ps1|Microsoft\.Office\.Interop\.Outlook|Microsoft\.Office\.Interop\.Outlook\.olDefaultFolders|\-comobject\ outlook\.application</field>
    </rule>
    <rule id="114188" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_win32_shadowcopy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: e17121b4-ef2a-4418-8a59-12fb1631fa9e-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Delete Volume Shadow Copies via WMI with PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WmiObject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_Shadowcopy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Delete\(\)</field>
    </rule>
    <rule id="114189" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_iofilestream.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Open a handle on the drive volume via the \\.\ DOS device path specifier and perform direct access read of the first few bytes of the volume.-->
        <!--Date: 2022/01/09-->
        <!--Status: experimental-->
        <!--ID: 70ad982f-67c8-40e0-a955-b920c2fa05cb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Suspicious IO.FileStream</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)IO\.FileStream</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\\\\\\\\.\\\\</field>
    </rule>
    <rule id="114190" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_remove_adgroupmember.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.
Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.
-->
        <!--Date: 2021/12/26-->
        <!--Status: experimental-->
        <!--ID: 48a45d45-8112-416b-8a67-46e03a4b2107-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1531</id>
        </mitre>
        <description>Remove Account From Domain Admin Group</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-ADGroupMember</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Identity\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Members\ )</field>
    </rule>
    <rule id="114191" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_powerview_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects Commandlet names from PowerView of PowerSploit exploitation framework.-->
        <!--Date: 2021/05/18-->
        <!--Status: experimental-->
        <!--ID: dcd74b95-3f36-4ed9-9598-0490951643aa-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerView PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Export\-PowerViewCSV|Get\-IPAddress|Resolve\-IPAddress|Convert\-NameToSid|ConvertTo\-SID|Convert\-ADName|ConvertFrom\-UACValue|Add\-RemoteConnection|Remove\-RemoteConnection|Invoke\-UserImpersonation|Invoke\-RevertToSelf|Request\-SPNTicket|Get\-DomainSPNTicket|Invoke\-Kerberoast|Get\-PathAcl|Get\-DNSZone|Get\-DomainDNSZone|Get\-DNSRecord|Get\-DomainDNSRecord|Get\-NetDomain|Get\-Domain|Get\-NetDomainController|Get\-DomainController|Get\-NetForest|Get\-Forest|Get\-NetForestDomain|Get\-ForestDomain|Get\-NetForestCatalog|Get\-ForestGlobalCatalog|Find\-DomainObjectPropertyOutlier|Get\-NetUser|Get\-DomainUser|New\-DomainUser|Set\-DomainUserPassword|Get\-UserEvent|Get\-DomainUserEvent|Get\-NetComputer|Get\-DomainComputer|Get\-ADObject|Get\-DomainObject|Set\-ADObject|Set\-DomainObject|Get\-ObjectAcl|Get\-DomainObjectAcl|Add\-ObjectAcl|Add\-DomainObjectAcl|Invoke\-ACLScanner|Find\-InterestingDomainAcl|Get\-NetOU|Get\-DomainOU|Get\-NetSite|Get\-DomainSite|Get\-NetSubnet|Get\-DomainSubnet|Get\-DomainSID|Get\-NetGroup|Get\-DomainGroup|New\-DomainGroup|Find\-ManagedSecurityGroups|Get\-DomainManagedSecurityGroup|Get\-NetGroupMember|Get\-DomainGroupMember|Add\-DomainGroupMember|Get\-NetFileServer|Get\-DomainFileServer|Get\-DFSshare|Get\-DomainDFSShare|Get\-NetGPO|Get\-DomainGPO|Get\-NetGPOGroup|Get\-DomainGPOLocalGroup|Find\-GPOLocation|Get\-DomainGPOUserLocalGroupMapping|Find\-GPOComputerAdmin|Get\-DomainGPOComputerLocalGroupMapping|Get\-DomainPolicy|Get\-NetLocalGroup|Get\-NetLocalGroupMember|Get\-NetShare|Get\-NetLoggedon|Get\-NetSession|Get\-LoggedOnLocal|Get\-RegLoggedOn|Get\-NetRDPSession|Invoke\-CheckLocalAdminAccess|Test\-AdminAccess|Get\-SiteName|Get\-NetComputerSiteName|Get\-Proxy|Get\-WMIRegProxy|Get\-LastLoggedOn|Get\-WMIRegLastLoggedOn|Get\-CachedRDPConnection|Get\-WMIRegCachedRDPConnection|Get\-RegistryMountedDrive|Get\-WMIRegMountedDrive|Get\-NetProcess|Get\-WMIProcess|Find\-InterestingFile|Invoke\-UserHunter|Find\-DomainUserLocation|Invoke\-ProcessHunter|Find\-DomainProcess|Invoke\-EventHunter|Find\-DomainUserEvent|Invoke\-ShareFinder|Find\-DomainShare|Invoke\-FileFinder|Find\-InterestingDomainShareFile|Find\-LocalAdminAccess|Invoke\-EnumerateLocalAdmin|Find\-DomainLocalGroupMember|Get\-NetDomainTrust|Get\-DomainTrust|Get\-NetForestTrust|Get\-ForestTrust|Find\-ForeignUser|Get\-DomainForeignUser|Find\-ForeignGroup|Get\-DomainForeignGroupMember|Invoke\-MapDomainTrust|Get\-DomainTrustMapping</field>
    </rule>
    <rule id="114192" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_nightmare.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects Commandlet name for PrintNightmare exploitation.-->
        <!--Date: 2021/08/09-->
        <!--Status: test-->
        <!--ID: 6d3f1399-a81c-4409-aff3-1ecfe9330baf-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>PrintNightmare Powershell Exploitation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-Nightmare</field>
    </rule>
    <rule id="114193" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_capture_screenshots.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.
Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations
-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: d4a11f63-2390-411c-9adf-d791fd152830-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1113</id>
        </mitre>
        <description>Windows Screen Capture with CopyFromScreen</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.CopyFromScreen</field>
    </rule>
    <rule id="114194" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clearing_windows_console_history.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.-->
        <!--Date: 2021/11/25-->
        <!--Status: experimental-->
        <!--ID: bde47d4b-9987-405c-94c7-b080410e8ea7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clearing Windows Console History</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Clear\-History</field>
    </rule>
    <rule id="114195" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clearing_windows_console_history.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.-->
        <!--Date: 2021/11/25-->
        <!--Status: experimental-->
        <!--ID: bde47d4b-9987-405c-94c7-b080410e8ea7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clearing Windows Console History</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-Item|rm</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ConsoleHost_history\.txt|\(Get\-PSReadlineOption\)\.HistorySavePath</field>
    </rule>
    <rule id="114196" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_malicious_keywords.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (rule)-->
        <!--Description: Detects keywords from well-known PowerShell exploitation frameworks-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: f62176f3-8128-4faa-bf6c-83261322e5eb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Keywords</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AdjustTokenPrivileges|IMAGE_NT_OPTIONAL_HDR64_MAGIC|Microsoft\.Win32\.UnsafeNativeMethods|ReadProcessMemory\.Invoke|SE_PRIVILEGE_ENABLED|LSA_UNICODE_STRING|MiniDumpWriteDump|PAGE_EXECUTE_READ|SECURITY_DELEGATION|TOKEN_ADJUST_PRIVILEGES|TOKEN_ALL_ACCESS|TOKEN_ASSIGN_PRIMARY|TOKEN_DUPLICATE|TOKEN_ELEVATION|TOKEN_IMPERSONATE|TOKEN_INFORMATION_CLASS|TOKEN_PRIVILEGES|TOKEN_QUERY|Metasploit|Mimikatz</field>
    </rule>
    <rule id="114197" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_psattack.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (rule)-->
        <!--Description: Detects the use of PSAttack PowerShell hack tool-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell PSAttack</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PS\ ATTACK!!!</field>
    </rule>
    <rule id="114198" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_networkcredential.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.
Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism
-->
        <!--Date: 2021/12/27-->
        <!--Status: experimental-->
        <!--ID: 1883444f-084b-419b-ac62-e0d0c5b3693f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>Suspicious Connection to Remote Account</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.Protocols\.LdapDirectoryIdentifier|System\.Net\.NetworkCredential|System\.DirectoryServices\.Protocols\.LdapConnection</field>
    </rule>
    <rule id="114199" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_run_from_mount_diskimage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.-->
        <!--Date: 2022/02/01-->
        <!--Status: experimental-->
        <!--ID: 902cedee-0398-4e3a-8183-6f3a89773a96-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Invoke-Item From Mount-DiskImage</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Mount\-DiskImage\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ImagePath\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Volume</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.DriveLetter</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:invoke\-item\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\):\\</field>
    </rule>
    <rule id="114200" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_send_mailmessage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.
The data may also be sent to an alternate network location from the main command and control server.
-->
        <!--Date: 2022/01/07-->
        <!--Status: experimental-->
        <!--ID: 9a7afa56-4762-43eb-807d-c3dc9ffe211b-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>Powershell Exfiltration Over SMTP</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Send\-MailMessage</field>
    </rule>
    <rule id="114201" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_wmimplant.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects parameters used by WMImplant-->
        <!--Date: 2020/03/26-->
        <!--Status: experimental-->
        <!--ID: 8028c2c3-e25a-46e3-827f-bbb5abf181d7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>WMImplant Hack Tool</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:WMImplant|\ change_user\ |\ gen_cli\ |\ command_exec\ |\ disable_wdigest\ |\ disable_winrm\ |\ enable_wdigest\ |\ enable_winrm\ |\ registry_mod\ |\ remote_posh\ |\ sched_job\ |\ service_mod\ |\ process_kill\ |\ active_users\ |\ basic_info\ |\ power_off\ |\ vacant_system\ |\ logon_events\ )</field>
    </rule>
    <rule id="114202" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\${?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="114203" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_adcomputer.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: utilize Get-AdComputer to enumerate Computers within Active Directory.-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: 36bed6b2-e9a0-4fff-beeb-413a92b86138-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>Suspicious Enumerate Active Directory Computers with Get-AdComputer</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-AdComputer\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Filter</field>
    </rule>
    <rule id="114204" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (rule), Bartlomiej Czyz @bczyz1 (update), oscd.community (update)-->
        <!--Description: Detects Commandlet names from well-known PowerShell exploitation frameworks-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-DllInjection|Invoke\-Shellcode|Invoke\-WmiCommand|Get\-GPPPassword|Get\-Keystrokes|Get\-TimedScreenshot|Get\-VaultCredential|Invoke\-CredentialInjection|Invoke\-Mimikatz|Invoke\-NinjaCopy|Invoke\-TokenManipulation|Out\-Minidump|VolumeShadowCopyTools|Invoke\-ReflectivePEInjection|Invoke\-UserHunter|Find\-GPOLocation|Invoke\-ACLScanner|Invoke\-DowngradeAccount|Get\-ServiceUnquoted|Get\-ServiceFilePermission|Get\-ServicePermission|Invoke\-ServiceAbuse|Install\-ServiceBinary|Get\-RegAutoLogon|Get\-VulnAutoRun|Get\-VulnSchTask|Get\-UnattendedInstallFile|Get\-ApplicationHost|Get\-RegAlwaysInstallElevated|Get\-Unconstrained|Add\-RegBackdoor|Add\-ScrnSaveBackdoor|Gupt\-Backdoor|Invoke\-ADSBackdoor|Enabled\-DuplicateToken|Invoke\-PsUaCme|Remove\-Update|Check\-VM|Get\-LSASecret|Get\-PassHashes|Show\-TargetScreen|Port\-Scan|Invoke\-PoshRatHttp|Invoke\-PowerShellTCP|Invoke\-PowerShellWMI|Add\-Exfiltration|Add\-Persistence|Do\-Exfiltration|Start\-CaptureServer|Get\-ChromeDump|Get\-ClipboardContents|Get\-FoxDump|Get\-IndexedItem|Get\-Screenshot|Invoke\-Inveigh|Invoke\-NetRipper|Invoke\-EgressCheck|Invoke\-PostExfil|Invoke\-PSInject|Invoke\-RunAs|MailRaider|New\-HoneyHash|Set\-MacAttribute|Invoke\-DCSync|Invoke\-PowerDump|Exploit\-Jboss|Invoke\-ThunderStruck|Invoke\-VoiceTroll|Set\-Wallpaper|Invoke\-InveighRelay|Invoke\-PsExec|Invoke\-SSHCommand|Get\-SecurityPackages|Install\-SSP|Invoke\-BackdoorLNK|PowerBreach|Get\-SiteListPassword|Get\-System|Invoke\-BypassUAC|Invoke\-Tater|Invoke\-WScriptBypassUAC|PowerUp|PowerView|Get\-RickAstley|Find\-Fruit|HTTP\-Login|Find\-TrustedDocuments|Invoke\-Paranoia|Invoke\-WinEnum|Invoke\-ARPScan|Invoke\-PortScan|Invoke\-ReverseDNSLookup|Invoke\-SMBScanner|Invoke\-Mimikittenz|Invoke\-AllChecks</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)Get\-SystemDriveInfo|C:\\ProgramData\\Amazon\\EC2\-Windows\\Launch\\Module\\Scripts\\Set\-Wallpaper\.ps1</field>
    </rule>
    <rule id="114205" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_adrecon_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7-->
        <!--Date: 2021/07/16-->
        <!--Status: experimental-->
        <!--ID: bf72941a-cba0-41ea-b18c-9aca3925690d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell ADRecon Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Function\ Get\-ADRExcelComOb|ADRecon\-Report\.xlsx</field>
    </rule>
    <rule id="114206" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_adreplaccount.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.-->
        <!--Date: 2022/02/06-->
        <!--Status: experimental-->
        <!--ID: 060c3ef1-fd0a-4091-bf46-e7d625f60b73-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Suspicious Get-ADReplAccount</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ADReplAccount</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-All\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Server\ )</field>
    </rule>
    <rule id="114207" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_automated_collection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: c1dda054-d638-4c16-afc8-53e007f3fbc5-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
        </mitre>
        <description>Automated Collection Command PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.doc|\.docx|\.xls|\.xlsx|\.ppt|\.pptx|\.rtf|\.pdf|\.txt</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ChildItem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Recurse\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Include\ )</field>
    </rule>
    <rule id="114208" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_gwmi.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers-->
        <!--Date: 2022/01/12-->
        <!--Status: experimental-->
        <!--ID: 0332a266-b584-47b4-933d-a00b103e1b37-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Suspicious Get-WmiObject</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WmiObject|gwmi</field>
    </rule>
    <rule id="114209" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_web_request.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573-->
        <!--Description: Detects the use of various web request methods (including aliases) via Windows PowerShell command-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: 1139d2e2-84b1-4226-b445-354492eba8ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Windows PowerShell Web Request</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |Net\.WebClient|Start\-BitsTransfer</field>
    </rule>
    <rule id="114210" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_ssl_keyword.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: 195626f3-5f1b-4403-93b7-e6cfd4d6a078-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1573</id>
        </mitre>
        <description>Suspicious SSL Connection</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.Security\.SslStream</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Net\.Security\.RemoteCertificateValidationCallback</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.AuthenticateAsClient</field>
    </rule>
    <rule id="114211" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_data_compressed.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.-->
        <!--Date: 2019/10/21-->
        <!--Status: experimental-->
        <!--ID: 6dc5d284-69ea-42cf-9311-fb1c3932a69a-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1560</id>
        </mitre>
        <description>Data Compressed - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Recurse</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\|</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Compress\-Archive</field>
    </rule>
    <rule id="114212" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_request_kerberos_ticket.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.
This behavior is typically used during a kerberos or silver ticket attack.
A successful execution will output the SPNs for the endpoint in question.
-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: a861d835-af37-4930-bcd6-5b178bfb54df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Request A Single Ticket via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.IdentityModel\.Tokens\.KerberosRequestorSecurityToken</field>
    </rule>
    <rule id="114213" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_shellcode_b64.yml</info>
        <!--Sigma Rule Author: David Ledbetter (shellcode), Florian Roth (rule)-->
        <!--Description: Detects Base64 encoded Shellcode-->
        <!--Date: 2018/11/17-->
        <!--Status: experimental-->
        <!--ID: 16b37b70-6fcf-4814-a092-c36bd3aafcbd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell ShellCode</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AAAAYInlM</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)OiCAAAAYInlM|OiJAAAAYInlM</field>
    </rule>
    <rule id="114214" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell download command-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: 403c2cc0-7f6b-4925-9423-bfa573bed7eb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.DownloadFile\(|\.DownloadString\(</field>
    </rule>
    <rule id="114215" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_prompt_credentials.yml</info>
        <!--Sigma Rule Author: John Lambert (idea), Florian Roth (rule)-->
        <!--Description: Detects PowerShell calling a credential prompt-->
        <!--Date: 2017/04/09-->
        <!--Status: experimental-->
        <!--ID: ca8b77a9-d499-4095-b793-5d5f330d450e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Credential Prompt</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PromptForCredential</field>
    </rule>
    <rule id="114216" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_rundll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: e6cb92b4-b470-4eb8-8a9d-d63e8583aae0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="114217" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_win32_pnpentity.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: b26647de-4feb-4283-af6b-6117661283c5-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1120</id>
        </mitre>
        <description>Powershell Suspicious Win32_PnPEntity</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_PnPEntity</field>
    </rule>
    <rule id="114218" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_shellintel_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Max Altgelt, Tobias Michalski-->
        <!--Description: Detects Commandlet names from ShellIntel exploitation scripts.-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 402e1e1d-ad59-47b6-bf80-1ee44985b3a7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious ShellIntel PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-SMBAutoBrute|Invoke\-GPOLinks|Out\-Minidump|Invoke\-Potato</field>
    </rule>
    <rule id="114219" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_obfuscated_iex.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014-->
        <!--Date: 2019/11/08-->
        <!--Status: experimental-->
        <!--ID: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
    </rule>
    <rule id="114220" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_software_discovery.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.-->
        <!--Date: 2020/10/16-->
        <!--Status: experimental-->
        <!--ID: 2650dd1a-eb2a-412d-ac36-83f06c4f2282-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518</id>
        </mitre>
        <description>Detected Windows Software Discovery</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-itemProperty</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\software\\</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)select\-object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)format\-table</field>
    </rule>
    <rule id="114221" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cl_invocation_lolscript.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Execution via SyncInvoke in CL_Invocation.ps1 module-->
        <!--Date: 2020/10/14-->
        <!--Status: experimental-->
        <!--ID: 4cd29327-685a-460e-9dac-c3ab96e549dc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execution via CL_Invocation.ps1</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CL_Invocation\.ps1</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SyncInvoke</field>
    </rule>
    <rule id="114222" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: experimental-->
        <!--ID: e55a5195-4724-480e-a77e-3ebe64bd3759-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="114223" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_windowstyle.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden-->
        <!--Date: 2021/10/20-->
        <!--Status: experimental-->
        <!--ID: 313fbb0a-a341-4682-848d-6d6f8c4fab7c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>Suspicious PowerShell WindowStyle Option</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WindowStyle</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Hidden</field>
    </rule>
    <rule id="114224" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_enable_psremoting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/07-->
        <!--Status: experimental-->
        <!--ID: 991a9744-f2f0-44f2-bd33-9092eba17dc3-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Enable Windows Remote Management</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Enable\-PSRemoting\ )</field>
    </rule>
    <rule id="114225" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_mount_diskimage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.-->
        <!--Date: 2022/02/01-->
        <!--Status: experimental-->
        <!--ID: 29e1c216-6408-489d-8a06-ee9d151ef819-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Mount-DiskImage</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Mount\-DiskImage\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ImagePath\ )</field>
    </rule>
    <rule id="114226" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_msxml_com.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse PowerShell commands and scripts for execution.
PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)
Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code
-->
        <!--Date: 2022/01/19-->
        <!--Status: experimental-->
        <!--ID: 78aa1347-1517-4454-9982-b338d6df8343-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Powershell MsXml COM Object</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-ComObject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)MsXml2\.ServerXmlHttp</field>
    </rule>
    <rule id="114227" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: 73e67340-0d25-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+clip(?:\.exe)?.{0,4}&amp;&amp;.+clipboard]::\(\s\\\"\{\d\}.+\-f.+\"</field>
    </rule>
    <rule id="114228" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_store_file_in_alternate_data_stream.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.-->
        <!--Date: 2021/09/02-->
        <!--Status: experimental-->
        <!--ID: a699b30e-d010-46c8-bbd1-ee2e26765fe9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Powershell Store File In Alternate Data Stream</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-FilePath\ "\$env:comspec"\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ArgumentList\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)&gt;</field>
    </rule>
    <rule id="114229" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_test_netconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may communicate using a protocol and port paring that are typically not associated.
For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.
-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: adf876b3-f1f8-4aa9-a4e4-a64106feec06-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1571</id>
        </mitre>
        <description>Testing Usage of Uncommonly Used Port</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Test\-NetConnection</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComputerName\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-port\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)(?:\ 443\ |\ 80\ )</field>
    </rule>
    <rule id="114230" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_directory_enum.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects technique used by MAZE ransomware to enumerate directories using Powershell-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: 162e69a7-7981-4344-84a9-0f1c9a217a52-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
        </mitre>
        <description>Powershell Directory Enumeration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)foreach</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ChildItem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ErrorAction\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SilentlyContinue</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Out\-File\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-append</field>
    </rule>
    <rule id="114231" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: db92dd33-a3ad-49cf-8c2c-608c3e30ace0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).*</field>
    </rule>
    <rule id="114232" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_create_volume_shadow_copy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information-->
        <!--Date: 2022/01/12-->
        <!--Status: experimental-->
        <!--ID: afd12fed-b0ec-45c9-a13d-aa86625dac81-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Create Volume Shadow Copy with Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)win32_shadowcopy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\)\.Create\(</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ClientAccessible</field>
    </rule>
    <rule id="114233" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 0adfbc14-0ed1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"</field>
    </rule>
    <rule id="114234" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_start_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Powershell use PassThru option to start in background-->
        <!--Date: 2022/01/15-->
        <!--Status: experimental-->
        <!--ID: 0718cd72-f316-4aa2-988f-838ea8533277-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Start-Process PassThru</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-PassThru\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-FilePath\ )</field>
    </rule>
    <rule id="114235" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_rundll32.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2019/10/08-->
        <!--Status: experimental-->
        <!--ID: a5a30a6e-75ca-4233-8b8c-42e0f2037d3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="114236" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_keylogging.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may log user keystrokes to intercept credentials as the user types them.-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: 34f90d3c-c297-49e9-b26d-911b05a4866c-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1056.001</id>
        </mitre>
        <description>Powershell Keylogging</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Keystrokes</field>
    </rule>
    <rule id="114237" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_keylogging.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may log user keystrokes to intercept credentials as the user types them.-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: 34f90d3c-c297-49e9-b26d-911b05a4866c-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1056.001</id>
        </mitre>
        <description>Powershell Keylogging</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ProcAddress\ user32\.dll\ GetAsyncKeyState</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ProcAddress\ user32\.dll\ GetForegroundWindow</field>
    </rule>
    <rule id="114238" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_unblock_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.-->
        <!--Date: 2022/02/01-->
        <!--Status: experimental-->
        <!--ID: 5947497f-1aa4-41dd-9693-c9848d58727d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Unblock-File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Unblock\-File\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
    </rule>
    <rule id="114239" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_access_to_chrome_login_data.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.
Web browsers typically store the credentials in an encrypted format within a credential store.
-->
        <!--Date: 2021/12/20-->
        <!--Status: deprecated-->
        <!--ID: 98f4c75c-3089-44f3-b733-b327b9cd9c9d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.003</id>
        </mitre>
        <description>Accessing Encrypted Credentials from Google Chrome Login Database</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Copy\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Destination</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\Google\\Chrome\\User\ Data\\Default\\Login\ Data|\\Google\\Chrome\\User\ Data\\Default\\Login\ Data\ For\ Account</field>
    </rule>
    <rule id="114240" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Get the processes that are running on the local computer.-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: af4c87ce-bdda-4215-b998-15220772e993-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Suspicious Process Discovery With Get-Process</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Process</field>
    </rule>
    <rule id="114241" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_trigger_profiles.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles.-->
        <!--Date: 2021/08/18-->
        <!--Status: experimental-->
        <!--ID: 05b3e303-faf0-4f4a-9b30-46cc13e69152-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.013</id>
        </mitre>
        <description>Powershell Trigger Profiles by Add_Content</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-Content</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$profile</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Value</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process|""</field>
    </rule>
    <rule id="114242" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_getprocess_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity-->
        <!--Date: 2021/04/23-->
        <!--Status: experimental-->
        <!--ID: 84c174ab-d3ef-481f-9c86-a50d0b8e3edb-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>PowerShell Get-Process LSASS in ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Process\ lsass</field>
    </rule>
    <rule id="114243" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_keywords.yml</info>
        <!--Sigma Rule Author: Florian Roth, Perez Diego (@darkquassar)-->
        <!--Description: Detects keywords that could indicate the use of some PowerShell exploitation framework-->
        <!--Date: 2019/02/11-->
        <!--Status: experimental-->
        <!--ID: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Keywords</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Reflection\.Assembly\.Load\(\$|\[System\.Reflection\.Assembly\]::Load\(\$|\[Reflection\.Assembly\]::Load\(\$|System\.Reflection\.AssemblyName|Reflection\.Emit\.AssemblyBuilderAccess|Runtime\.InteropServices\.DllImportAttribute|SuspendThread|rundll32|Invoke\-WMIMethod|http://127\.0\.0\.1</field>
    </rule>
    <rule id="114244" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_remote_session_creation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse PowerShell commands and scripts for execution.
PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system
-->
        <!--Date: 2022/01/06-->
        <!--Status: experimental-->
        <!--ID: a0edd39f-a0c6-4c17-8141-261f958e8d8f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Remote Session Creation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-PSSession</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComputerName\ )</field>
    </rule>
    <rule id="114245" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_childitem_bookmarks.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.
Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about
internal network resources such as servers, tools/dashboards, or other related infrastructure.
-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: e0565f5d-d420-4e02-8a68-ac00d864f9cf-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1217</id>
        </mitre>
        <description>Automated Collection Bookmarks Using Get-ChildItem PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ChildItem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Recurse\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Filter\ Bookmarks</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-ErrorAction\ SilentlyContinue</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Force</field>
    </rule>
    <rule id="114246" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_file_and_directory_discovery.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.
Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors,
including whether or not the adversary fully infects the target and/or attempts specific actions.
-->
        <!--Date: 2021/12/15-->
        <!--Status: experimental-->
        <!--ID: d23f2ba5-9da0-4463-8908-8ee47f614bb9-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
        </mitre>
        <description>Powershell File and Directory Discovery</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ls|get\-childitem|gci</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-recurse</field>
    </rule>
    <rule id="114247" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_winlogon_helper_dll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software[Wow6432Node]Microsoft\Windows NT\CurrentVersion\Winlogon\ and HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\ are used to manage additional helper programs and functionalities that support Winlogon. Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables.-->
        <!--Date: 2019/10/21-->
        <!--Status: experimental-->
        <!--ID: 851c506b-6b7c-4ce2-8802-c703009d03c0-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.004</id>
        </mitre>
        <description>Winlogon Helper DLL</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CurrentVersion\\Winlogon</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-ItemProperty|New\-Item</field>
    </rule>
    <rule id="114248" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_directorysearcher.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Enumerates Active Directory to determine computers that are joined to the domain-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: 1f6399cf-2c80-4924-ace1-6fcff3393480-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>DirectorySearcher Powershell Exploitation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-Object\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.DirectorySearcher</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.PropertiesToLoad\.Add</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.findall\(\)</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Properties\.name</field>
    </rule>
    <rule id="114249" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_office_comobject_registerxll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.
Office add-ins can be used to add functionality to Office programs
-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: 36fbec91-fa1b-4d5d-8df1-8d8edcb632ad-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Code Executed Via Office Add-in XLL File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:new\-object\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComObject\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.application</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.RegisterXLL</field>
    </rule>
    <rule id="114250" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_set_policies_to_unsecure_level.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects use of Set-ExecutionPolicy to set a unsecure policies-->
        <!--Date: 2021/10/20-->
        <!--Status: experimental-->
        <!--ID: 61d0475c-173f-4844-86f7-f3eebae1c66b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Change PowerShell Policies to an Unsecure Level</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-ExecutionPolicy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Unrestricted|bypass|RemoteSigned</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\ProgramData\\chocolatey\\choco\.exe</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://community\.chocolatey\.org/install\.ps1'\)|\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://chocolatey\.org/install\.ps1'\)</field>
    </rule>
    <rule id="114251" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: 20e5497e-331c-4cd5-8d36-935f6e2a9a07-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:readtoend)$</field>
    </rule>
    <rule id="114252" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_directoryservices_accountmanagement.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may create a domain account to maintain access to victim systems.
Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain..
-->
        <!--Date: 2021/12/28-->
        <!--Status: experimental-->
        <!--ID: b29a93fb-087c-4b5b-a84d-ee3309e69d08-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.002</id>
        </mitre>
        <description>Manipulation of User Computer or Group Security Principals Across AD</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.AccountManagement</field>
    </rule>
    <rule id="114253" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_syncappvpublishingserver_exe.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, OSCD Community-->
        <!--Description: Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.-->
        <!--Date: 2020/10/05-->
        <!--Status: experimental-->
        <!--ID: dddfebae-c46f-439c-af7a-fdb6bde90218-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>SyncAppvPublishingServer Execution to Bypass Powershell Restriction</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SyncAppvPublishingServer\.exe</field>
    </rule>
    <rule id="114254" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cl_mutexverifiers_lolscript.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1 module-->
        <!--Date: 2020/10/14-->
        <!--Status: experimental-->
        <!--ID: 39776c99-1c7b-4ba0-b5aa-641525eee1a4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execution via CL_Mutexverifiers.ps1</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CL_Mutexverifiers\.ps1</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)runAfterCancelProcess</field>
    </rule>
    <rule id="114255" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_recon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data-->
        <!--Date: 2021/07/30-->
        <!--Status: experimental-->
        <!--ID: a9723fcc-881c-424c-8709-fd61442ab3c3-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
        </mitre>
        <description>Recon Information for Export with PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-Service\ |Get\-ChildItem\ |Get\-Process\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)&gt;\ \$env:TEMP\\</field>
    </rule>
    <rule id="114256" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_timestomp.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.-->
        <!--Date: 2021/08/03-->
        <!--Status: experimental-->
        <!--ID: c6438007-e081-42ce-9483-b067fbef33c3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.006</id>
        </mitre>
        <description>Powershell Timestomp</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.CreationTime\ =|\.LastWriteTime\ =|\.LastAccessTime\ =|\[IO\.File\]::SetCreationTime|\[IO\.File\]::SetLastAccessTime|\[IO\.File\]::SetLastWriteTime</field>
    </rule>
    <rule id="114257" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_execute_batch_script.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse the Windows command shell for execution.
The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.
The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.
Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.
Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system
-->
        <!--Date: 2022/01/02-->
        <!--Status: experimental-->
        <!--ID: b5522a23-82da-44e5-9c8b-e10ed8955f88-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Powershell Execute Batch Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.cmd|\.bat</field>
    </rule>
    <rule id="114258" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_access_to_browser_login_data.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.
Web browsers typically store the credentials in an encrypted format within a credential store.
-->
        <!--Date: 2022/01/30-->
        <!--Status: experimental-->
        <!--ID: fc028194-969d-4122-8abe-0470d5b8f12f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.003</id>
        </mitre>
        <description>Access to Browser Login Data</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Copy\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Destination</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\Opera\ Software\\Opera\ Stable\\Login\ Data|\\Mozilla\\Firefox\\Profiles|\\Microsoft\\Edge\\User\ Data\\Default|\\Google\\Chrome\\User\ Data\\Default\\Login\ Data|\\Google\\Chrome\\User\ Data\\Default\\Login\ Data\ For\ Account</field>
    </rule>
    <rule id="114259" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_icmp_exfiltration.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz @bczyz1, oscd.community-->
        <!--Description: Detects Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.-->
        <!--Date: 2020/10/10-->
        <!--Status: experimental-->
        <!--ID: 4c4af3cd-2115-479c-8193-6b8bfce9001c-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>PowerShell ICMP Exfiltration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.NetworkInformation\.Ping</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Send\(</field>
    </rule>
    <rule id="114260" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_windows_firewall_profile_disabled.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects when a user disables the Windows Firewall via a Profile to help evade defense.-->
        <!--Date: 2021/10/12-->
        <!--Status: experimental-->
        <!--ID: 488b44e7-3781-4a71-888d-c95abfacf44d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Windows Firewall Profile Disabled</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-NetFirewallProfile</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Profile</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Enabled</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)False</field>
    </rule>
    <rule id="114261" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_xml_iex.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse PowerShell commands and scripts for execution.
PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)
Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code
-->
        <!--Date: 2022/01/19-->
        <!--Status: experimental-->
        <!--ID: 6c6c6282-7671-4fe9-a0ce-a2dcebdc342b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Powershell XML Execute Command</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Xml\.XmlDocument</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Load</field>
        <field name="full_log" negate="no" type="pcre2">(?i)IEX|Invoke\-Expression</field>
    </rule>
    <rule id="114262" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: experimental-->
        <!--ID: 42821614-9264-4761-acfc-5772c3286f76-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Move\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Cert:\\LocalMachine\\Root</field>
    </rule>
    <rule id="114263" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: experimental-->
        <!--ID: 42821614-9264-4761-acfc-5772c3286f76-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Import\-Certificate</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Cert:\\LocalMachine\\Root</field>
    </rule>
    <rule id="114264" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration-->
        <!--Date: 2021/07/20-->
        <!--Status: experimental-->
        <!--ID: b7a3c9a3-09ea-4934-8864-6a32cacd98d9-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Compress\-Archive\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-DestinationPath\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:TEMP\\</field>
    </rule>
    <rule id="114265" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_enumerate_password_windows_credential_manager.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search for common password storage locations to obtain user credentials.
Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
-->
        <!--Date: 2021/12/20-->
        <!--Status: experimental-->
        <!--ID: 603c6630-5225-49c1-8047-26c964553e0e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
        </mitre>
        <description>Enumerate Credentials from Windows Credential Manager With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)vaultcmd</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)/listcreds:</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Windows\ Credentials|Web\ Credentials</field>
    </rule>
    <rule id="114266" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_acl_service.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: 95afc12e-3cbb-40c3-9340-84a032e596a3-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Service Registry Permissions Weakness Check</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-acl</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\</field>
    </rule>
    <rule id="114267" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_smb_share_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and
to identify potential systems of interest for Lateral Movement.
Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
-->
        <!--Date: 2021/12/15-->
        <!--Status: experimental-->
        <!--ID: 95f0643a-ed40-467c-806b-aac9542ec5ab-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Information for SMB Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-smbshare</field>
    </rule>
    <rule id="114268" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_azurehound_commands.yml</info>
        <!--Sigma Rule Author: Austin Songer (@austinsonger)-->
        <!--Description: Detects the execution of AzureHound in PowerShell, a tool to gather data from Azure for BloodHound-->
        <!--Date: 2021/10/23-->
        <!--Status: experimental-->
        <!--ID: 83083ac6-1816-4e76-97d7-59af9a9ae46e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1087</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.t1069</id>
        </mitre>
        <description>AzureHound PowerShell Commands</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-AzureHound</field>
    </rule>
    <rule id="114269" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_nishang_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Alec Costello-->
        <!--Description: Detects Commandlet names and arguments from the Nishang exploitation framework-->
        <!--Date: 2019/05/16-->
        <!--Status: experimental-->
        <!--ID: f772cee9-b7c2-4cb2-8f07-49870adc02e0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious Nishang PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-ConstrainedDelegationBackdoor|Set\-DCShadowPermissions|DNS_TXT_Pwnage|Execute\-OnTime|HTTP\-Backdoor|Set\-RemotePSRemoting|Set\-RemoteWMI|Invoke\-AmsiBypass|Out\-CHM|Out\-HTA|Out\-SCF|Out\-SCT|Out\-Shortcut|Out\-WebQuery|Out\-Word|Enable\-Duplication|Remove\-Update|Download\-Execute\-PS|Download_Execute|Execute\-Command\-MSSQL|Execute\-DNSTXT\-Code|Out\-RundllCommand|Copy\-VSS|FireBuster|FireListener|Get\-Information|Get\-PassHints|Get\-WLAN\-Keys|Get\-Web\-Credentials|Invoke\-CredentialsPhish|Invoke\-MimikatzWDigestDowngrade|Invoke\-SSIDExfil|Invoke\-SessionGopher|Keylogger|Invoke\-Interceptor|Create\-MultipleSessions|Invoke\-NetworkRelay|Run\-EXEonRemote|Invoke\-Prasadhak|Invoke\-BruteForce|Password\-List|Invoke\-JSRatRegsvr|Invoke\-JSRatRundll|Invoke\-PoshRatHttps|Invoke\-PowerShellIcmp|Invoke\-PowerShellUdp|Invoke\-PSGcat|Invoke\-PsGcatAgent|Remove\-PoshRat|Add\-Persistance|ExetoText|Invoke\-Decode|Invoke\-Encode|Parse_Keys|Remove\-Persistence|StringtoBase64|TexttoExe|Powerpreter|Nishang|DataToEncode|LoggedKeys|OUT\-DNSTXT|ExfilOption|DumpCerts|DumpCreds|Shellcode32|Shellcode64|NotAllNameSpaces|exfill|FakeDC</field>
    </rule>
    <rule id="114270" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_addefaultdomainpasswordpolicy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy is used to get the default password policy for an Active Directory domain.-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: bbb9495b-58fc-4016-b9df-9a3a1b67ca82-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1201</id>
        </mitre>
        <description>Password Policy Discovery With Get-AdDefaultDomainPasswordPolicy</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-AdDefaultDomainPasswordPolicy</field>
    </rule>
    <rule id="114271" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_create_local_user.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects creation of a local user via PowerShell-->
        <!--Date: 2020/04/11-->
        <!--Status: experimental-->
        <!--ID: 243de76f-4725-4f2e-8225-a8a69b15ad61-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>PowerShell Create Local User</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-LocalUser</field>
    </rule>
    <rule id="114272" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cor_profiler.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.
The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).
These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
(Citation: Microsoft Profiling Mar 2017)
(Citation: Microsoft COR_PROFILER Feb 2013)
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: 23590215-4702-4a70-8805-8dc9e58314a2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.012</id>
        </mitre>
        <description>Registry-Free Process Scope COR_PROFILER</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_ENABLE_PROFILING</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_PROFILER</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_PROFILER_PATH</field>
    </rule>
    <rule id="114273" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_security_software_discovery.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment.
This may include things such as firewall rules and anti-viru
-->
        <!--Date: 2021/12/16-->
        <!--Status: experimental-->
        <!--ID: 904e8e61-8edf-4350-b59c-b905fc8e810c-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518.001</id>
        </mitre>
        <description>Security Software Discovery by Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Description</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-like</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)".+virus.+"|".+carbonblack.+"|".+defender.+"|".+cylance.+"</field>
    </rule>
    <rule id="114274" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invoke_webrequest_useragent.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic.
Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
-->
        <!--Date: 2022/01/23-->
        <!--Status: experimental-->
        <!--ID: d4488827-73af-4f8d-9244-7b7662ef046e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Change User Agents with WebRequest</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-WebRequest</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-UserAgent\ )</field>
    </rule>
    <rule id="114275" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_invocation_generic.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/12-->
        <!--Status: experimental-->
        <!--ID: ed965133-513f-41d9-a441-e38076a0798f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Generic</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-enc\ |\ \-EncodedCommand\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-w\ hidden\ |\ \-window\ hidden\ |\ \-windowstyle\ hidden\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-noni\ |\ \-noninteractive\ )</field>
    </rule>
    <rule id="114276" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_new_psdrive.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 1c563233-030e-4a07-af8c-ee0490a66d3a-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Suspicious New-PSDrive to Admin Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-PSDrive</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-psprovider\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)filesystem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-root\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\\\</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="114277" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_adgroup.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of Get-AdGroup to enumerate Groups within Active Directory-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: 8c3a6607-b7dc-4f0d-a646-ef38c00b76ee-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Suspicious Enumerate Active Directory Groups with Get-AdComputer</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-AdGroup\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Filter</field>
    </rule>
    <rule id="114278" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_copy_item_system32.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Uses PowerShell to install a DLL in System32-->
        <!--Date: 2021/12/27-->
        <!--Status: experimental-->
        <!--ID: 63bf8794-9917-45bc-88dd-e1b5abc0ecfd-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1556.002</id>
        </mitre>
        <description>Powershell Install a DLL in System32</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Copy\-Item\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Destination\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\\\Windows\\\\System32</field>
    </rule>
    <rule id="114279" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_wmi_persistence.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.-->
        <!--Date: 2021/08/19-->
        <!--Status: experimental-->
        <!--ID: 9e07f6e7-83aa-45c6-998e-0af26efd0a85-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Powershell WMI Persistence</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-CimInstance\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Namespace\ root/subscription\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ClassName\ __EventFilter\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Property\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-CimInstance\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Namespace\ root/subscription\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ClassName\ CommandLineEventConsumer\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Property\ )</field>
    </rule>
    <rule id="114280" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_command_remote.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/07-->
        <!--Status: experimental-->
        <!--ID: 7b836d7f-179c-4ba4-90a7-a7e60afb48e6-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Execute Invoke-command on Remote Host</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:invoke\-command\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-ComputerName\ )</field>
    </rule>
    <rule id="114281" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_memorydump_getstoragediagnosticinfo.yml</info>
        <!--Sigma Rule Author: Max Altgelt-->
        <!--Description: Detects usage of a PowerShell command to dump the live memory of a Windows machine-->
        <!--Date: 2021/09/21-->
        <!--Status: experimental-->
        <!--ID: cd185561-4760-45d6-a63e-a51325112cae-->
        <mitre>
            <id>attack.t1003</id>
        </mitre>
        <description>Live Memory Dump Using Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-StorageDiagnosticInfo</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-IncludeLiveDump</field>
    </rule>
    <rule id="114282" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_mounted_share_deletion.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation-->
        <!--Date: 2020/10/08-->
        <!--Status: experimental-->
        <!--ID: 66a4d409-451b-4151-94f4-a55d559c49b0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.005</id>
        </mitre>
        <description>PowerShell Deleted Mounted Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-SmbShare|Remove\-FileShare</field>
    </rule>
    <rule id="114283" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_accessing_win_api.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detecting use WinAPI Functions in PowerShell-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 03d83090-8cba-44a0-b02f-0b756a050306-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Accessing WinAPI in PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WaitForSingleObject|QueueUserApc|RtlCreateUserThread|OpenProcess|VirtualAlloc|VirtualFree|WriteProcessMemory|CreateUserThread|CloseHandle|GetDelegateForFunctionPointer|CreateThread|memcpy|LoadLibrary|GetModuleHandle|GetProcAddress|VirtualProtect|FreeLibrary|ReadProcessMemory|CreateRemoteThread|AdjustTokenPrivileges|WriteInt32|OpenThreadToken|PtrToString|FreeHGlobal|ZeroFreeGlobalAllocUnicode|OpenProcessToken|GetTokenInformation|SetThreadToken|ImpersonateLoggedOnUser|RevertToSelf|GetLogonSessionData|CreateProcessWithToken|DuplicateTokenEx|OpenWindowStation|OpenDesktop|MiniDumpWriteDump|AddSecurityPackage|EnumerateSecurityPackages|GetProcessHandle|DangerousGetHandle|kernel32|Advapi32|msvcrt|ntdll|secur32</field>
    </rule>
    <rule id="114284" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_ntfs_ads_access.yml</info>
        <!--Sigma Rule Author: Sami Ruohonen-->
        <!--Description: Detects writing data into NTFS alternate data streams from powershell. Needs Script Block Logging.-->
        <!--Date: 2018/07/24-->
        <!--Status: experimental-->
        <!--ID: 8c521530-5169-495d-a199-0a3a881ad24e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>NTFS Alternate Data Stream</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)set\-content|add\-content</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-stream</field>
    </rule>
    <rule id="114285" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_stdin.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 779c8c12-0eb1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"</field>
    </rule>
    <rule id="114286" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_as_rep_roasting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.-->
        <!--Date: 2022/03/17-->
        <!--Status: experimental-->
        <!--ID: 96c982fe-3d08-4df4-bed2-eb14e02f21c8-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Get-ADUser Enumeration Using UserAccountControl Flags</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ADUser</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Filter</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)useraccountcontrol</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-band</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)4194304</field>
    </rule>
    <rule id="114287" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_tamper_defender.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Attempting to disable scheduled scanning and other parts of windows defender atp.-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: 14c71865-6cd3-44ae-adaa-1db923fae5f2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Start-Process PassThru</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-MpPreference</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ 1</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DisableRealtimeMonitoring|DisableBehaviorMonitoring|DisableScriptScanning|DisableBlockAtFirstSeen|DisableIOAVProtection</field>
    </rule>
    <rule id="114288" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_export_pfxcertificate.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects Commandlet that is used to export certificates from the local certificate store and sometimes used by threat actors to steal private keys from compromised machines-->
        <!--Date: 2021/04/23-->
        <!--Status: experimental-->
        <!--ID: aa7a3fce-bef5-4311-9cc1-5f04bb8c308c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Suspicious Export-PfxCertificate</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Export\-PfxCertificate</field>
    </rule>
    <rule id="114289" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dnscat_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Dnscat exfiltration tool execution-->
        <!--Date: 2019/10/24-->
        <!--Status: experimental-->
        <!--ID: a6d67db4-6220-436d-8afc-f3842fe05d43-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Dnscat Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Dnscat2</field>
    </rule>
    <rule id="114290" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_suspicious_extracting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.
These can be files created by users to store their own credentials, shared credential stores for a group of individuals,
configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.
-->
        <!--Date: 2021/12/19-->
        <!--Status: experimental-->
        <!--ID: bd5971a7-626d-46ab-8176-ed643f694f68-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Extracting Information with PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ls</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-R</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:select\-string\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Pattern\ )</field>
    </rule>
    <rule id="114291" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: experimental-->
        <!--ID: c72aca44-8d52-45ad-8f81-f96c4d3c755e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\${?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="114292" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: 7034cbbb-cc55-4dc2-8dad-36c0b942e8f1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:readtoend)$</field>
    </rule>
    <rule id="114293" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: experimental-->
        <!--ID: 07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="114294" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration-->
        <!--Date: 2021/07/20-->
        <!--Status: experimental-->
        <!--ID: daf7eb81-35fd-410d-9d7a-657837e602bb-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Compress\-Archive\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-DestinationPath\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\$env:TEMP\\</field>
    </rule>
    <rule id="114295" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: ebdf49d8-b89c-46c9-8fdf-2c308406f6bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).*</field>
    </rule>
    <rule id="114296" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: f99276ad-d122-4989-a09a-d00904a5f9d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)del|Remove\-Item|rm</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\(Get\-PSReadlineOption\)\.HistorySavePath</field>
    </rule>
    <rule id="114297" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: f99276ad-d122-4989-a09a-d00904a5f9d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Set\-PSReadlineOption</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)–HistorySaveStyle</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)SaveNothing</field>
    </rule>
    <rule id="114298" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_decompress_commands.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.-->
        <!--Date: 2020/05/02-->
        <!--Status: experimental-->
        <!--ID: 1ddc1472-8e52-4f7d-9f11-eab14fc171f5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
        </mitre>
        <description>PowerShell Decompress Commands</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Expand\-Archive</field>
    </rule>
    <rule id="114299" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"</field>
    </rule>
    <rule id="114300" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_stdin.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: experimental-->
        <!--ID: 9ac8b09b-45de-4a07-9da1-0de8c09304a3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"</field>
    </rule>
    <rule id="114301" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_athremotefxvgpudisablementcommand.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: 38a7625e-b2cb-485d-b83d-aff137d859f4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusable Invoke-ATHRemoteFXvGPUDisablementCommand</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:Invoke\-ATHRemoteFXvGPUDisablementCommand\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-ModuleName\ |\-ModulePath\ |\-ScriptBlock\ |\-RemoteFXvGPUDisablementFilePath</field>
    </rule>
    <rule id="114302" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_rundll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: experimental-->
        <!--ID: a23791fe-8846-485a-b16b-ca691e1b03d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="114303" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_get_nettcpconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: aff815cc-e400-4bf0-a47a-5d8a2407d4e1-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Use Get-NetTCPConnection</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Get\-NetTCPConnection</field>
    </rule>
    <rule id="114304" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_rundll32.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2019/10/08-->
        <!--Status: experimental-->
        <!--ID: 88a22f69-62f9-4b8a-aa00-6b0212f2f05a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="114305" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_get_addbaccount.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers-->
        <!--Date: 2022/03/16-->
        <!--Status: experimental-->
        <!--ID: b140afd9-474b-4072-958e-2ebb435abd68-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Get-ADDBAccount Usage</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Get\-ADDBAccount</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:BootKey\ )</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:DatabasePath\ )</field>
    </rule>
    <rule id="114306" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_suspicious_reset_computermachinepassword.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain. You can use it to reset the password of the local computer.-->
        <!--Date: 2022/02/21-->
        <!--Status: experimental-->
        <!--ID: e3818659-5016-4811-a73c-dde4679169d2-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Suspicious Computer Machine Password by PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)Reset\-ComputerMachinePassword</field>
    </rule>
    <rule id="114307" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_suspicious_smb_share_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and
to identify potential systems of interest for Lateral Movement.
Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
-->
        <!--Date: 2021/12/15-->
        <!--Status: experimental-->
        <!--ID: 6942bd25-5970-40ab-af49-944247103358-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Information for SMB Share</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)get\-smbshare</field>
        <field name="full_log" negate="no" type="pcre2">(?i)get\-smbshare</field>
    </rule>
    <rule id="114308" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_obfuscated_iex.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014-->
        <!--Date: 2019/11/08-->
        <!--Status: experimental-->
        <!--ID: 2f211361-7dce-442d-b78a-c04039677378-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
    </rule>
    <rule id="114309" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: a136cde0-61ad-4a61-9b82-8dc490e60dd2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:\/c|\/r).+clip(?:\.exe)?.{0,4}&amp;&amp;.+clipboard]::\(\s\\\"\{\d\}.+\-f.+\"</field>
    </rule>
    <rule id="114310" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_syncappvpublishingserver_exe.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, OSCD Community-->
        <!--Description: Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.-->
        <!--Date: 2020/10/05-->
        <!--Status: experimental-->
        <!--ID: fe5ce7eb-dad8-467c-84a9-31ec23bd644a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>SyncAppvPublishingServer Execution to Bypass Powershell Restriction</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)SyncAppvPublishingServer\.exe</field>
    </rule>
    <rule id="114311" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_bad_opsec_artifacts.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep_de, oscd.community-->
        <!--Description: Focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec.-->
        <!--Date: 2020/10/09-->
        <!--Status: experimental-->
        <!--ID: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Bad Opsec Powershell Code Artifacts</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$DoIt|harmj0y|mattifestation|_RastaMouse|tifkin_|0xdeadbeef</field>
    </rule>
    <rule id="114312" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_get_clipboard.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.-->
        <!--Date: 2020/05/02-->
        <!--Status: experimental-->
        <!--ID: 4cbd4f12-2e22-43e3-882f-bff3247ffb78-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1115</id>
        </mitre>
        <description>PowerShell Get Clipboard</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Get\-Clipboard</field>
    </rule>
    <rule id="114313" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_suspicious_download.yml</info>
        <!--Sigma Rule Author: Florian Roth-->
        <!--Description: Detects suspicious PowerShell download command-->
        <!--Date: 2017/03/05-->
        <!--Status: experimental-->
        <!--ID: de41232e-12e8-49fa-86bc-c05c7e722df9-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.DownloadFile\(|\.DownloadString\(</field>
    </rule>
    <rule id="114314" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_powercat.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: bf7286e7-c0be-460b-a7e8-5b2e07ecc2f2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>Netcat The Powershell Version</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)powercat\ |powercat\.ps1</field>
    </rule>
    <rule id="114315" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_suspicious_invocation_generic.yml</info>
        <!--Sigma Rule Author: Florian Roth (rule)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/12-->
        <!--Status: experimental-->
        <!--ID: bbb80e91-5746-4fbe-8898-122e2cafdbf4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Generic</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-enc\ |\ \-EncodedCommand\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-w\ hidden\ |\ \-window\ hidden\ |\ \-windowstyle\ hidden\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\ \-noni\ |\ \-noninteractive\ )</field>
    </rule>
    <rule id="114316" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_group>sysmon</if_group>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\\"\s+?\-f.*&amp;&amp;.*cmd.*\/c</field>
    </rule>
</group>
